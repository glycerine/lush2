;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (tex-to-utf8 <s>)
;; Convert tex special characters into utf8.
;; This function knows a limited number of tex constructs.
;; Its efficiency is mediocre. But progress is still possible.

(de tex-to-utf8(s)
  ;; add as needed. Use explode-bytes to find out
  (setq s (regex-subst "\\\\'{?e}?" (implode-bytes '(195 169)) s))
  (setq s (regex-subst "\\\\`{?a}?" (implode-bytes '(195 160)) s))
  (setq s (regex-subst "\\\\`{?e}?" (implode-bytes '(195 168)) s))
  (setq s (regex-subst "\\\\`{?u}?" (implode-bytes '(195 185)) s))
  (setq s (regex-subst "\\\\\\^{?a}?" (implode-bytes '(195 162)) s))
  (setq s (regex-subst "\\\\\\^{?e}?" (implode-bytes '(195 170)) s))
  (setq s (regex-subst "\\\\\\^{?i}?" (implode-bytes '(195 174)) s))
  (setq s (regex-subst "\\\\\\^{?o}?" (implode-bytes '(195 180)) s))
  (setq s (regex-subst "\\\\\\^{?u}?" (implode-bytes '(195 187)) s))
  (setq s (regex-subst "\\\\\\^{?y}?" (implode-bytes '(197 183)) s))
  (setq s (regex-subst "\\\\\"{?a}?" (implode-bytes '(195 164)) s))
  (setq s (regex-subst "\\\\\"{?e}?" (implode-bytes '(195 171)) s))
  (setq s (regex-subst "\\\\\"{?i}?" (implode-bytes '(195 175)) s))
  (setq s (regex-subst "\\\\\"{?o}?" (implode-bytes '(195 182)) s))
  (setq s (regex-subst "\\\\\"{?u}?" (implode-bytes '(195 188)) s))
  (setq s (regex-subst "\\\\\"{?y}?" (implode-bytes '(195 191)) s))
  (setq s (regex-subst "\\\\~{?n}?" (implode-bytes '(195 177)) s))
  (setq s (regex-subst "\\\\~{?o}?" (implode-bytes '(195 181)) s))
  (setq s (regex-subst "\\\\~{?N}?" (implode-bytes '(195 145)) s))
  (setq s (regex-subst "\\\\~{?O}?" (implode-bytes '(195 149)) s))
  (setq s (regex-subst "\\\\c{?c}?" (implode-bytes '(195 167)) s))
  (setq s (regex-subst "\\\\c{?C}?" (implode-bytes '(195 135)) s))
  ;; clear remaining latex stuff
  (setq s (regex-subst "~" " " s))
  (setq s (regex-subst "\\\\" "" s))
  (setq s (regex-subst "{" "" s))
  (setq s (regex-subst "}" "" s))
  (setq s (regex-subst "$" "" s))
  ;; more cleanups
  (regex-subst "[ \n\r\t]+" " " s) )



#? (tex-to-utf8-list <l>)
;; Traverse lists l and recursively convert tex special characters into utf8.

(de tex-to-utf8-list(l)
  (cond
   ((stringp l) (tex-to-utf8 l))
   ((consp l) (mapcar tex-to-utf8-list l))
   (t l) ) )

