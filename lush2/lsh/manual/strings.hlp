$Id: strings.hlp,v 1.11 2007/03/19 12:38:24 leonb Exp $
#? *** Strings

Strings are nul-terminated sequences of characters. <String>
objects are immutable.

The usual ASCII characters are represented with a single bytes. Some
characters are represented with multiple bytes.  Most Lush functions deal with
strings as sequences of bytes without regard to their character
interpretation.  Exceptions to this rule are indicated when appropriate.

The textual representation of a string is composed of the characters
enclosed between double-quotes. A string may contain macro-characters,
parentheses, semi-colons, as well as any other character. A line
terminating backslash indicates a multi-line string.

The following ``C style'' escape sequences are recognized 
inside a string:
.IP
<\\> for a single backslash,
.IP
<\"> for a double quote, 
.IP
<\n>, <\r>, <\t>, <\b>, <\f> respectively for a linefeed character
(ASCII LF), a carriage return (ASCII CR), a tab character (ASCII TAB),
a backspace character (ASCII BS), and a formfeed character (ASCII FF),
.IP
<\e> for a <end-of-file> character  (Stdio's EOF), 
.IP
<\^?> for a control character <control-?>,
.IP
<\ooo> for a byte whose octal representation is <ooo>.
.IP
<\xhh> for a byte whose hexadecimal representation is <hh>.
.IP
<\uhhhh> or <\Uhhhhhh> for the representation of 
unicode character <hhhh> or <hhhhhh> in 
the current locale.  If no such representation exists,
the UTF-8 representation is used.

#? ** String Indexing

Strings may be indexed like vectors. An indexed string expression
evaluates to the code point of the character at the indexed
position.

Example:
.EX ("halleluja" 1)
.EX (chr ("halleluja" 1))

#? ** Basic String Functions

Like most Lush functions, the basic functions operating on strings do
not modify their arguments.  They create instead a new string on the
basis of their arguments.

#? (make-string <n> <s>)
Create string by <n> times concatenating string <s>.

Example:
.CODE
? (make-string 5 ">-<")
= ">-<>-<>-<>-<>-<"


#? (vector-to-string <v>)
.SEE string-to-vector
Create a string from <int> vector <v>. 

Example:
.EX (vector-to-string [i 65 66 67])


#? (string-to-vector <s>)
.SEE vector-to-string
Create an <int> vector from string <s>.

The values in the resulting vector are the character codes of the
characters in <s>.

Example:
.EX (string-to-vector "offhand")


#? (str-cat  <s1> ... <sn>)
Concatenate strings <s1> to <sn> and return the new string.

Example:
.EX (str-cat "hello" " my friends")


#? (str-mid  <s> <n> [<l>])
.SEE substring
Returns a substring of <s> composed of <l> characters starting at position <n>
(a number between 0 and length of <s> minus 1). With two arguments <str-mid> returns characters until the end of string <s>.

Example:
.EX (str-mid "alphabet" 3 2)
.EX (str-mid "alphabet" 3)


#? (substring <s> <l> <r>)
.SEE str-mid
Return a substring of <s> starting with the <l>-th character and
ending before the <r>-th character.

Examples:
.EX (substring "alphabet" 0 5)
.EX (substring "alphabet" 1 100)
.EX (substring "alphabet" 1 -1)


#? (str-right  <s> <n>)
.SEE str-left
Return the <n> rightmost characters of <s> as a new string.
When <n> is negative, drop the leftmost <-n> characters of <s>
and return a new string.

Examples:
.EX (str-right "alphabet" 3)
.EX (str-right "alphabet" -3)


#? (str-left  <s> <n>)
.SEE str-right
Return the <n> leftmost characters of <s> as a new string.
When <n> is negative, drop the rightmost <-n> characters of <s>
and return a new string.

Examples:
.EX (str-left "alphabet" 3)
.EX (str-left "alphabet" -3)


#? (str-insert <s> <n> <s1>)
Insert string <s1> before character <n> of string <s1> and return
the new string. When <n> is equal to 0, <str-insert> actually
concatenates <s2> and <s1>.

Example:
.EX (str-insert "alphabet" 3 "***")


#? (str-subst <s> <s1> <s2>)
Substitute all occurrences of <s1> in <s> by <s2> and return
new string.

Example:
.EX (str-subst "moon in the afternoon" "oo" "++")


#? (str-del <s> <n> <l>)
Remove <l> characters from string <s> starting with character <n>.

Example:
.EX (str-del "alphabet" 3 2)


#? (str-join <unsep> <ss>)
Concatenate all strings in list <ss> with string <unsep> in
between. Return the string. <Str-join> is the inverse of <str-split>.
.SEE str-split

Example:
.EX (str-join "+" (mapcar str (range 10)))
   

#? (str-split <s> <sep>)
Break string <s> into pieces at all occurrences of substring <sep>.
Return the list of pieces (if <sep> does not occur in <s>, return
a list with <s> as its single element). 
<Str-split> is the inverse of <str-join>.
.SEE str-join

Example:
.EX (str-split "voelker" "e")


#? (str-startswith <s> <prefix>)
True if string <s> starts with <prefix>.

#? (str-endswith <s> <suffix>)
True if string <s> ends with <suffix>.

#? (str-find <s> <r> [<n>]) 
Searches the first occurrence of the string <s> in the string <r>,
starting at byte position <n>.  <Str-find> returns the position of the
first match. If such an occurrence cannot be found, it returns the 
empty list.

Example:
.EX (str-find "pha" "alpha alphabet alphabetical" 4)

#? (upcase <s>)
Returns string <s> with all characters converted to uppercase
according to the current locale.

Example:
.EX (upcase "alphabet")

#? (upcase1 <s>)
Returns string <s> with first character converted to uppercase
according to the current locale.

Example:
.EX (upcase1 "alphabet")

#? (downcase <s>)
Returns string <s> with all characters converted to lowercase
according to the current locale.

Example:
.EX (downcase "alPHABet")


#? (str-val <s>)
Returns the numerical value of <s> considered as a number.
Returns the empty list if <s> does not represent a decimal 
or hexadecimal number.

Example:
.EX (str-val "3.14")
.EX (str-val "abcd")
.EX (str-val "0xABCD")

#? (str <n>)
Returns the decimal string representation of the number <n>.

Example:
.EX (str (2* 3.14))

#? (strhex <n>)
Returns the hexadecimal string representation of integer number <n>.

Example:
.EX (strhex 18)


#? (asc <s>)
Return the code point of the first character in string <s>.
This function causes an error if <s> is an empty string.

Example
.EX (asc "abcd")


#? (chr <n>)
Return string containing a single character whose encoding
is <n>. (Current limitation: <n> must be in the range 0 to 255.)

Example
.EX (chr 48)


#? (isprint <s>)
Returns <t> if string <s> contains only printable characters
according to the current locale.

Example:
.EX (isprint "alpha bet")
.EX (isprint "alpha\003bet")

#? (pname <l>)
Returns a string representation for the lisp object <l>. 
<pname> is able to give a string representation 
for numbers, strings, symbols, lists, etc...

Example:
.EX (pname (cons 'a '(b c)))


#? (sprintf <format> ... <args> ... )

Like the C language function <sprintf>, this function returns a string
similar to a format string <format>. The following escape sequences,
however are replaced by a representation of the corresponding
arguments of <sprintf>:

.IP
<"%%"> is replaced by a single \%.
.IP
<"%l"> is replaced by a representation of a lisp object.
.IP
<"%[-][<n>]s"> is replaced by a string, right justified in a field of
length <n> if <n> is specified.  When the optional minus sign is
present, the string is left justified.
.IP
<"%[-][<n>]d"> is replaced by an integer, right justified in a field of
<n> characters, if <n> is specified.  When the optional minus sign is
present, the string is left justified.
.IP
<"%[-][<n>[.<m>]]<c>"> where <c> is one of the characters <e>, <f> or
<g>, is replaced by a floating point number in a <n> character field,
with <m> digits after the decimal point. <e> specifies a format with
an exponent, <f> specifies a format without an exponent, and <g> uses
whichever format is more compact.  When the optional minus sign is
present, the string is left justified.
.PP
Example:
.EX (sprintf "%5s(%3d) is equal to %6.3f\n" "sqrt" 2 (sqrt 2))


#? (str-strip <s>)
.TYPE DE
.FILE sysenv.lsh
This function deletes the leftmost and rightmost spaces in string <s>.
.CODE
(str-strip "  lots of space   ")
.PP

#? (str-stripl <s>)
.TYPE DE
.FILE sysenv.lsh
This function deletes the leftmost spaces in string <s>.
.CODE
(str-stripl "  lots of space   ")
.PP


#? (str-stripr <s>)
.TYPE DE
.FILE sysenv.lsh
This function deletes the rightmost spaces in string <s>.
.CODE
(str-stripr "   plenty of spaces   ")
.PP


#? ** Regular Expressions (regex)

A regular expression describes a family of strings built according to
the same pattern. A regular expression is represented by a string
which ``matches'' (using certain conventions) any string in the
family.

The conventions for describing regular expressions in Lush
are quite similar to those used by the <egrep> unix utility:
.IP
An ordinary character matches itself. Some characters, <(> <)> <\> <[>
<]> <|> <.> <?> <*> and <\> have a special meaning, and should be
quoted by prepending a backslash <\>.  The string <"\\\\"> actually is
composed of two backslashes (because backslashes in strings should be
escaped!), and thus matches a single backslash.
.IP
A dot <.> matches any byte.
.IP
A caret <^> matches the beginning of the string.
.IP
A dollar sign <$> matches the end of the string.
.IP
A range specification matches any specified byte.  For example,
regular expression <[YyNn]> matches <Y> <y> <N> or <n>, regular
expression <[0-9]> matches any digit, regular expression <[^0-9]>
matches any byte that is not a digit, regular expression <[]A-Za-z]>
matches a closing bracket, or any uppercase or lowercase letter.
.IP
The concatenation of two regular expressions matches the concatenation
of two strings matches regular expression. Regular expressions can be
grouped with parenthesis, and modified by the <?> <+> and <*> characters.
.IP
A regular expression followed by a question mark <?> matches 0
or 1 instance of the single regular expression.
.IP
A regular expression followed by a plus sign <+> matches 1 or more
instances of the single regular expression.
.IP
A regular expression followed by a star <*> matches 0 or more
instances of the single regular expression.
.IP
Finally, two regular expressions separated by a bar | match any string
matching the first or the second regular expression.
.PP
Parenthesis can be used to group regular expressions.  For instance,
the regular expression <"(+|-)?[0-9]+(\.[0-9]*)?"> matches a signed
number with an optional fractional part.  Furthermore, there is a
``register'' associated with each parenthesized part of a regular
expression.  The matching routines use these registers to keep track
of the characters matched by the corresponding part of the regular
expression.  This is useful with functions <regex-extract> and
<regex-subst>.

#? (regex-match <r> <s>)
Returns <t> if regular expression <r> exactly matches the entire
string <s>. Returns the empty list otherwise.

Example: 
.EX (regex-match "(+|-)?[0-9]+(\\.[0-9]*)?" "-56")


#? (regex-extract <r> <s>)
If regular expression <r> matches the entire string <s>,
this function returns a list of strings representing the
contents of each register, that is to say the characters matched
by each section of the regular expression <r> delimited
by parenthesis.  This is useful for extracting specific
segments of a string.

If the regular expression <r> does not match the string <s>,
function <regex-extract> returns the empty list.  If the regular
expression <r> matches the string but does not contain parenthesis,
this function returns a list containing the initial string <s>.

Example:
.EX (regex-extract "(+|-)?([0-9]+)(\\.[0-9]*)?" "-56.23")

#? (regex-seek <r> <s> [<start>])
Searchs the first substring in <s> that matches the regular expression
<r>, starting at position <start> in <s>.  If the argument <start> is
not provided, string <s> is searched from the beginning.

If such a substring is found, <regex-seek> returns a list 
<(begin length)>, where	<begin> is the index of the first character 
of the substring, and <length> is the length of the subscript.  The
instruction <(mid s begin length)> may be used to extract this
substring.

If no such substring exists, <regex-seek> returns the empty list.

Example:
.EX (regex-seek "(+|-)?[0-9]+(\\.[0-9]*)?," "a=56.2, b=57,")


#? (regex-subst <r> <s> <str>)

Replaces all substring matching regular expression <r> in string <str>
by string <s>.

A ``register'' is associated to each piece of the regular expression <r>
enclosed within parenthesis. Registers are numbered from <%0> to <%9>.
During each match, the substring of <str> matching each piece of the
regular expression is stored into the corresponding register.

During the replacement process, characters <%0> to <%9> in the
replacement string <s> are substited the content of the corresponding
register. (A single <%> is denoted as <%%>).

Example: 
.EX (regex-subst "([a-h])([1-8])" "%1%0" "e2-e4, d7-d5, d2-d4, d5xd4?")



#? (regex-rseek <r> <s> [<n> [<gr>]])
.TYPE DE
.FILE sysenv.lsh

This function seeks recursively the first occurence of <r> in <s>.
and returns the list made of the locations.

When argument <n> is provided, it seeks and returns
the locations of the <n> first occurences
and it returns <()> on failure.

Optional regex <gr> defines the allowed garbage stuff before and between occurences.
When <n> is not provided, this function checks the garbage stuff after the occurences too.
If unallowed garbage stuff is found, the function returns <()>.
By default, any garbage stuff is allowed.

Since even void garbage is checked, a caret "^" is often added to <gr>.


#? (regex-split  <r> <s> [<n> [<gr> [<neg>]]])
.TYPE DE
.FILE sysenv.lsh

This function splits a string <s> into occurences of <r>.

When integer <n> is provided, this function provides only the <n> first occurences.

When regex <gr> is provided, garbage is checked (see function <regex-rseek>).

When <neg> is provided and non nil, this function returns the garbage stuff instead.
When both <n> and <neg> are provided and non nil, the <n> garbages before and between
the <n> first occurences are returned.


#? (regex-skip  <r> <s> [<n> [<gr> [<neg>]]])
.TYPE DE
.FILE sysenv.lsh

This function skips the <n> first occurences of regex <r> in a string <s>.

When <n> is equal to 0, it returns <s>.
When <n> is lower than 0, it generates an error.
When <n> is either nil or undefined, it is set to 1.

When <neg> is either nil or undefined, it returns the right residual of <s>
just following the <n>th occurence.

When <neg> is not nil, it returns the right residual of <s>
begining with the <n>th occurence.

When regex <gr> is provided, garbage is checked (see function <regex-rseek>).


#? (regex-count <r> <s>)
.TYPE DE
.FILE sysenv.lsh

This function recursively seeks the occurences of regex <r> in string <s>
and returns the number of occurences found.


#? (regex-tail <r> <s> [<n> [<gr> [<neg>]]])
.TYPE DE
.FILE sysenv.lsh

This function seeks recursively the occurences of regex <r> in string <s>.

When <neg> is either nil or undefined, it returns the right residual of <s>
begining before the <n>th last occurence.

When <neg> is non nil, it returns the right residual of <s>
begining after the <n>th last occurence (and thus begining before
the <n>th garbage.

When <n> is either nil or undefined, it is set to 1.

When regex <gr> is provided, garbage is checked (see function <regex-rseek>).


#? (regex-member <rl> <s>)
.TYPE DE
.FILE sysenv.lsh

This function returns the first member of list <rl>
which is a matching regex for string <s>.


#? ** International Strings

Lush contains partial support for multibyte strings
using an encoding specified by the locale.
This is work in progress.


#? (locale-to-utf8 <s>)
Converts a string from locale encoding to UTF-8 encoding.
This is a best effort function:
The unmodified string is returned
if the conversion is impossible, either because the string <s>
is incorrect, or because the system does not provide
suitable conversion facilities.


#? (utf8-to-locale-to <s>)
Converts a string from UTF-8 encoding to locale encoding.
This is a best effort function:
The unmodified string is returned
if the conversion is impossible, either because the string <s>
is incorrect, or because the system does not provide
suitable conversion facilities.


#? (explode-chars <s>)
Returns a list of integers with the wide character
codes of all characters in the string.
This function interprets multibyte sequences 
according to the encoding specified by the current locale.

Example (under a UTF8 locale):
.VP
? (explode-chars "\xe2\x82\xac")
= (8364)

#? (implode-chars <l>)
Returns a string composed of the characters
whose wide character code are specified by the
list of integers <l>.  Multibyte characters are
generated according to the current locale.
For instance, under a UTF8 locale,

Example
.EX (implode-chars '(8364 50 51 46 53 32 61 32 32 162 50 51 53 48))

#? (explode-bytes <s>)
Returns a list of integers representing
the sequence of bytes in string <s>,
regardless of their character interpretation.

Example
.EX (explode-bytes "\xe2\x82\xac")


#? (implode-bytes <l>)
Assemble a string composed of the bytes
whose value is specified by the list of integers <l>,
regardless of their multibyte representation.

Example
.EX (implode-bytes '(226 130 172 50 51))
