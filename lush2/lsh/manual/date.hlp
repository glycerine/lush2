$Id: date.hlp,v 1.3 2006/02/26 15:34:46 laseray Exp $
#? ** Dates

Dates are instances of a special class <Date>. This facility is
built on top of various system functions which are themselves
based on a count of seconds since January 1st, 1970. 
Most systems are able to handle a date between 1910 and 2030.

Date are stored using several formats depending of their accuracy.
Each format is defined as a range over various components of a date:
<year>, <month>, <day>, <hour>, <minute>, <second>.
.IP
For instance, a date ``<year> to <day>'' identifies 
any single day between 1910 and 2030.
.IP
Similarly, a date ``<year> to <second>'' identifies 
any single second in the same interval.
.IP
A date ``<hour> to <minute>'' identifies any 
single minute within a day.
.PP 
Finally we have defined a standard way to numerically encode dates:
The possibly fractional number of days (daynumber) since January 1st,
1970 at zero hour local.


#? (date-to-day <date>)
Returns the possibly fractional number of days between
January 1st, 1970 and the specified <date>.
.EX (date-to-day (string-to-date "1993-12-04" 'year 'day))
.EX (date-to-day (now))


#? (day-to-date <daynumber>)
Builds a date string from a possibly fractional day number.
.EX (day-to-date 8738)
.EX (day-to-date 8738.23)

#? (today)
Returns today's date at zero hour as a date ``<year> to <day>''
.EX (today)

#? (now)
Returns today's date and now's time as a date ``<year> to <second>''
.EX (now)

#? (split-date <date>)
Returns an alist contaning all the components of a date <date>.
Each component can be accessed using function <assoc>. The following
components are provided:

.VP
  <year>:	The year (minus 1900).
  <month>:	The month number (0..11).
  <day>:	The day of the month (1..31).
  <hour>:	The hour (0..23).
  <minute>:	The number of minutes (0..59).
  <second>:	The number of seconds.
  <wday>:       The day of the week (0..6).
  <yday>:	The day of the year (1..366).
.PP
These items are present if the resolution of the date object allows
it. The last two items require at least a date ``<year> to <day>''

.EX (split-date (now))
.EX (split-date (today))


#? (date-type <date>)
This function returns a string describing the current resolution of a
date <date> as a list of two symbols chosen in <year>, <month>, <day>,
<hour>, <minute>, <second>.

.EX (date-type (today))
.EX (date-type (now))


#? (date-extend <date> <from> <to>)
This function returns a new date equivalent to <date> with the
resolution specified by the two symbols <from> and <to> which may be
any of <year>, <month>, <day>, <hour>, <minute>, <second>.

Reducing the resolution of a date is achieved by truncating unneeded
components. Extending the resolution of a date towards more accuracy is
achieved by inserting zeroes. Extending the resolution of a date towards
fields of larger magnitude is achieved by inserting the current 
year, month, day, etc...

.EX (date-extend (now) 'year 'minute)
.EX (date-extend (date-extend (now) 'year 'minute) 'hour 'second)


#? (date-to-string <date> [<format>])
Format a date <date> according to <format>. 

Argument <format> is a format string reminiscent of <printf>.
When argument <format> is omitted, a regular ANSI string 
is produced.
.VP
	YYYY-MM-DD HH:MM:SS		for <year> to <second>
	YYYY-MM-DD			for <year> to <day>
	MM-DD HH:MM			for <month> to <minute>
.PP
The format for <date-to-string> is a character string that consists of field
descriptors and text characters, reminiscent of <printf>.  Each field
descriptor consists of a % character followd by another character that
specifies the replacement for the field descriptor.  All other characters
are copied from fmt into the result.  The following field descriptors are
supported:

.LI 
%%: Same as %.
.LI 
%a: Day of week, using  locale's  abbreviated  weekday names.
.LI 
%A: Day of week, using locale's full weekday names.
.LI 
%b,%h: Month, using locale's abbreviated month names.
.LI 
%B: Month, using locale's full month names.
.LI 
%c: Date and time as %x %X.
.LI 
%C: Date and time, in locale's long-format date and time
representation. 
.LI 
%d: Day of month (01-31).
.LI 
%D: Date as %m/%d/%y.
.LI 
%e: Day of month (1-31; single digits are preceded  by a blank).
.LI 
%H: Hour (00-23).
.LI 
%I: Hour (00-12).
.LI 
%j: Day number of year (001-366).
.LI 
%k: Hour (0-23; single digits are preceded by a blank).
.LI 
%l: Hour (1-12; single digits are preceded by a blank).
.LI 
%m: Month number (01-12).
.LI 
%M: Minute (00-59).
.LI 
%n: Same as \n.
.LI 
%p: Locale's equivalent of  AM  or  PM.
.LI 
%r: Time as %I:%M:%S %p.
.LI 
%R: Time as %H:%M.
.LI 
%S: Seconds (00-59).
.LI 
%t: Same as \t.
.LI 
%T: Time as %H:%M:%S.
.LI 
%U: Week number of year (01-52), Sunday is  the  first day of the week.
.LI 
%w: Day of week; Sunday is day 0.
.LI 
%W: Week number of year (01-52), Monday is  the  first day of the week.
.LI 
%x: Date, using locale's date format.
.LI 
%X: Time, using locale's time format.
.LI 
%y: Year within century (00-99).
.LI 
%Y: Year, including century (for example, 1988).
.PP
The difference between %U and %W lies in which day is counted as the
first day of the week.  Week number 01 is the first week with four or
more January days in it.


.EX (date-to-string (today))
.EX (date-to-string (now))
.EX (date-to-string (now) "%C %X")




#? (string-to-date <string> [<from> <to>])

Function <string-to-date> converts the ansi date string <string> 
to a date using the resolution specified by <from> and <to>.

Argument <from> and <to> are symbols specifying the resolution of the target
date.  They may be any of the following symbols: <year>, <month>, <day>,
<hour>, <minute>, <second>. When these arguments are ommited, a date
``<year> to <second>'' is assumed.

Abbreviated dates are handled by filling the leftmost fields with
the current date and the rightmost fields with zeroes.

.EX (string-to-date "1993-12-12 8:30" 'year 'minute)




#? (date-add-second <date> <count>)
This function adds <count> seconds to date <date>.
.EX (date-add-second (now) 67)

#? (date-add-minute <date> <count>)
This function adds <count> minutes to date <date>.
.EX (date-add-minute (now) 67)

#? (date-add-hour <date> <count>)
This function adds <count> hours to date <date>.
.EX (date-add-hour (now) 67)

#? (date-add-day <date> <count>)
This function adds <count> days to date <date>.
.EX (date-add-day (now) 67)

#? (date-add-month <date> <count> [<opt>])
This function adds <count> months to date <date>.

This is tricky because months have different lengths.
Adding an integral number of month to certain dates
may produce an illegal day number for the target month.
(eg. <(date-add-month "1996-05-31" 1)>).
The behavior of this function is therefore further 
specified by the value of optional argument <opt>.
.IP
When <opt> is nil or omitted, this function generates
a Lush error whenever the answer would be an 
illegal date.
.IP
When <opt> is <'no-error>, this function returns
the empty list <()> whenever the answer would be an 
illegal date.
.IP
When <opt> is <'end-of-month>, this function 
always returns the last day of the target month
regardless of the specified day number.
.IP
When <opt> takes any other value (eg. <'loosely> or <t>)
this function always returns a legal date.
Answers with oversized day numbers are corrected by
returning the last day of the target month.
.PP
.EX (date-add-month (now) -2 t)

#? (date-add-year <date> <count> [<opt>])
This function adds <count> months to date <date>.

This is tricky because adding an integral number 
of years to february 29th dates may produce an illegal date.
The behavior of this function is therefore further 
specified by the value of optional argument <opt>.
.IP
When <opt> is nil or omitted, this function generates
a Lush error whenever the answer would be an 
illegal date.
.IP
When <opt> is <'no-error>, this function returns
the empty list <()> whenever the answer would be an 
illegal date.
.IP
When <opt> takes any other value (eg. <'loosely> or <t>)
this function always returns a legal date.
The day number is changed to 28 whenever the answer would
be the february 29th during a non leap year.
.PP
.EX (date-add-year (now) 2 t)

#? (date-code <date> <flags>)
This function returns a list of numbers encoding a date
<date> suitably for a statistical analysis. Argument
<flag> is an integer composed by oring (using <bitor> for instance)
the following constants controlling which values to generate:
.IP 1:
One value representing the number of days since January 1st, 1970.
.IP 16:
Two values encoding a point moving on the unit circle once a day.
.IP 8:
Two values encoding a point moving on the unit circle once a week.
.IP 4:
Two values encoding a point moving on the unit circle once a month.
.IP 2:
Two values encoding a point moving on the unit circle once a year.
.PP
These components are generated only if they make sense with the
resolution of the date <date>.

.EX (date-code (now) 24)
.EX (date-code (today) 31)

