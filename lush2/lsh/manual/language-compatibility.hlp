#? **** Language Compatibility 

#? *** Lush 2 vs Lush 1

Lush 2.x is not fully backward compatible to Lush 1.x. Here are
the main differences
{<ul>
  {<li> Lush 2 has a more logical and more consistently named set
        of array functions. See the help on "Arrays and Indexes".}        
  {<li> Type declarations require the <declare> keyword.}
  {<li> Strings in compiled code are plain C strings (not byte storages).}
  {<li> Lush 2 has a garbage collector, the <LOCK> and <UNLOCK> macros
        for reference counting are obsolete.}
}

To make porting Lush 1.x legacy code easy there is a compatibility
namespace <lush1-> containing obsolete function definitions.
See for example the code in <packages/libnum/linalgebra.lsh>.


#? *** Compilable Lush

The design philosophy of the Lush compiler is somewhat unusual, 
and, admittedly, in stark violation of many commonly accepted 
principles of good programming language design. First, the Lush 
compiler is not designed to replace the interpreter, but to 
complement it. Lush applications are often a combination 
of compiled code for things where performance takes precedence
over flexibility (e.g., "expensive" and heavily numerical
functions), and interpreted code for things where flexibility
takes precedence over performance (high-level logic, user 
interface).

Therefore, the Lush compiler is designed to generate 
very efficient code for a subset of the Lush language as 
understood by the interpreter. In addition, Lush functions may 
contain embedded C code if they are going to be compiled. This 
ability makes Lush the "superglue of the scripting languages"
as it allows calling C or C++ library code directly, without writing
an interface first. The compilable subset of Lush will be called 
CLush, while the interpreted Lush dialect will be called simply
Lush.

The main differences between Lush and CLush are as follows:
{<ul>
  {<li>
  CLush is statically typed (the type of formal function arguments
  must be declared), while Lush is dynamically typed (a single
  variable can be assigned values of different types at different
  times in the same program).}
  {<li>
  CLush uses lexical scoping while Lush uses dynamic variable
  binding (if you don't know the difference, don't worry).}
  {<li>
  Dynamic lists are not compilable, that is, the number and type
  of list elements must be known at compile time.}
  {<li>
  When dealing with dynamically allocated objects in inline C,
  one may either use the C-style manual memory management (<malloc>
  and <free>) or the memory manager <cmm>, which is part of the Lush
  runtime. The two memory management styles may coexist but may not
  be mixed. (For more information on <cmm> see the documentation at 
  {<hlink> http://libcmm.sf.net}. Read also about Lush's <mptr> type).}
}


#? *** Differences to Common Lisp

Lush is more similar to Scheme than to Common Lisp in many ways.
This section lists a couple of not so obvious differences between
Lush and Common Lisp.

#? ** NIL is not equivalent to ()

While both Lush and Lisp use <()> to represent falsity and the empty list, 
Lush has no synonym for it as Common Lisp has with <nil>. However, since unbound
symbols evaluate to <()> in Lush, writing <nil> instead of <()> will work as
expected most of the time, as long as the symbol <nil> is not bound. But there are
exceptions, the following example illustrates one:

{<code>
? nil
= ()

? (member nil '(1 nil 2))
= ()
</code>}

The second occurrence of <nil> in the above example is not evaluated and
thus is not equivalent to <()>. Since <nil> is just a symbol like any other,
it is recommended to always write <()> where in one might use <nil> in
Common Lisp.

       