$Id: boolean.hlp,v 1.3 2006/02/26 15:34:46 laseray Exp $
#? *** Booleans Operators

Expressions in Lush are considered ``false'' when their evaluation
returns the empty list. All other expressions are considered ``true''.
The symbol <t> however is preferred for this meaning.

#? ** Boolean Arithmetic 
A number of functions are available for programming tests 
and to return boolean values

#? (= <n1> <n2>)

Test if <n1> is equal to <n2>.
Two objects are equal if they have the same type and if
they convey the same information. The criterion for deciding
equality therefore depends on the type of the object.

This function supports any Lush object.
.IP
It is able to compare the values of numbers, strings,
dates, lists, matrices, arrays, hash tables and high level objects
(those created by <new> and belonging to classes created by <defclass>).
.IP
The comparison of other low-level objects
(i.e. from user defined classes written in C language following the Open protocol)
usually relies upon physical equality.
However, it is possible to put other comparison functions
into the C structures which define the classes.
.PP
Example:
.EX (= '(1 2 (3)) (cons 1 '(2 (3))))
.EX (= [1 2] [1 2])

Testing the equality between special numeric values may be tricky.
For example, the IEEE754 specification(supported by most
of the industry) defines special bit patterns named NaN(Not a Number).
Comparing two NaNs should always return false.
Major operating systems and compilers however do not respect this.

Lush expressly specifies that the result returned by
the equality test is *always* true when objects <n1> and <n2> 
share the same memory location. In other words, if the function <==>
returns <t> then the function <=> returns <t> as well.

.SEE Special Numerical Values (IEEE754).
.SEE (== <n1> <n2>)
.SEE Comparison of User Defined Objects.

#? (<> <n1> <n2>)	
Tests if <n1> is different from <n2>. This function is equivalent to
.CODE
(de <> (n1 n2) (not (= n1 n2)))
.PP

Example:
.EX (<> 2 "abcd")
.EX (<> 2 2)

.SEE (= <n1> <n2>)


#? (== <n1> <n2>)
.SEE (= <n1> <n2>)
Test if <n1> and <n2> are physically equal.

This function does not even look at the information conveyed by the lisp
objects <n1> or <n2>. It just tests that the pointers returned by the 
expression <n1> and <n2> are equals.  

Pointer equality not only means that objects referred to by expression
<n1> and <n2> are equal, but also means that they are located at the
same memory addresses. 

This information is meaningful as soon as
you use functions that modify objects (as opposed to functions
returning a modified copy of the object and leave the initial object unchanged).
These functions include the following:
.IP
Physically changing list component using <rplaca> or <rplacd>.
.IP
Setting the contents of an array or a matrix.
.IP
Setting the value of a slot of an object
.PP
Function <==> may be used in conjunction with these functions. Modifying indeed
the object referred to as <n1> will therefore also modify the object referred 
to as <n2>.  Function <==> may also be used as a fast way to compare objects
and matrix when you know that the only possibility of equality is physical equality.

Example:
.CODE
? (setq a 3)
= 3
? (== a 3)
= ()
? (= a 3)
= t
? (== a a)
= t
? (setq a [1 2])
= [1 2]
? (setq b [1 2])
= [1 2]
? (= a b)
= t
? (== a b)
= ()
? (a 0)
= [0 2]
? (= a b)
= ()
? b
= [1 2]


#? (0= <n>)	
Test if <n> is equal to 0.

.SEE Special Numerical Values (IEEE754).

#? (0<> n)	
Test if <n> is different from 0.

.SEE Special Numerical Values (IEEE754).

#? (<= <n1> <n2>)
Test if <n1> is less or equal than <n2>.
Arguments <n1> or <n2> may be dates, strings or numbers.
User defined objects may be supported as well.

.SEE Special Numerical Values (IEEE754).
.SEE Comparison of User Defined Objects.

#? (< <n1> <n2>)	
Test if <n1> is less than <n2>.
Arguments <n1> or <n2> may be dates, strings or numbers.
User defined objects may be supported as well.

.SEE Special Numerical Values (IEEE754).
.SEE Comparison of User Defined Objects.

#? (>= <n1> <n2>)	
Test if <n1> is greater or equal than <n2>.
Arguments <n1> or <n2> may be dates, strings or numbers.
User defined objects may be supported as well.

.SEE Special Numerical Values (IEEE754).
.SEE Comparison of User Defined Objects.

#? (> <n1> <n2>)
Test if <n1> is greater equal than <n2>.
Arguments <n1> or <n2> may be dates, strings or numbers.
User defined objects may be supported as well.

.SEE Special Numerical Values (IEEE754).
.SEE Comparison of User Defined Objects.

#? (and <l1> ... <ln>)	
Evaluates sequentially <l1> .. <ln>.  If a result is the empty list,
function <and> immediately returns <()>.  The result of the evaluation
of <ln> is returned otherwise.

Example:
.EX (and (= 2 2) (= 2 3) (print (= 2 2)))


#? (or <l1> ... <ln>)	
Evaluates sequentially <l1> .. <ln>.  If a result is not the empty
list, this result is immediately returned.  The empty list is returned
otherwise.

Example:
.EX (or (= 2 2) (= 2 3))


#? (not <l>)
Alias for <null>.

#? ~ <l>
.TYPE MCHAR
.FILE sysenv.lsh
This macro-character expands to <(null l)>.




#? ** Predicates
Predicates test the type of any lisp object.

#? (listp <obj>)	
True when <obj> is a list.

Example:
.EX (listp ())
.EX (listp "abc")
.EX (listp '(2 3))
.EX (listp (cons 2 3))


#? (null <obj>)
True when <obj> is the empty list.

Example:
.EX (null t)


#? (consp <obj>)	
True when <obj> is a non-empty list.

Example:
.EX (consp ())
.EX (consp "abc")
.EX (consp '(2 3))


#? (proper-list-p <obj>)
True when <obj> is a proper list.

Example:
.EX (proper-list-p '(a b . c))
.EX (proper-list-p '(a b c))
'EX (proper-list-p "abc")


#? (atom <obj>)	
True when <obj> is an atom.

Example:
.EX (atom ())

#? (numberp <obj>)	
True when <obj> is a number.

Example:
.EX (numberp 3.14)

#? (symbolp <obj>)	
True when <obj> is a symbol.

Example:
.EX (symbolp 'a)

#? (classp <obj>)	
True when <obj> is a class.

Example:
.EX (classp object)

#? (functionp  <obj>)
True when <obj> is a function.

Example:
.EX (functionp "abc")
.EX (functionp functionp)

#? (stringp <obj>)
True when <obj> is a string.

Example:
.EX (stringp "abc")

#? (emptyp <obj>)
True when <obj> is empty. 

.EX (emptyp '(1 2 3))
.EX (emptyp ())
.EX (emptyp "123")
.EX (emptyp "")
