$Id: numbers.hlp,v 1.6 2006/02/26 15:34:46 laseray Exp $
#? *** Numbers
.SEE Special Numerical Values (IEEE754).

Numbers are the simplest kind of atoms. 
They are stored as double precision floating point numbers. 

Numerical computations in Lush are usually performed in double 
precision. Single precision however is used by some number crunching 
functions, like the matrix calculus operations.

You can type in decimal number using the traditional exponential
notation or using hexadimal numbers preceded by characters <"0x">.
Here are a few examples of legal numbers:
.CODE
	23
	3.14
	12e6		;; equivalent to 12000000
	1.2E6		;; equivalent to  1200000
	0x1A		;; equivalent to 26
.PP

#? ** Numerical Constants

#? +2pi+
Perimeter of the unit circle.

#? +pi+
Half the perimeter of the unit circle.

#? +e+ 
Euler's constant.

#? +int-min+
Minimum representable integer value (machine-dependent).

#? +int-max+
Maximum representable integer value (machine-dependent).

#? +macheps+
Machine epsilon (machine-dependent).


#? ** Elementary Numerical Functions

#? * (integerp <x>)
True when <x> is an integer.
Raises an error when <x> is not a number.

#? * (oddp <x>)
True when <x> is an odd number.
Raises an error when <x> is not an integer.

#? * (evenp <x>)
True when <x> is an even number.
Raises an error when <x> is not an integer.


The following elementary functions operate on numbers:

#? (+ <n1> ... <nm>)
Computes the sum of numbers <n1> to <nm>.

Example:
.EX (+ 1 2 3 4)

#? (1+ <n>)
Adds 1 to <n>.

Example:
.EX (1+ 4)

#? (-  [<n1>] <n2>)
Subtracts <n2> from <n1>. If one argument only is provided, 
returns the opposite of <n2>.

Example:
.EX (- 2 5)

#? (1- <n>)
Subtracts 1 from <n>.

Example:
.EX (1- (+ 4 5))

#? (* <n1> ... <nm>)
Computes the product of <n1> to <nm>. 

Here is a memory intensive way of computing a factorial:
.EX (apply * (range 1 5))

#? (2* <n>)
Multiplies <n> by 2.

Example:
.EX (2* (+ 4 5))

#? (/  [<n1>] <n2>)
Divides <n1> by <n2>. If one argument only is provided, 
Function </> returns the inverse of <n2>.

Example:
.EX (/ 3)

#? (2/ <n>)
Divides <n> by 2.

Example:
.EX (2/ 5)

#? (** <n> <m>)
Returns <n> raised to the <m>th power.

Example:
.EX (** 2 5)

#? (max <l1> ... <ln>)	
Return the maximum element within <l1> ... <ln>. 
Arguments <li> may be numbers or strings.

Example:
.EX (max 2 3 (* 3 3) (+ 4 3))

#? (min <l1> ... <ln>)	
Return the minimum element within <l1> ... <ln>. 
Arguments <li> may be numbers or strings.

Example:
.EX (min 2 3 (* 3 3) (+ 4 3))

#? ** Integer Arithmetic Functions and Integer Predicates

Besides the ordinary number operation functions, a few functions
deal with integer numbers only. For that purpose we consider only
the first 32 bits of the integer part of the number.

#? (div <n1> <n2>)
Returns the quotient of the Euclidian division of <n1> by <n2>.

Example:
.EX (div 5 2)

#? (modi <n1> <n2>)
Returns the remainder of the Euclidian division of <n1> by <n2>.

Example:
.EX (modi 5 2)

#? (mod <x> <y>)
.SEE rem
Return the result of <(- x (* (floor (/ x y)) y))>.
The result will always have the same sign as <y>.

Example:
.EX (mod 5 2)
.EX (mod -1 2)

#? (rem <x> <y>)
.SEE mod
Return the result of <(- x (* (trunc (/ x y)) y))>.

Example:
.EX (rem 5 2)
.EX (rem -1 2)

#? (oddp <n>)
True if <n> is an odd integer.

#? (evenp <n>)
True if <n> is an even integer.


#? ** Bit Functions

#? (bitand <n1> <n2>)
Returns the bitwise AND of integer numbers <n1> and <n2>.

#? (bitor <n1> <n2>)
Returns the bitwise OR of integer numbers <n1> and <n2>.

#? (bitxor <n1> <n2>)
Returns the bitwise exclusive or (XOR) of integer numbers <n1> and <n2>.

#? (bitshl <n1> <n2>)
Shifts the bits of integer <n1> by <n2> positions to the left 
and returns the result.
This is similar to the C operator \$">>" .

#? (bitshr <n1> <n2>)
Shifts the bits of integer <n1> by <n2> positions to the right 
and returns the result.
This is similar to the C operator \$">>" .


#? ** Mathematical Numerical Functions

Most mathematical functions are implemented as DZ functions.
DZs are a remnant of a now obsolete compiler for numerical
expressions. For more details about DZ functions the 
corresponding section.


#? (sgn <n>)
Return +1 if <n> is greater than 0, -1 if <n> is smaller than zero,
and zero otherwise.
.EX (sgn -2)
.EX (sgn 1.2)

#? (abs <n>)
Return the absolute value of <n>.
.EX (abs 123.3)
.EX (abs -23.3)

#? (ceil <n>)
Return smallest integer not less than <n>.
.EX (ceil -4.5)
.EX (ceil 4.5)

#? (floor <n>)
Return largest integer not greater than <n>.
.EX (floor -4.5)
.EX (floor 4.5)

#? (round <n>)
Return nearest integer to <n>.
.EX (round -4.4)
.EX (round -4.5)
.EX (round 4.5)

#? (trunc <n>)
Return nearest integer to <n> in direction of zero.
.EX (trunc -4.5)
.EX (trunc 4.5)

#? (sqrt <n>)
Returns the square root of <n>
.EX (sqrt 15)

#? (cbrt <n>)
Returns the cube root of <n>
.EX (sqrt 15)

#? (0-x-1 <n>)
This function implements a piecewise saturated linear function.
It returns 0 if <n> is smaller than -1.
It returns 1 if <n> is larger than +1.
It returns <n> if <n> is in the -1 to +1 range.
.EX (0-x-1 -2)
.EX (0-x-1 0.7)
.EX (0-x-1 1.3)

#? (0-1-0 <n>)
This function implements the indicator function of the -1 to +1 range.
It returns 1 if <n> is in the -1 to +1 range.
It returns 0 otherwise.
.EX (0-1-0 -2)
.EX (0-1-0 0.7)

#? (sin <n>)
Return the sine of <n> radians.
.EX (sin (/ 3.1415 3))

#? (cos <n>)
Return the cosine of <n> radians.
.EX (cos (/ 3.1415 3))

#? (tan <n>)
Return the tangent of <n> radians.
.EX (tan (/ 3.1415 3))

#? (asin <n>)
Return the arc sine of <n> radians.
.EX (asin 1)

#? (acos <n>)
Return the arc cosine of <n> radians.
.EX (cos 1)

#? (atan <n>)
Return the arc tangent of <n>, in radians.
.EX (* 4 (atan 1))

#? (exp <n>)
Return the exponential of <n>.
.EX (exp 1)

#? (exp-1 <n>)
Return the exponential of <n> minus 1.
This function gives an accurate value of
<exp(n)-1> even for small values of <n>.
.EX (exp-1 0.5)

#? (log <n>)
Return the natural logarithm of <n>.
.EX (log 2)

#? (log10 <n>)
Return the natural logarithm to base 10 of <n>.
.EX (log10 1000)

#? (log2 <n>)
Return the natural logarithm to base 2 of <n>.
.EX (log2 256)

#? (log1+ <n>)
Return the natural logarithm of <n> plus 1.
This function gives an accurate value of <log(1+n)> 
even for small values of <n>.
.EX (log1+ 1)

#? (sinh <n>)
Return the hyperbolic sine of <n>.
.EX (sinh 1) 

#? (cosh <n>)
Return the hyperbolic cosine of <n>.
.EX (cosh 1)

#? (tanh <n>)
Return the hyperbolic tangent of <n>.
.EX (tanh 1)

#? (asinh <n>)
Return the arc hyperbolic sine of <n>.
.EX (asinh 0.2) 

#? (acosh <n>)
Return the arc hyperbolic cosine of <n>.
.EX (acosh 2.0)

#? (atanh <n>)
Return the arc hyperbolic tangent of <n>.
.EX (atanh 0.2)

#? (findroot <min> <max> <f>)
Simple dichotomical root finder. <f> is a function with one argument
only. <Findroot> will return a numerical approximation of the solution
of <f(x)=0> between <min> and <max>.  To ensure the existence of this
solution, <f(min)> and <f(max)> must have different signs.

Example:
.EX (findroot 1 2 (lambda(x) (- 2 (* x x))))



#? ** Random Numbers

Statistical functions are provided for computing random numbers,
computing various statistics on list of numbers or performing
simple linear regressions.

#? (seed <n>)
Set the random number generator seed. The random generator is
replicable. The same seed will produce the same sequence of random
numbers. Argument <n> must be an integer.

#? (rand [[<a>] <b>])
Return a uniform random number.

With no arguments <rand> returns a random number in the range
[0, 1), that is, including 0 but excluding 1. With one argument
<rand> returns a random number in the range [<-b>,<b>).
With two arguments <rand> returns a random number
in the range [<a>,<b>). If any argument is an array, the result
is an array of random numbers (the usual broadcasting rules apply).

Example:
.EX (rand)
.EX (rand [1 10 100])


#? (gauss [[<m>] <s>])
Return a Gaussian number with mean <m> and standard deviation <s>.

The default value for argument <m> is 0. The default value for 
argument <s> is 1. If any argument is an array, the result is an
array of random numbers (the usual broadcasting rules apply).

Example:
.EX (gauss 2)
.EX (gauss [10 20 30] 5)


#? ** Hashing

#? (hashcode <expr>)

Return a string containing a hash code 
for the lisp expression <expr>.
Hash codes are guaranteed to be equal when
two expressions are logically equal,
that is to say, equal as defined by function <=>.

