$Id: symbol.hlp,v 1.9 2006/02/26 15:34:46 laseray Exp $
#? *** Symbols

Symbols are the only named objects. Symbol names may be up to 40
characters long.

The evaluation of a symbol returns the ``value'' of the symbol.
Function <setq> changes the value of a symbol. The value of a new
symbol is always the empty list.

During a call to a Lush function, or during the execution of certain
special functions (e.g. function <let>) predefined symbols take a
temporary value. The previous values are then restored when the
function exits.

For instance, assume that we define a function <(de sqr(x) (* x x))>.
Evaluating list <(sqr 4)> will perform the following actions:
.IP
save the old values of symbol <x> which is the name of 
a function argument,
.IP
set the value of symbol <x> to <4>,
.IP
execute the function body <(* x x)> and save the result,
.IP
restore the previous value of symbol <x>,
.IP
and return the saved result.
.PP
This dynamical binding makes the interpreter getting faster, but
somewhat precludes the development of efficient compilers.

The textual representation of a symbol is composed by the 
characters of its name. The reader usually converts symbol names
to lowercase and replaces underscores by dashes.  This can be
prevented by quoting the symbol name with vertical bars.
Such vertical bars are useful for defining symbols whose name contains
any character usually forbidden: parenthesis, spaces, semi-colon,
macro-characters, upper-case characters etc....

Examples :
.CODE
  gasp GasP         ; are the same symbol named "gasp"
  |GasP|            ; is different symbol named "GasP"
  |);( '|           ; is a symbol named ");( '"
  "gasp"            ; is a string
  12                ; is a number
  |12|              ; is a symbol named "12"
.PP

Unlike several dialect of lisp, Lush does not provide other fields in
a symbol for storing a specific functional value or a property list.
The value of a symbol is the only storage provided by symbols.

#? (defvar <name> [<val>])
.TYPE DM
.FILE sysenv.lsh

If global variable <name> is undefined, bind it to <val>.
Return symbol '<name>.

If there was already an existing global variable <name>,
function <defvar> does nothing.  Argument <val> 
is not even evaluated.
If there was no existing global variable <name>,
function <defvar> defines such a global variable,
and initializes it with the result of the evaluation
of argument <val>.
.PP
Traditionally function <setq> was used for that purpose in SN/TLisp
because there was no notion of undefined global variables.
All undefined global variables were assumed to contain an empty list.
This behavior was the source of many bugs.
The lush kernel now prints a warning when using <setq> 
to define a new global variable.


#? (defparameter <name> <val>)
.TYPE DM
.FILE sysenv.lsh
.SEE defvar

Bind global variable <name> to <val>. Return symbol '<name>.

Unlike <defvar>, this function unconditionally evaluates <val>.


#? (defconstant <name> <val>)
.TYPE DM
.FILE sysenv.lsh
.SEE defparameter, #.

Bind global variable <name> to <val>, lock the binding and return '<name>.


#? (defalias <name> <existing-name>)
.TYPE DM
.FILE sysenv.lsh
.SEE defvar, defparameter, defconstant

Bind <name> to globally bound value of <existing-name> and
return '<name>.

Symbol '<existing-name> must be globally bound.

#? #.<expr>
Evaluate <expr> at read time.

A common use case for the read-time eval macro is to simulate
symbolic constants in compiled code (see help for <find-c-include>
for an example).


#? (setq <s1> <v1> ... [<sn> <vn>])
Set the value of symbols <s1>...<sn> to <v1>...<vn> and return
the last value <vn>.
It is good practice to create the symbol being setq'ed
beforehand using <defvar>, <let>, <let*> or other constructs
that create global or local variables.

The <setq> function has a special behavior when the <vi> are not
symbols. This behavior is documented later, with the scope function.

Example:
.CODE
? (setq a 3)
= 3
? (setq b 6)
= 6
? a b
= 3
= 6
? (setq a b b a)
= 3
? a b
= 6
= 6
.PP


#? (set <v> <a>)	
Sets the value of the symbol <v> to <a>. 
set is different from setq because <v> is evaluated first.

Example:
.CODE
? (setq s 'a)
= a
? (set s 3)
= 3
? s
= a
? a
= 3
.PP

#? (incr <v> [<n>])	
Increment <v> by <n> (default 1). <V> may be variable or an
indexed array. Examples:
.CODE
? (let ((s 15))
    (incr s)
     s)
= 16
?
? (let ((m (int-array 3 3)))
    (incr (m 1 1) 3) )
= [i[i     0     0     0]
    [i     0     3     0]
    [i     0     0     0]]
.PP

#? (decr <v> [<n>])	
Decrement <v> by <n> (default 1). Same as "(setq <v> (- <v> <n>))"

#? (named <s>)	
Returns a new symbol whose name is the string <s>.

Example:
.EX (named "a")
.EX (named "A")

#? (nameof <s>)
Returns a string containing the name of symbol <s>.
This is the converse of <named>.

Example:
.EX (nameof 'a)
.EX (nameof '|A|)

#? (namedclean <s>)
Returns a new symbol whose name is computed by 
normalizing the string <s> using the same algorithm
as the Lisp reader. This is the converse of function <pname>.

Example:
.EX (namedclean "a")
.EX (namedclean "A")
.EX (namedclean "|A|")


#? (lock-symbol <s1> ... <sn>)	
Locks symbols <s1> to <sn>.  Symbols may be locked. You can no longer
change the value of locked symbols, but you may still modify them
temporarily by using the let function. Some Lush functions and all C
functions are stored in locked symbols. This avoids the accidental
loss of a C function.


#? (unlock-symbol <s1> ... <sn>)
Unlocks symbols <s1> to <sn>.

#? (symbols)	
Return all symbols in the global namespace.

Example:
.EX (length (symbols))


#? (macrochp <s>)	
Returns <t> if <s> symbol defines a macro-character.

Example:
.EX (macrochp '|'|)

#? (putp <anything> <name> <value>)
.TYPE DE
.FILE sysenv.lsh
Every Lush object (atoms, cons, etc.) may be enriched by defining properties
identified by a symbolic name.  Function <putp> is used to define such 
properties.  Its first argument is an arbitrary Lush object <anything>.
Function <putp> sets the property named by symbol <name> to value <value>.
Properties can be later retrieved using <getp>.

#? (getp <anything> <name>)
.TYPE DE
.FILE sysenv.lsh
Retrieves the property <name> for the Lush object <anything>.

#? ** << libstd/symbols.lsh

