#? **** FAQ (Frequently Asked Questions)


#? *** What to do when I get this error?

#? Module has undefined references
when you load a partially linked object file,
or when a function you compiled calls a C function
that is not defined in any previously loaded library or module
you get the above error. To find out which functions
are not defined, type <(mod-undefined)>.

#? compiler : Unknown Type    in: ()
This message may occur for a variety of reasons,
but the most common one is that the compiler
can't figure out the type of the return value of
an expression. A frequent cause is an hash-brace
construct (inline C code segment) that is the last
expression of a function (and therefore its return value).
Lush cannot know the type of the value returned by
a hash-brace unless you cast it.

Example 1:
{<code>
  ;; this causes an error
  (de foo1-broken (x) ((-double-) x) #{ $x*$x #})
  ;; this is correct
  (de foo1-correk (x) ((-double-) x) (to-double #{ $x*$x #}))
</code>}
Example 2:
{<code>
  ;; this causes an error (dunno the return type).
  (de foo2-broken (x) ((-idx1- (-int-)) x) #{ *(IDX_PTR($x,int)) = 34 #})
  ;; this is correct (return value is nil).
  (de foo2-correk (x) ((-idx1- (-int-)) x) #{ *(IDX_PTR($x,int)) = 34 #} ())
</code>}


#? *** How Do I ... ?

#? Read lines from a file into a list
{<code>
 (de read-lines(f)
  (reading f
    (let ((ans ()))
      (while (<> (skip-char "\n\r\f") "\e")
        (setq ans (cons (read-string) ans)))
      (reverse ans))))
</code>}

#? Apply a function to all elements of a vector
interpreted lisp way:
{<code>
 (idx-bloop ((x v)) (func x))
</code>}
efficient compiled C code way:
{<code>
  (cidx-bloop ("i" ("v" v)) #{ *v = my_c_fun(*v); #}) ())
</code>}

#? Get a pointer to the raw data of an idx
just use the <idx-ptr> function.
{<code>
  (idx-ptr m}
</code>}

#? Get a pointer to a function written in Lisp
Some functions in popular libraries take function
pointers as argument (a typical example is the
GSL function minimization routines). To obtain
a pointer to the compiled version is a function written
in Lisp, simply use the function <to-gptr>:
{<code>
 (de myfunc (x) ((-double-) x) (- (* x x) 2))
 (dhc-make () myfunc)
 (some-root-finding-function-in-C (to-gptr myfunc))
</code>}

#? Know if a function can be used in compiled code
Just use <compilablep>:
{<code>
  ? (compilablep +)
  = t
</code>}




