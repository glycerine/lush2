;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? *** Arrays of vectors and matrices
;; arrays of idx1 of floats, and idx2 of floats.
;; This class is convenient way of handling sets
;; of vectors or matrices of disparate sizes.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; class: array of vectors of floats
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#? * idx1-array
;; array of idx1 of floats.
(defclass idx1-array object
  ((-idx1- (-mptr-)) pt) )

#? (new idx1-array <n>)
;; Create an array of idx1 of float.  Each entry can have a different sizes. 
;; The methods of this object are:
;;.VP
;;    (==> <idx1-array> set <i> <mat>) 
;;    <i> is an int, which must be less than <n>, <mat> is an idx1 of float.
;;    This method set the <i>-th entry of the array to <mat>.
;;
;;    (==> <idx1-array> get <i>)
;;    <i> is an int, which must be less than <n>.  
;;    This method returns the <i>-th entry of the array.
;;
;;    (==> <idx1-array> set-array <ar>)
;;    Take an array of idx1 and do a set for each element (not compiled).
;;
;; Example:
;;  (setq ar {[3 4 5] [1] [1 2 3]})
;;  (setq n (idx-dim ar 0))
;;  (setq c-ar (new idx1-array n))
;;
;;  (for (i 0 (1- n))              ;; equivalent to: (==> c-ar set-array ar)
;;      (==> c-ar set i (ar i)))
;;
;; In a compiled or interpreted function
;;
;;   (de foo (c-ar ...)
;;      ((-obj- (idx1-array)) c-ar)
;;      (for (i 0 (1- n))
;;            ... (==> c-ar get i)...   ;; returns an idx1 of float
;;.SEE (new idx2-array <n>)
;;
(defmethod idx1-array idx1-array (n)
  ((-int-) n)
  (setq pt (mptr-array n)) )

#? (==> <idx1-array> set <i> <mat>)
(defmethod idx1-array set (i mat)
  ((-int-) i)
  ((-idx1- (-flt-)) mat)
  (pt i (to-mptr (copy-index mat))) )

#? (==> <idx1-array> get <i>)
(defmethod idx1-array get (i)
  ((-int-) i)
  (when (= (pt i) NULL)
    (error "Null pointer") )
  (to-idx (pt i) 1 'float) )

#? (==> <idx1-array> set-array <ar>)
(defmethod idx1-array set-array (ar)
  (for (i 0 (1- (idx-dim ar 0)))
    (==> this set i (ar i))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? * idx2-array
;; array of idx2 of floats
(defclass idx2-array object
  ((-idx1- (-mptr-)) pt) )

#? (new idx2-array <n>)
;; Create an array of idx2 of float.  Each entry can have a different sizes. 
;; The methods of this object are:
;;.VP
;;    (==> <idx2-array> set <i> <mat>) 
;;    <i> is an int, which must be less	than <n>, <mat> is an idx2 of float.
;;    This method set the <i>-th entry of the array to <mat>.
;;
;;    (==> <idx2-array> get <i>)
;;    <i> is an int, which must be less	than <n>.  
;;    This method returns the <i>-th entry of the array.
;;
;;    (==> <idx2-array> set-array <ar>)
;;    Take an array of idx2 and do a set for each element.
;;
;; Example:
;;  (setq ar {[[3 4 5][2 2 2]] [[1]] [[1] [2] [3]]})
;;  (setq n (idx-dim ar 0))
;;  (setq c-ar (new idx2-array n))
;;
;;  (for (i 0 (1- n))              ;; equivalent to: (==> c-ar set-array ar)
;;      (==> c-ar set i (ar i)))
;;
;; In a compiled or interpreted function
;;
;;   (de foo (c-ar ...)
;;      ((-obj- (idx1-array)) c-ar)
;;      (for (i 0 (1- n))
;;            ... (==> c-ar get i)...   ;; returns an idx1 of float
;;
;;.SEE (new idx1-array <n>)
;;
(defmethod idx2-array idx2-array (n)
  ((-int-) n)
  (setq pt (mptr-array n)) )

#? (==> <idx2-array> set <i> <mat>)
(defmethod idx2-array set (i mat)
  ((-int-) i)
  ((-idx2- (-flt-)) mat)
  (pt i (to-mptr (copy-index mat))) )
  ())

#? (==> <idx2-array> get <i>)
(defmethod idx2-array get (i)
  ((-int-) i)
  (when (= (pt i) NULL) (error "Null pointer"))
  (to-idx (pt i) 2 'float))

#? (==> <idx2-array> set-array <ar>)
(defmethod idx2-array set-array (ar)
  (for (i 0 (1- (idx-dim ar 0)))
    (==> this set i (ar i))))

;;-----------------------------------------------------------------------------

(printf "\n*** Warning: stuff in idx-array is deprecated, use idx-pool instead\n\n")
(dhc-make-sf ()
          (idx1-array idx1-array set get)
          (idx2-array idx2-array set get))
