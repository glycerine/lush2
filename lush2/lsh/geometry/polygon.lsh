;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "iterator")
(libload "geometry/mesh")
(libload "geometry/geometry-utils")
(libload "libidx/idx-sort")
(libload "datatypes/queue")

#? *** Simple Polygons
;; A <SimplePolygon> object represents a simple polygon, that is, a 
;; closed connected region with polygonal boundary and no holes.

(defclass SimplePolygon Mesh
  ((-double-) perimeter)      ; cache results here
  ((-double-) area2) )        ;

(in-namespace (class SimplePolygon)
(libload "geometry/polygon-utils" t)
)

(defmethod SimplePolygon -edges (edges)
  (declare (-idx2- (-int-)) edges)
  (let* ((n (length edges)))
    (declare (-int-) n)
    (for* (i 0 n)
      (declare (-int-) i)
      (edges i 0 i)
      (edges i 1 (+ i 1)) )
    (when (> n 0) (edges (- n 1) 1 0))
    edges))


#? (new SimplePolygon <points>)
;; Create new polygon object with <points> and an edge for each
;; pair of points in the given order. Note that some methods
;; (e.g., <orientation>, <flip-orientation>) consider the edges to
;; be directed.
(defmethod SimplePolygon SimplePolygon (points)
  (declare (-idx2- (-double-)) points)

  (unprotect) ; avoid compiler warning about uninitialized slots
  (let ((edges (==> this -edges (int-array (length points) 2))))
    (==> this Mesh points edges) )
  (setq area2 NAN)
  (setq perimeter NAN)
  ())

;; a SimplePolygon has no holes, this is a virtual method
(defmethod SimplePolygon remove-holes ()
  () )

(defmethod SimplePolygon area2 ()
  (let* ((x (idx-select points 1 0))
         (y (idx-select points 1 1))
         (xterms (clone-array x))
         (yterms (clone-array x)) )
    
    (idx-bloop ((xterm xterms) (yterm yterms) (edge edges))
      (xterm (+ (x (edge 0)) (x (edge 1))))
      (yterm (- (y (edge 1)) (y (edge 0)))) )
    ((idx-sum (idx-mul xterms yterms xterms))) ))

#? (==> <SimplePolygon> area)
;; Area of polygon.
(defmethod SimplePolygon area ()
  (when (nanp area2)
    (setq area2 (==> this area2)) )
  (abs (/ area2 2)) )


#? (==> <SimplePolygon> orientation)
;; Orientation of polygon.
;; -1 : clockwise
;;  1 : contour-clockwise
(defmethod SimplePolygon orientation ()
  (when (nanp area2)
    (setq area2 (==> this area2)) )
  (sgn area2) )

#? (==> <SimplePolygon> flip-orientation)
;; Reverse all edges return <()>.
(defmethod SimplePolygon flip-orientation ()
  (idx-reverse! edges 1)
  (setq area2 (- area2)) 
  () )

#? (==> <SimplePolygon> lower-left-point)
;; Index of the lower left point.
(defmethod SimplePolygon lower-left-point ()
  (let ((x INF)
        (y INF)
        (i 0) )
    (declare (-double-) x y)
    (declare (-int-) i)
    (for (j 0 (1- (length points)))
      (when (or (< (points j 1) y)
                (and (= (points j 1) y) (< (points j 0) x)) )
        (setq i j  x (points j 0)  y (points j 1)) ))
    i))

#? (==> <SimplePolygon> upper-right-point)
;; Index of the upper right point.
(defmethod SimplePolygon upper-right-point ()
  (let ((x (- INF))
        (y (- INF))
        (i 0) )
    (declare (-double-) x y)
    (declare (-int-) i)
    (for (j 0 (1- (length points)))
      (when (or (> (points j 1) y)
                (and (= (points j 1) y) (> (points j 0) x)) )
        (setq i j  x (points j 0)  y (points j 1)) ))
    i))

#? (==> <SimplePolygon> diameter)
;; Diameter of polygon (estimate).
(defmethod SimplePolygon diameter ()
  (let* ((poly (copy-object this))
         (_ (==> poly remove-holes))
         (points :poly:points)
         (n (length points))
         (point-0 (idx-select points 0 0))
         (a -1) (b -1) (i 0) (maxd 0) (d 0) )
    (declare (-int-) n a i)
    
    ;; find first point
    (idx-bloop ((point points))
      (when (> (setq d (euclidean-distance-squared point-0 point)) maxd)
        (setq a i  maxd d) )
      (incr i) )

    ;; find second point
    (setq point-0 (idx-select points 0 a)  maxd 0  i 0)
    (idx-bloop ((point points))
      (when (> (setq d (euclidean-distance-squared point-0 point)) maxd)
        (setq b i  maxd d) )
      (incr i) )

    (let ((point-b (idx-select points 0 b)))
      (sqrt (euclidean-distance-squared point-0 point-b)) )))

    
#? (==> <SimplePolygon> perimeter)
;; Perimeter of polygon.
(defmethod SimplePolygon perimeter ()
  (when (nanp perimeter)
    (setq perimeter ((array-sum (==> this edges-length)))) )
  perimeter)


#? (==> <SimplePolygon> refine <max-edge-length>)
;; Add points on the boundary where edges are longer than
;; <max-edge-length>; return <()>.
(defmethod SimplePolygon refine (max-edge-length)
  (declare (-double-) max-edge-length)
  (let ((points-new (clone-array points))
        (point-map (ubyte-array (length points)))  ; remember points copied
	(ls (==> this edges-length))
	(dl -1) (v [0 0]) (n 0))
    (declare (-int-) n)
    (idx-bloop ((edge edges) (l ls))
      (let ((p (edge 0)) (q (edge 1)) (l (l)))
        (declare (-int-) p q)
        (assert (= (point-map p) 0))
        (when (= n (length points-new))
          (array-extend! points-new 0 n))
        (points-new n 0 (points p 0))
        (points-new n 1 (points p 1))
        (point-map p 1)
        (incr n)
        ;; create new points if necessary
        (setq dl (/ l max-edge-length))
        (when (> dl 1)
          (setq dl (/ l (ceil dl)))
          (with-points (p q)
            (idx-sub point-q point-p v)
            (tangent-vector! v)
            (idx-dotm0 v ([@0] dl) v))
          (while (> l max-edge-length)
            (when (= n (length points-new))
              (array-extend! points-new 0 n))
            (points-new n 0 (+ (points-new (- n 1) 0) (v 0)))
            (points-new n 1 (+ (points-new (- n 1) 1) (v 1)))
            (incr n)
            (decr l dl) ))))
    (idx-trim! points-new 0 0 n)
    (setq points points-new  nv n)
    (setq edges (==> this -edges (int-array n 2)))
    ()))

;; helper for class Polygon
(defclass PolygonHolesIterator iterator
  ((-obj- (SimplePolygon)) next-item)
  ((-idx2- (-double-)) points)
  ((-idx2- (-int-)) edges)
  ((-idx1- (-int-)) i-holes) )

(defmethod PolygonHolesIterator PolygonHolesIterator (points edges i-holes)
  (declare (-idx2- (-double-)) points)
  (declare (-idx2- (-int-)) edges)
  (declare (-idx1- (-int-)) i-holes)
  (==> this iterator)
  (unprotect)
  (setq :this:i-holes (copy-index i-holes))
  (setq :this:points points)
  (setq :this:edges edges)
  (setq next-item (new SimplePolygon (double-array 0 2))) )

(defmethod PolygonHolesIterator -make-next ()
  (when (not (idx-emptyp i-holes))
    (let* ((l (if (> (length i-holes) 1)
		  (- (i-holes 1) (i-holes 0))
		(- (length points) (i-holes 0)) ))
	   (hpoints (idx-trim points 0 (i-holes 0) l))
	   (hedges (idx-trim edges 0 (i-holes 0) l))
	   (delta ([i@ 0] (- (i-holes 0)))) )
      (declare (-int-) l)
      (setq :next-item:points hpoints)
      (setq :next-item:edges (idx-addm0 hedges delta))
      (setq :next-item:perimeter NAN)
      (setq :next-item:area2 NAN)
      (setq :next-item:nv (length hpoints))
      (setq next-item-valid t)
      (idx-trim! i-holes 0 1) ))
  ())
  
#? (simplify <SimplePolygon> <p> [<method>])
;; Create a coarser polygon with a subset of the current set of points.
;;
;; {<see> Line simplification}


#? *** Polygons
;; A <Polygon> object represents a polygon, that is, a closed 
;; connected region with polygonal boundary. In terms of class
;; relationships, a <Polygon> is a <SimplePolygon> with holes,
;; where each hole itself may be represented as a <SimplePolygon>
;; (see <Polygon> method <holes>).

(defclass Polygon SimplePolygon
  ((-idx1- (-int-)) i-holes) ) ; indices

;; member allocation in constructor, rest in -init
(defmethod Polygon -edges (edges)
  (declare (-idx2- (-int-)) edges)
  (let ((h 0) (p 0) (l 0) (i-hole 0) (n (length edges)))
    (declare (-int-) h p l i-hole n)
    (idx-i1sortup i-holes)
    (setq i-hole (if (< h (length i-holes)) (i-holes h) n))
    (when (> (length edges) 0)
      (when (= i-hole 0)
	(error "no external contour"))
      (for* (e 0 n)
	(declare (-int-) e)
	(when (= e i-hole)
	  (edges (- i-hole 1) 1 (edges l 0))
	  (setq l i-hole)
	  (incr h)
	  (setq i-hole (if (< h (length i-holes)) (i-holes h) n)) )
	(edges e 0 p)
	(edges e 1 (incr p)) )
      (edges (- i-hole 1) 1 (edges l 0)) )
    edges))


#? (new Polygon <points> <holes>)
;; Create a new polygon object with <points> and an edge for each
;; pair of points in the given order, accept between points with
;; index in holes and its successor, respectively.
(defmethod Polygon Polygon (points i-holes)
  (declare (-idx2- (-double-)) points)
  (declare (-idx1- (-int-)) i-holes)

  (unprotect)
  (setq :this:i-holes i-holes)
  (==> this SimplePolygon points)
  ())

#? (==> <Polygon> holes)
;; Yield all holes as <SimplePolygon> objects.
(defmethod Polygon holes ()
  (let ((n (length points)))
    (declare (-int-) n)
    (new PolygonHolesIterator points edges i-holes)))

#? (==> <Polygon> remove-holes)
;; {<see> polygon-without-holes}
;; Remove all holes from the polygon and return <()>.
(defmethod Polygon remove-holes ()
  (when (not (emptyp i-holes))
    (idx-trim! points 0 0 (i-holes 0))
    (idx-trim! edges 0 0 (i-holes 0))
    (idx-trim! i-holes 0 0 0) )
  ())

#? (==> <Polygon remove-small-holes <p>)
;; Remove holes with perimeter smaller than <p> and return <()>.
(defmethod Polygon remove-small-holes (perim)
  (declare (-double-) perim)
  (when (not (emptyp i-holes))
    (let ((ihs (clone-array i-holes))
          (ids (int-array (length points)))
          (i (i-holes 0)) (k (i-holes 0)) )
      (declare (-int-) i k)
      (idx-trim! ihs 0 0 0)
      (do ((h (==> this holes)))
        (if (< (==> h perimeter) perim)
            (incr i :h:nv)
          (idx-extend! ihs 0 1)
          (ihs (- (length ihs) 1) k)
          (for (j 1 :h:nv)
            (declare (-int-) j)
            (ids k i)
            (incr k)
            (incr i) )))
      (for* (j (i-holes 0) k)
        (declare (-int-) j)
        (when (<> (ids j) j)
          (points j 0 (points (ids j) 0))
          (points j 1 (points (ids j) 1)) ))
      (idx-trim! points 0 0 k)
      (idx-trim! edges 0 0 k)
      (setq nv k)
      (setq i-holes ihs)
      (==> this -edges edges)
      ())))
          
(defmethod Polygon refine (max-edge-length)
  (declare (-double-) max-edge-length)
  (let ((holes (copy-index i-holes))
        (points-new (clone-array points))
	(ls (==> this edges-length))
	(l -1) (dl -1) (v [0 0])
	(n 0) (p 0) (q -1) (np 0) (pp -1))
    (declare (-int-) n p q np pp)

    (do-while (<> np nv)
      (setq pp np  np (if (emptyp holes) nv (holes 0)))
      (while (< p np)
        ;; always copy original point
        (when (= n (length points-new))
          (array-extend! points-new 0 n))
        (points-new n 0 (points p 0))
        (points-new n 1 (points p 1))
        (incr n)
        ;; create new points if ncessary
        (setq q (if (< (+ p 1) np) (+ p 1) pp))
        (setq l (ls p)  dl (/ (ls p) max-edge-length))
        (when (> dl 1)
          (setq dl (/ l (ceil dl)))
          (with-points (p q)
            (idx-sub point-q point-p v)
            (tangent-vector! v)
            (idx-dotm0 v ([@0] dl) v))
          (while (> l max-edge-length)
            (when (= n (length points-new))
              (array-extend! points-new 0 n))
            (points-new n 0 (+ (points-new (- n 1) 0) (v 0)))
            (points-new n 1 (+ (points-new (- n 1) 1) (v 1)))
            (incr n)
            (decr l dl) ))
        (incr p))
      (when (not (emptyp holes))
        (holes 0 n)
        (idx-trim! holes 0 1) ))
    
    (idx-trim! points-new 0 0 n)
    (setq points points-new  nv n)
    (setq edges (==> this -edges (int-array n 2)))
    ()))

#? (contour-polygon <ubim-image> [<max-edge-length>])
;; Find the contour in a binary image and return it as a <SimplePolygon>.
;; The background is assumed to be zero and the bitmap of the contour
;; is assumed to have no gaps. The algorithm recursively breaks edges of
;; length greater than <max-edge-length> into two smaller edges. The default
;; value for <max-edge-length> is 6.1.
(defun contour-polygon (image &optional (max-edge-length 6.1) (no-gaps-p t))
  (let* ((f 3)
         (max-edge-length (* max-edge-length f))
         (image (-lasso-magnify-and-invert image f))
         (dmap (distance-transform image))
         (omap (clone-array image))
         (search-order 1) )

    (idx-copy-inv image image) ; invert again
    (let* ((points (as-double-array (array-where-nonzero (mat-transpose image))))
           (c (convex-hull points))
           (n (length :c:points)) )
      
      (setq :c:points (array-extend :c:points 0 (* 10 (sum (shape image)))))
      (setq :c:edges (array-extend :c:edges 0 (* 10 (sum (shape image)))))
      (idx-trim! :c:points 0 0 n)
      (idx-trim! :c:edges 0 0 n)
      
      ;; init occupation map
      (array-clear omap 0)
      (for* (i 0 (length :c:points))
        (omap (:c:points i 1) (:c:points i 0) 1) )
      
      (-lasso-refine c dmap max-edge-length search-order)
      (while (< n (length :c:points))
        (setq search-order (- search-order))
        (if no-gaps-p
            (-lasso-move-points c (as-int-array (arange* n (length :c:points))) dmap omap)
          (-lasso-move-points-with-gaps c (as-int-array (arange* n (length :c:points))) dmap omap) )
        (setq n (length :c:points))
        (-lasso-refine c dmap max-edge-length search-order)
        )
    (-lasso-as-simple-polygon c f)) ))

(autoload "geometry/geometry" convex-hull)
(autoload "geometry/lasso.lsh" -lasso-magnify-and-invert distance-transform)

#? (simplify <Polygon> <p> [<method>])
;; Create a coarser polygon with a subset of the current set of points.
;;
;; {<see> Line simplification}

(dhc-make-class () 
		SimplePolygon 
		PolygonHolesIterator
		Polygon)

#? (==> <SimplePolygon> plot . <kwdargs>)
;; Render the <SimplePolygon> using gnuplot, return the plotter object.
;; Additional keywords (see method <(Mesh . plot)>):
;;.VP
;; -----------------------------------------------------------------
;; Keyword      | Meaning
;; -----------------------------------------------------------------
;; fill         | fill density, a value in [0,1] (default is 0)
;; fill-color   | fill color (default is 'blue)
(defmethod SimplePolygon -plot-arguments kwdargs
  (let* ((my-kwds (list 'fill 'fill-color))
         (opt (parse-kwdargs* kwdargs 
                              'plot-args     ()
                              'preamble      ()
                              'fill          0
                              'fill-color    'blue))    
         (fill     (opt 'fill))
         (fc       (opt 'fill-color))
         (kwdargs  (remove-kwdargs kwdargs . my-kwds)) )
    
    (when (or (not (numberp fill)) (< fill 0) (> fill 1))
      (error "fill value for keyword 'fill'" fill) )
    (when (null (*gnuplot-colors* fc))
      (error "invalid value for keyword 'fill-color'" fc) )
    
    (when (> fill 0)
      (let* ((plotargs (if (opt 'plot-args)
                           kwdargs
                         (==> this (Mesh . -plot-arguments) 
                              'plot-edges ()
                              'plot-points ()
                              'preamble (opt 'preamble) )))
             (plotopt   (parse-kwdargs* plotargs))
             (gp        (plotopt 'plotter))
             ;(linestyle (+ (getp gp 'linestyle) 1))
             (preamble  (plotopt 'preamble))
             (plot-args (plotopt 'plot-args))
             (plot-data (plotopt 'plot-data)) )
        
        (setq plot-args (nconc1 plot-args (sprintf "'-' with filledcurve closed fs solid %f noborder lc rgb '%l'" fill fc)))
        (setq plot-data (nconc1 plot-data (list points
                                                (array-combine (idx-select points 0 -1)
                                                               (idx-select points 0 0))
                                                )))
        ;(putp gp 'linestyle linestyle)
        (setq plotargs (list 'plotter gp  'preamble preamble
                             'plot-args plot-args  'plot-data plot-data))
        (setq kwdargs (update-kwdargs kwdargs . plotargs)) ))
    (setq kwdargs (mapcar dquote kwdargs))
    (==> this (Mesh . -plot-arguments) . kwdargs) ))


;; special method used by gnuplot interface
(defmethod SimplePolygon -plot ()
  (filledcurves points) )

(defmethod Polygon -plot ()
  (if (emptyp i-holes)
      (filledcurves points)
    (let ((outer-points (idx-trim points 0 0 (i-holes 0))))
      (filledcurves outer-points)
      (do ((hole (==> this holes)))
	  (filledcurves :hole:points (lc 'white)) ) ; assuming background is white
      )))


#? (polygon-without-holes <poly>)
;; Return the outer contour of polygon <poly>.
(defmacro polygon-without-holes (poly)
  `(let* ((obj ,poly)
          (clone (copy-object obj)))
     (setq :clone:points (copy-index :obj:points))
     (setq :clone:edges (copy-index :obj:edges))
     (setq :clone:i-holes (copy-index :obj:i-holes))
     (==> clone remove-holes)
     clone)
  )

