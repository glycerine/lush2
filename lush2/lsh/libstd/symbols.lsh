;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defalias make-symbol named)
(defalias symbol-name nameof)

(defvar *gensym-counter* 0)

#? (gensym [<x>])
;; Create and return a new symbol. The name of the new symbol is
;; the concatenation of a prefix and a suffix, the prefix being 
;; any string, the suffix being the decimal representation of a 
;; number. The default for the prefix string is "G", the default
;; for the suffix number is the value of *gensym-counter*. If 
;; <x> is a string, it is taken as the prefix, if <x> is a number,
;; it is taken for the suffix for the new symbol's name.
;; {<see> gensyms}
;; {<ex> (list (gensym) (gensym "eXtra") (gensym 99))}
(defun gensym (&optional x)
  (cond
   ((stringp x)
    (let ((s (make-symbol (sprintf "%s%d" x *gensym-counter*))))
      (setq *gensym-counter* (1+ *gensym-counter*)) 
      s))
   ((numberp x)
    (make-symbol (sprintf "G%d" (int x))) )
   ((null x)
    (let ((s (make-symbol (sprintf "G%d" *gensym-counter*))))
      (setq *gensym-counter* (1+ *gensym-counter*)) 
      s))
   (t 
    (error "argument must be number or prefix (string)" x) )))


#? (gensyms <n>)
;; Return a list of <n> new symbols created by <gensym>.
(defun gensyms (n)
  (mapfor (i 1 n) (gensym)) )


#? (rotatef <...symbols...>)
;; Change the values the <symbols> are bound to by rotating them
;; one position to the left.
;; {<ex> (let (((a b c) '(5 6 7))) (rotatef a b c) (list a b c))}
(defmacro rotatef syms
  (let ((temp (gensym)))
    `(let ((,temp ,(car syms)))
	(setq ,(car syms) ,@(mapcan list (cdr syms) (cdr syms)) ,temp)) ))


#? (symbol-concat <...symbols...>)
;; Create a new symbol by concatenating the given symbols.
;; {<ex> (let ((prfx 'gnu)) (symbol-concat prfx '-hurd))}
(defun symbol-concat symbols
  (make-symbol (apply str-cat (mapcar symbol-name symbols))) )
