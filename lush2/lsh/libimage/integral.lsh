
(libload "blas/blas")

  
#? (integral-image! img ii)
;; Compute the integral image of <img> and write it to <ii>.

;; Write integral image of <img>.
(defun integral-image/int! (img ii)
  (declare (-idx2- (-int-)) img)
  (declare (-idx2- (-double-)) ii)
  (let* ((m ($ img 0))  (n ($ img 1)))
    (declare (-int-) m n)
    (when (not (same-shape-p img ii))
      (error "shape of image and buffer do not match") )

    ;; first row
    (let ((sj 0))
      (for* (j 0 n)
        (declare (-int-) n)
        (incr sj (img 0 j))
        (ii 0 j sj) ))

    ;; other rows
    (for* (i 1 m)
      (declare (-int-) i)
      (let ((sj 0) (imgi ($*0 img i)) (iii- ($*0 ii (- i 1))) (iii ($*0 ii i)))
        (for* (j 0 n)
          (declare (-int-) j)
          (incr sj (imgi j))
          (iii j sj) )
        (blas-axpy! 1 iii- iii)
        )))
  ())
    
(defun integral-image/double! (img ii)
  (declare (-idx2- (-double-)) img ii)
  (let* ((m ($ img 0))  (n ($ img 1)))
    (declare (-int-) m n)
    (when (not (same-shape-p img ii))
      (error "shape of image and buffer do not match") )
    
    ;; first row
    (let ((sj 0))
      (for* (j 0 n)
        (declare (-int-) n)
        (incr sj (img 0 j))
        (ii 0 j sj) ))
    
    ;; other rows
    (for* (i 1 m)
      (declare (-int-) i)
      (let ((sj 0) (imgi ($*0 img i)) (iii- ($*0 ii (- i 1))) (iii ($*0 ii i)))
        (for* (j 0 n)
          (declare (-int-) j)
          (incr sj (imgi j))
          (iii j sj) )
        (blas-axpy! 1 iii- iii)
        )))
  ())

(dhc-make ()
          integral-image/int!
          integral-image/double!
          )

(defoverload integral-image!
  integral-image/int!
  integral-image/double!
  )