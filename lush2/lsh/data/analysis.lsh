
;; Some basic functions for data analysis

(libload "libidx/binning")

(defclass Histogram object
  frequencies
  labels
  )

(defmethod Histogram Histogram (fs ls)
  (assert (vectorp fs))
  (assert (same-shape-p fs ls))
  (setq labels ls)
  (setq frequencies fs)
  ())

(defmethod Histogram -plot ()
  (xtics (let ((h (htable)))
           (amapc h labels (arange* (length labels)))
           h))
  (==> graph add-preamble "set xtic rotate by -45 scale 0")
  (==> graph add-preamble "set style fill solid border -1")
  (histograms frequencies) )


#? (histo <A> [<n>])
;; Create histogram of values in array <A>.
;;
;; Example:
;; {<code>
;; ? (setq A (let ((n 1000)) (amap gauss ($> [@0] n) ($> [@100] n))))
;; ? (plot (histo A))  ; if gnuplot is installed
;; </code>}
(defun histo (A &optional (n 20))
  (let* ((Af ($- (as-double-array (as-contiguous-array A))))
         ((cs fs) (vector-bin* Af n)) )
    (new Histogram fs (amap #\(sprintf "%.2e" $1) cs)) ))


#? (mean <A>))
;; Mean of values in array <A>.
(defun mean (A)
  (/ ((array-sum ($- A))) (idx-nelems A)) )
