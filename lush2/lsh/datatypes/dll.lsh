;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; doubly linked list
;; format: car   = previous (nil for first)
;;         caddr = next (nil for last)

#? (make-dll <item> [<item2> ...])
;; Make a single-node doubly linked list containing
;; the items in the argument list.
(defun make-dll (item . items)
  (let* ((dll (cons () (cons item ())))
         (n dll) )
    (dolist (i items)
      (setq n (dll-insert-after n i)) )
    dll))

#? (dll-insert-after <node> <item>)
;; Insert a new node after <node> and return it.
(defun dll-insert-after (node item)
  (if (null node)
      (make-dll item)
    (let ((nn (cons node (cons item (cddr node)))))
      (when (cddr node)
        (rplaca (cddr node) nn) )
      (rplacd (cdr node) nn)
      nn)))

#? (dll-insert-before <node> <item>)
;; Insert a new node before <node> and return it.
(defun dll-insert-before (node item)
  (if (null node)
      (make-dll item)
    (let ((nn (cons (car node) (cons item node))))
      (when (car node)
        (rplacd (cdar node) nn) )
      (rplaca node nn)
      nn)))

#? (dll-next <node>)
;; Next node in list.
(defalias dll-next cddr)

#? (dll-prev <node>)
;; Previous node in list.
(defalias dll-prev car)

#? (dll-item <node>)
;; Item in node.
(defalias dll-item cadr)

#? (dll-find <dll> <item>)
;; Find node with item <item> in <dll>.
(defun dll-find (dll item)
  (while (and dll (<> item (dll-item dll)))
    (setq dll (dll-next dll)) )
  dll)

#? (dll-update <node> <item>)
;; Set item in <node> to <item> and return <node>.
(defun dll-update (node item)
  (rplaca (cdr node) item)
  node)

#? (dll-remove <dll> <node>)
;; Remove <node> from <dll> and return updated dll.
(defun dll-remove (dll node)
  (when (car node)
    (rplacd (cdar node) (cddr node)) )
  (when (cddr node)
    (rplaca (cddr node) (car node)) )
  (if (= node dll)
      (cddr node)
    dll))
  
(defun print-dll (dll)
  (while dll
    (print (dll-item dll))
    (setq dll (dll-next dll)) ))
  
(defun prin-dll (dll)
  (while dll
    (printf "%l " (dll-item dll))
    (setq dll (dll-next dll)) ))
  
  
