;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "datatypes/partition-iterator")
(libload "datatypes/int-heap")

#? ** Partition
;; A partition represents the partition of an arbitrary set of items
;; into disjoint sets (called 'blocks').
;; Inserting new items, merging blocks, and determining equivalence
;; (same block membership) of items are fast operations.

(defclass IPartition IterableDatatype
  ((-int-) nblocks)        ; number of blocks
  ((-idx1- (-int-)) dir) ) ; directory

;; a directory entry is an index to a parent entry
;; when non-negative, and the block size when negative

#? (new IPartition <n>)
;; Create a new partition with initial capacity for <n> items.
(defmethod IPartition IPartition (n)
  (declare (-int-) n)
  (unprotect)
  (==> this IterableDatatype)
  (setq dir (int-array (max 32 n)))
  (idx-trim! dir 0 0 0)
  (setq nblocks 0) )

#? (==> <IPartition> new-block)
;; Create new singleton block and return item.
(defmethod IPartition new-block ()
  (check-mutability)
  (let ((n (length dir)))
    (declare (-int-) n)
    (array-extend! dir 0 1 ())
    (dir n -1)
    (incr nblocks)
    n))

#? (==> <IPartition> make-new-blocks <n>)
;; Create <n> new singleton blocks and return item of last 
;; created singleton.
(defmethod IPartition make-new-blocks (n)
  (declare (-int-) n)
  (for (i 1 n) (==> this new-block)) )

#? (==> <IPartition> clear)
;; Clear partition. After calling this method the partition
;; object will be empty.
(defmethod IPartition clear ()
  (check-mutability)
  (idx-trim! dir 0 0 0)
  (setq nblocks 0)
  this)

#? (==> <IPartition> find <i>)
;; Find index of proxy for item <i>.
(defmethod IPartition find (i)
  (declare (-int-) i)
  (assert (and (> i -1) (< i (length dir))) "invalid item index")
  (let ((root i) (j -1))
    (declare (-int-) root j)
    (while (> (setq j (dir root)) -1) (setq root j))
    (while (<> root i) 
      (setq j (dir i))
      (dir i root)
      (setq i j) )
    root))

#? (==> <IPartition> unify-blocks <i> <j>)
;; Merge the block containing item <i> with the block
;; containing item <j>; return <()>.
(defmethod IPartition unify-blocks (i j)
  (check-mutability)
  (declare (-int-) i j)
  (assert (and (> i -1) (< i (length dir))) "invalid item index")
  (assert (and (> j -1) (< j (length dir))) "invalid item index")
  
  (let ((i.root (==> this find i))
	(j.root (==> this find j)))
    (declare (-int-) i.root j.root)
    (when (<> i.root j.root)
      (let ((i.size (dir i.root)) (j.size (dir j.root)))
	(declare (-int-) i.size j.size)
	(if (> i.size j.size)
	    (progn
	      (dir j.root i.root)
	      (dir i.root (+ i.size j.size)))
	  (dir i.root j.root)
	  (dir j.root (+ i.size j.size)) ))
	(decr nblocks) ))
  ())

#? (==> <IPartition> same-block <i> <j>)
;; True if items <i> and <j> are in the same block.
(defmethod IPartition same-block (i j)
  (declare (-int-) i j)
  (= (==> this find i) (==> this find j)) )

#? (==> <IPartition> number-of-items)
;; Total number of items in <IPartition>.
(defmethod IPartition number-of-items ()
  (length dir))

#? (==> <IPartition> items)
;; Return all items in all blocks as an iterator.
(defmethod IPartition items ()
  (range (length dir)))

#? (==> <IPartition> number-of-blocks)
;; Number of blocks in <IPartition>.
(defmethod IPartition number-of-blocks ()
  nblocks)

#? (==> <IPartition> size-of-block <i>)
;; Number of items in the block that includes item <i>.
(defmethod IPartition size-of-block (i)
  (declare (-int-) i)
  (- (dir (==> this find i))) )

#? (iterate <IPartition>)
;; Iterate over all blocks in arbitrary order (returns proxy items).
;; {<see> (==> <IPartition> blocks-small-to-large)}
;; {<see> (==> <IPartition> blocks-large-to-small)}
(defmethod IPartition -iterate ()
  (new IPartitionIterator this dir))

#? (==> <IPartition> blocks-small-to-large)
;; Iterate over all blocks from smallest to largest.
(defmethod IPartition blocks-small-to-large ()
  (let ((hp (new IntHeap nblocks)))
    ;(==> hp DatatypeIterator this)
    (do ((proxy this))
      (==> hp insert (to-double (- (dir proxy))) proxy) )
    hp))
  
#? (==> <IPartition> blocks-large-to-small)
;; Iterate over all blocks from largest to smallest.
(defmethod IPartition blocks-large-to-small ()
  (let ((hp (new IntHeap nblocks)))
    ;(==> hp DatatypeIterator this)
    (do ((proxy this))
      (==> hp insert (to-double (dir proxy)) proxy) )
    hp))

(defmethod IPartition -emptyp ()
  (= (length dir) 0))

(dhc-make-class () IPartition)

(defun test-partition ()
  (let ((p (new ipartition 100))
	(n 147)
        (nb 0) ) 
    (for (i 0 n) (==> p new-block))
    (for (i 3 n 3) (==> p unify-blocks 0 i))
    (for (i 1 n 3) (==> p unify-blocks 1 i))
    (for (i 5 n 3) (==> p unify-blocks 5 i))
    
    (printf "nblocks = %d\n" (setq nb (==> p number-of-blocks)))
    (dolist (i (take nb p))
      (printf "size of block %d: %d\n" i (==> p size-of-block i)) )
    (print (take nb (==> p blocks-small-to-large)))
    (print (take nb (==> p blocks-large-to-small)))
    (print (==> p same-block-p 99 102))
    p
    ))
