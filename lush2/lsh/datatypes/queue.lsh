;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? ** Queue (FIFO)
;; A queue is an abstract data type which can hold an arbitrary
;; number of items. Items may be added ("enqueued") or taken out
;; of the queue ("dequeued"). Items can only be taken out of the
;; queue in the order they were added.
;; {<code>
;;   ? (let ((q (make-queue))) 
;;       (enqueue q 2 "three" "four") 
;;       (dequeue q)
;;       (dequeue q))
;;  = "three"
;;  </code>}
;;
;; While syntactically not an object, a queue behaves like an 
;; object in that the functions <enqueue> and <dequeue> change
;; the queue in-place (<enqueue> and <dequeue> are destructive
;; functions). 
;;
;; This queue implementation cannot be compiled. Use <Deque>
;; instead when a compilable queue implementation is required.

#? (make-queue)
;; Create an empty queue.
(defun make-queue ()
  (let ((l (cons () ())))
    (cons 0 (cons l l) )))

#? (queue-length <q>)
;; Number of items in queue <q>.
(defmacro queue-length (q)
  `(car ,q) )

#? (queue-empty-p <q>)
;; True if queue <q> is empty.
(defmacro queue-empty-p (q)
  `(= (car ,q) 0) )

#? (enqueue <q> <item-1> ... <item-n>)
;; Add one or more items to <q> queue in-place, return the queue.
(defun enqueue (qq . es)
  (when (null es)
    (error "syntax error: one or more items required"))
  (let (((n . q) qq)
        (nes (length es)) )
    (when (= 0 n)
      (rplaca (car q) (car es)) 
      (setq es (cdr es))
      (incr n)
      (decr nes))
    (when (> nes 0)
      (rplacd (cdr q) es)
      (rplacd q (lastcdr es))
      (incr n nes))
    (rplaca qq n)) )

#? (dequeue <q>) 
;; Take an item out of the queue, return the item.
(defun dequeue (qq)
  (let (((n . q) qq))
    (when (= 0 n) (error "queue is empty"))
    (prog1 (caar q)
      (when (> n 1) (rplaca q (cdar q)))
      (rplaca qq (- n 1)))) )

#? (peek-queue <q>)
;; Return next item in queue <q> without altering the queue.
(defun peek-queue (q)
  (when (queue-empty-p q) (error "queue is empty"))
  (caadr q))
  
