;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? ** Integer pairs
;; A most compact way to store two 32 bit integers is
;; treating the 64 bits as a double floating point number.
;; This way a pair of two integers may be returned by a
;; C function without using pointers or objects. This
;; facility is used in the implementation of some abstract
;; datatypes. See also datatype <IPairSet>.

#? (ipair <i> <j>)
;; Create a pair of two integers <i> and <j>.
(defun ipair (i j)
  (declare (-int-) i j)
  #{
  ipair_t ip;
  ip.ints.i = $i;
  ip.ints.j = $j;
  #}
  (to-double #{ ip.d #}) )

#? (ipi1 <ip>)
;; First integer in pair <ip>.
(defun ipi1 (d)
  (declare (-double-) d)
  (to-int #{ ((ipair_t)$d).ints.i #}) )

#? (ipi2 <ip>)
;; Second integer in pair <ip>.
(defun ipi2 (d)
  (declare (-double-) d)
  (to-int #{ ((ipair_t)$d).ints.j #}) )

#? (iprot <ip>)
;; Return <(ipair (ipi2 ip) (ipi1 ip))>.
(defun iprot (d)
  (declare (-double-) d)
  #{
  ipair_t ip;
  ip.ints.i = ((ipair_t)$d).ints.j;
  ip.ints.j = ((ipair_t)$d).ints.i;
  #}
  (to-double #{ ip.d #}) )

(defun declare-ipair-ctype ()
  `(cinline "typedef union {double d; struct {int i, j;} ints;} ipair_t;") )

(dhc-make-all ()
              (list
               (declare-ipair-ctype)
               'ipair 'ipi1 'ipi2 'iprot)
              ())
