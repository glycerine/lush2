;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; PSU Lush
;;;   Copyright (C) 2005 Ralf Juengling
;;; Derived from LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "iterator")

;; A simple demo to illustrate the iterator concept

(defclass Fibonacci iterator
  ((-int-) next-item)
  ((-int-) m n))

(defmethod Fibonacci fibonacci ()
  (==> this iterator)
  (setq m 0  n 1))

(defmethod Fibonacci -make-next ()
  (setq next-item (prog1 m (rotatef m n) (setq n (+ m n)))
	next-item-valid t)
  ())

(dhc-make () (Fibonacci Fibonacci -make-next peeknext next))

(let ((fib (new Fibonacci)))
  (printf "First 12 Fibonacci numbers:\n")
  (print (take 12 fib))
  (printf "Remaining Fibonacci until 17711:\n")
  (print (take-until 17711 fib)) )
