
(defmacro sum-of-squares args
  `(+ ,@(domapcar ((arg args)) `(* ,arg ,arg)))
  )

(defmacro with-wood/sys body
  `(let ((f1 (* 10 (- (x 1) (* (x 0) (x 0)))))
         (f2 (- 1 (x 0)))
         (f3 (* #.(sqrt 90) (- (x 3) (* (x 2) (x 2)))))
         (f4 (- 1 (x 2)))
         (f5 (* #.(sqrt 10) (+ (x 1) (x 3) -2)))
         (f6 (* #.(/ 1 (sqrt 10)) (- (x 1) (x 3)))) )
     ,@body)
  )
  
(defun wood (x)
  (declare (-idx1- (-double-)) x)
  (with-wood/sys
   (sum-of-squares f1 f2 f3 f4 f5 f6) )) 

(defun wood-grad (gx x)
  (declare (-idx1- (-double-)) gx x)
  (with-wood/sys
   (gx 0 (+ (* -40 (x 0) f1) (* -2 f2)))
   (gx 1 (+ (* 20 f1) (* #.(sqrt 10) 2 f5) (* f6 #.(/ 2 (sqrt 10)))))
   (gx 2 (+ (* #.(sqrt 90) -4 (x 2) f3) (* -2 f4)))
   (gx 3 (+ (* #.(sqrt 90) 2 f3) (* #.(sqrt 10) 2 f5) (* #.(/ -2 (sqrt 10)) f6))) )
  ())

(defun wood-hess (hx x)
  (declare (-idx1- (-double-)) x)
  (declare (-idx2- (-double-)) hx)
  (with-wood/sys
    (hx 0 0 (+ (* 800 (x 0) (x 0)) 2 (* -40 f1)))
    (hx 0 1 (* -400 (x 0)))
    (hx 1 0 (hx 0 1))
    (hx 1 1 220.2)
    (hx 1 3 19.8)
    (hx 3 1 19.8)
    (hx 2 2 (+ (* 720 (x 2) (x 2)) 2 (* -4 #.(sqrt 90) f3)))
    (hx 2 3 (* -360 (x 2)))
    (hx 3 2 (hx 2 3))
    (hx 3 3 200.2) )
  ())

(dhc-make () wood wood-grad wood-hess)

(delete sum-of-squares)
(delete with-wood/sys)

