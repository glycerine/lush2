
(defmacro sum-of-squares args
  `(+ ,@(domapcar ((arg args)) `(* ,arg ,arg)))
  )

(defmacro with-rosenbrock/sys body
  `(let ((f1 (* 10 (- (x 1) (* (x 0) (x 0)))))
         (f2 (- 1 (x 0))) )
     ,@body)
  )

(defun rosenbrock (x)
  (declare (-idx1- (-double-)) x)
  (with-rosenbrock/sys
   (sum-of-squares f1 f2) ))

(defun rosenbrock-grad (gx x)
  (declare (-idx1- (-double-)) gx x)
  (with-rosenbrock/sys
    (gx 0 (+ (* -40 (x 0) f1) (* -2 f2)))
    (gx 1 (* 20 f1)) )
  ())

(defun rosenbrock-hess (hx x)
  (declare (-idx1- (-double-)) x)
  (declare (-idx2- (-double-)) hx)
  (with-rosenbrock/sys
    (hx 0 0 (+ (* 800 (x 0) (x 0)) 2 (* -40 f1)))
    (hx 0 1 (* -400 (x 0)))
    (hx 1 0 (hx 0 1))
    (hx 1 1 200) )
  ())

(dhc-make () rosenbrock rosenbrock-grad rosenbrock-hess)

(delete sum-of-squares)
(delete with-rosenbrock/sys)

