;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "libc/fortran")

(defparameter *liblapack* (find-shared-library "liblapack"))

(when (null *liblapack*)
  (printf "\n")
  (printf "*** LAPACK shared library not found.")
  (defparameter *liblapack* (find-static-library "liblapack"))

  (if *liblapack*
      (printf "*** Using LAPACK static library (no error handling).")
    (printf "*** LAPACK static library not found.")
    (printf "*** If you have installed LAPACK and still get this message,\n")
    (printf "*** specify the path to the shared or static library by hand:\n")
    (printf "*** (defparameter *liblapack* \"/path/to/your/liblapack.so\")\n")
    (error "cannot configure LAPACK") ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; check that array is contiguous in the last
;; dimension (= leading dimension in fortran)
(defmacro chk-ld-contiguous (arg)
  (assert (symbolp arg))
  `(when (<> 1 (idx-modulo ,arg -1))
     (error "array must be contiguous in last dimension") )
  )

(defmacro chk-mm-compatible (A B)
  (assert (symbolp A))
  (assert (symbolp B))
  `(when (<> (idx-shape ,A 1) (idx-shape ,B 0))
     (error "matrices not compatible for matrix-multiply") )
  )

    
