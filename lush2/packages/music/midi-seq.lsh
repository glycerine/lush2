;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; $Id: midi-seq.lsh,v 1.2 2007/09/15 22:33:28 profshadoko Exp $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "asound-config")

;; a class to handle MIDI input and output through
;; Linux's sequencer device.

#? ** MIDI with the sequencer device
;; {<author> Yann LeCun}
;; This package provides a couple of classes to
;; receive and transmit simple MIDI events from and
;; to the ALSA sequencer device on Linux. 
;; The classes are built on top of the ALSA API.
;; Any MIDI port created with these classes appears
;; on the Jack MIDI panel and can be connected 
;; to physical MIDI interfaces, software Synthesizers,
;; or other MIDI-enabled software using Jack Control
;; or other MIDI patching software.

#? * midi-input 
;; a class to handle MIDI input through 
;; Linux's seq device.
;; Here is a typical example of use:
;; {<code>
;; (setq z (new midi-input "lushmidi"))
;; (let ((r 0))
;;    (while t
;;      ;; wait on midi port
;;      (while (= 0 (==> z poll 1000) ) ())
;;      ;; process all events
;;      (do-while (> (==> z pending-events) 0)
;;        (setq r (==> z read-event))
;;        (when (= 0 r)
;;	  (printf "chan=%2d, type=%3d, prm=%4d, val=%4d [r=%d]\n"
;;		  :z:eventchannel :z:eventtype :z:eventparam :z:eventvalue r))))))
;; </code>}
(defclass midi-input object
  ((-gptr-) pfds) 
  ((-gptr-) seqhandle)
  ((-int-) nfds)
  ((-str-) clientname)
  ((-int-) portid)
  ((-int-) clientid)
  ;; midi channel on which last midi event was sent
  ((-int-) eventchannel)
  ;; type of event (noteon, noteoff, pitchbend....)
  ((-int-) eventtype)
  ;; main parameter value (e.g. note value, controller number...)
  ((-int-) eventparam)
  ;; main value (e.g. velocity for a note, controller value for a
  ;; a controller event
  ((-int-) eventvalue)
  )

#? (new midi-input <name>)
;; create a new MIDI input object.
;; The midi input will appear as the string
;; <name> in the jack MIDI device list. 
(defmethod midi-input midi-input (name)
  ((-str-) name)
  (setq clientname name)
  (setq clientid -1)
  (setq portid -1)
  #{{
    snd_seq_t *seq_handle;

    if (snd_seq_open(&seq_handle, "default", SND_SEQ_OPEN_INPUT, 0) < 0) {
      run_time_error("Error opening ALSA sequencer"); 
    }
    snd_seq_set_client_name(seq_handle, STRING_DATA($name));
    $clientid = snd_seq_client_id(seq_handle);
    if (($portid = snd_seq_create_simple_port(seq_handle,STRING_DATA($name),
          SND_SEQ_PORT_CAP_WRITE|SND_SEQ_PORT_CAP_SUBS_WRITE,
          SND_SEQ_PORT_TYPE_APPLICATION)) < 0) {
      run_time_error("could not create port to midi/sequencer");
    }
    /* resize clientname before writing into it */
    /*
    Msrg_resize($clientname,256);
    sprintf(STRING_DATA($clientname), "%s_%d_%d", STRING_DATA($name), $clientid, $portid);
    */
    $seqhandle = (void*)seq_handle;

    $nfds = snd_seq_poll_descriptors_count(seq_handle, POLLIN);
    $pfds = (void*)malloc(sizeof(struct pollfd)*$nfds);
    snd_seq_poll_descriptors(seq_handle, (struct pollfd*)$pfds, $nfds, POLLIN);
   }#}
  ())


(defmethod midi-input -destructor ()
  (when (<> -1 portid) #{ snd_seq_delete_port((snd_seq_t *)$seqhandle,$portid); #})
  (when (not (= (to-gptr ()) seqhandle)) #{ snd_seq_close((snd_seq_t *)$seqhandle); #})
  (when (not (= (to-gptr ()) pfds)) #{ free($pfds); #})
  ())

#? (==> <midi-input> poll <timout>)
;; Waits for a MIDI event to arrive.
;; return 1 if a midi event has arrived before
;; <timeout> milliseconds have elapsed. If no event
;; has arrived by that time, the call returns a zero.
(defmethod midi-input poll(timeout)
  ((-int-) timeout)
  (let ((rez 0))
    ((-int-) rez)
    #{{int i; 
       if ( poll( (struct pollfd *)$pfds, $nfds, $timeout ) > 0 ) {
         for (i = 0; i < $nfds; i++) {
           if ( ((struct pollfd*)$pfds)[i].revents > 0 ) $rez = 1;
         }
       }
    }#} rez))

#? (==> <mid-input> read-event)
;; This reads the next available MIDI event.
;; This method blocks if no event is present on the queue.
;; Checking whether a MIDI event is present can be 
;; done with the <poll> method. If a MIDI event of
;; a known type was succesfully read, the slots
;; <eventchannel>, <eventtype>, <eventparam>, and <eventvalue>
;; are filled with the corresponding value from the event,
;; and 0 is returned. If an event of an unknown type was
;; read, a -1 is returned.
;; After a succesful read, the <eventchannel> slot contains
;; the channel on which the MIDI event was sent. <eventtype>
;; contains the type of event as an integer (e.g. SND_SEQ_EVENT_NOTEON,
;; SND_SEQ_EVENT_CONTROLLER, SND_SEQ_EVENT_PITCHBEND, see 
;; </usr/include/alsa/seq_event.h> for a list of types).
;; <eventparam> contains the event main parameter, i.e. the pitch
;; for a NOTEON or NOTEOFF event, the controller number for
;; a CONTROLLER event, etc). <eventvalue> contains the value
;; of the parameters, i.e. the velocity of a note, the 
;; value of a controller, etc.
;; The known event types are: <SND_SEQ_EVENT_NOTEON>,
;; <SND_SEQ_EVENT_NOTEOFF>, <SND_SEQ_EVENT_KEYPRESS>,
;; <SND_SEQ_EVENT_CONTROLLER>, <SND_SEQ_EVENT_PITCHBEND>,
;; <SND_SEQ_EVENT_PGMCHANGE>.
(defmethod midi-input read-event()
  (let ((rez 0))
    ((-int-) rez)
    #{{snd_seq_t *seq_handle = (snd_seq_t *)$seqhandle;
       snd_seq_event_t *ev ;
       snd_seq_event_input(seq_handle, &ev);
       $eventtype = (int)(ev->type);
       $eventchannel = (int)(ev->data.control.channel);
       switch (ev->type) {
         case SND_SEQ_EVENT_NOTEON:
           $eventparam = (int)(ev->data.note.note);
           $eventvalue = (int)(ev->data.note.velocity);
           break;
         case SND_SEQ_EVENT_NOTEOFF:
           $eventparam = (int)(ev->data.note.note);
           $eventvalue = -1;
           break;
         case SND_SEQ_EVENT_KEYPRESS:
           $eventparam = (int)(ev->data.note.note);
           $eventvalue = (int)(ev->data.note.velocity);
           break;
         case SND_SEQ_EVENT_CONTROLLER:
           $eventparam = (int)(ev->data.control.param);
           $eventvalue = (int)(ev->data.control.value);
           break;
         case SND_SEQ_EVENT_PITCHBEND:
           $eventparam = -1;
           $eventvalue = (int)(ev->data.control.value);
           break;
         case SND_SEQ_EVENT_PGMCHANGE:
           $eventparam = (int)(ev->data.control.param);
           $eventvalue = (int)(ev->data.control.value);
           break;
         default:
           $eventparam = -1;
           $eventvalue = -1;
           $rez = -1;
       }
       snd_seq_free_event(ev);
     }#}
    rez))

#? (==> <midi-input> pending-events)
;; return the number of pending MIDI events in the queue.
;; This uses the ALSA function <snd_seq_event_input_pending>,
;; which, strangely enough, returns zero even if the <poll>
;; method detected a MIDI event. It only seems to get updated
;; after <snd_seq_event_input> has been called by the method
;; <read-event>. Hence, <pending-events> should be used
;; in a <do-while> loop, after a call to <poll>, as in:
;; {<code>
;; (setq z (new midi-input "lushmidi"))
;; (let ((r 0))
;;    (while t
;;      ;; wait for an event on midi port
;;      (while (= 0 (==> z poll 1000) ) ())
;;      ;; process all events
;;      (do-while (> (==> z pending-events) 0)
;;        (setq r (==> z read-event))
;;        (when (= r 0) (do-midi-stuff z)))))
;; </code>}
(defmethod midi-input pending-events()
   (to-int #{ snd_seq_event_input_pending((snd_seq_t *)$seqhandle, 0) #}))

#? (==> <midi-input> debug-events)
;; A simple method that displays every valid MIDI event
;; that arrives to the <midi-input> object.
(defmethod midi-input debug-events ()
  (let ((r 0))
    (while t
      ;; wait on midi port
      ;; (printf "waiting\n")
      (while (= 0 (==> this poll 1000) ) ())
      ;; process all events
      (do-while (> (==> this pending-events) 0)
        (setq r (==> this read-event))
	(when (= 0 r)
	  (printf "chan=%2d, type=%3d, prm=%4d, val=%4d [r=%d]\n"
		  eventchannel eventtype eventparam eventvalue r))))))

#? (midi-input-test)
;; simple example function that creates a MIDI input port
;; and prints all events that arrive on it.
(de midi-input-test ()
  (setq z (new midi-input "lushmidi"))
  (==> z debug-events))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? * midi-output
;; A class to send simple MIDI events to the sequencer 
;; device. 
(defclass midi-output object
  ((-gptr-) seqhandle)			; handle on sequencer device
  ((-str-) clientname)			; name of this client
  ((-int-) portid)			; MIDI port id number
  ((-int-) clientid)			; client id number
  ((-gptr-) event)			; preallocated ALSA event structure
  )

#? (new midi-output <client-name>)
;; Creates a new MIDI client and port with which
;; MIDI events can be sent from Lush to a physical
;; MIDI interface or another MIDI-enabled software.
;; <client-name> should be a string containing a
;; name to identify this client. The client opens
;; a single port.
;; {<code>
;;  (setq z (new midi-output "lush-midi-out"))
;; </code>}
(defmethod midi-output midi-output (name)
  ((-str-) name)
  (setq clientname name)
  (setq clientid -1)
  (setq portid -1)
  #{{
    snd_seq_t *seq_handle;

    if (snd_seq_open(&seq_handle, "default", SND_SEQ_OPEN_OUTPUT, 0) < 0) {
      run_time_error("Error opening ALSA sequencer"); 
    }
    snd_seq_set_client_name(seq_handle, STRING_DATA($name));
    $clientid = snd_seq_client_id(seq_handle);
    if (($portid = snd_seq_create_simple_port(seq_handle,STRING_DATA($name),
          SND_SEQ_PORT_CAP_READ|SND_SEQ_PORT_CAP_SUBS_READ,
          SND_SEQ_PORT_TYPE_APPLICATION)) < 0) {
      run_time_error("could not create port to midi/sequencer");
    }
    $seqhandle = (void*)seq_handle;
    $event = malloc(sizeof(snd_seq_event_t));
    snd_seq_ev_clear( (snd_seq_event_t *)($event) );
    snd_seq_ev_set_source( (snd_seq_event_t *)($event), $portid);
    snd_seq_ev_set_subs( (snd_seq_event_t *)($event) );
    snd_seq_ev_set_direct( (snd_seq_event_t *)($event) );
   }#}
  ())

(defmethod midi-output -destructor ()
  (when (<> -1 portid) #{ snd_seq_delete_port((snd_seq_t *)$seqhandle,$portid); #})
  (when (not (= (to-gptr ()) seqhandle)) #{ snd_seq_close((snd_seq_t *)$seqhandle); #})
  ())

#? (==> <midi-output> note <ch> <key> <vel> <dur>)
;; send a <note> event to MIDI channel <ch>.
;; <key>, <vel>, <dur> are the key, velocity and duration
;; of the note.
(defmethod midi-output note (ch key vel dur)
  ((-int-) ch key vel dur)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_note( ev, $ch, $key, $vel, $dur);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> noteon <ch> <key> <vel>)
;; send a <noteon> event to MIDI channel <ch>.
;; <key>, and <vel> are the key, and velocity of the note.
;; A subsequent <noteoff> event with the same channel and
;; key must be sent subsequently to shut off the note.
(defmethod midi-output noteon (ch key vel)
  ((-int-) ch key vel)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_noteon( ev, $ch, $key, $vel);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> noteon <ch> <key> <vel>)
;; send a <noteoff> event to MIDI channel <ch>.
;; <key>, and <vel> are the key, and velocity (usually 0)
;; of the note to turn off. This generally follows an
;; <noteon> event with the same channel and key.
(defmethod midi-output noteoff (ch key vel)
  ((-int-) ch key vel)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_noteoff( ev, $ch, $key, $vel);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> keypress <ch> <key> <vel>)
;; send a <keypress> (aftertouch) event to MIDI channel 
;; <ch>. <key>, and <vel> are the key, and velocity.
(defmethod midi-output keypress (ch key vel)
  ((-int-) ch key vel)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_keypress( ev, $ch, $key, $vel);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> controller <ch> <cc> <val>)
;; Send a MIDI controller event to MIDI channel <ch>.
;; <cc> is the controller number, and <val> the value.
;; Here is a partial list of the most commonly used
;; MIDI controllers with their <cc> value:
;; 0: Bank Select; 1:  Modulation Wheel or Lever;
;; 2: Breath Controller; 4:  Foot Controller;
;; 5: Portamento Time; 6:  Data Entry MSB;
;; 7:  Channel Volume; 8:  Balance; 10: Pan;
;; 11: Expression Controller; 12: Effect Control 1;
;; 13: Effect Control 2.
;; A complete table is available at:
;; http://www.midi.org/about-midi/table3.shtml
(defmethod midi-output controller (ch cc val)
  ((-int-) ch cc val)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_controller( ev, $ch, $cc, $val);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> modulation <ch> <val>)
;; Send MIDI modulation value <val>. Equivalent
;; to calling <controller> with <cc=1>.
(defmethod midi-output modulation (ch val)
  ((-int-) ch val)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_controller( ev, $ch, 1, $val);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> breath <ch> <val>)
;; Send MIDI breath control value <val>. Equivalent
;; to calling <controller> with <cc=2>.
(defmethod midi-output breath (ch val)
  ((-int-) ch val)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_controller( ev, $ch, 2, $val);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> pgmchange <ch> <val>)
;; Send MIDI program change <val> to channel <ch>.
(defmethod midi-output pgmchange (ch val)
  ((-int-) ch val)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_pgmchange( ev, $ch, $val);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> pitchbend <ch> <val>)
;; Send MIDI pitchbend value <val> to channel <ch>.
(defmethod midi-output pitchbend (ch val)
  ((-int-) ch val)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_pitchbend( ev, $ch, $val);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> chanpress <ch> <val>)
;; Send MIDI channel pressure <val> to channel <ch>.
(defmethod midi-output chanpress (ch val)
  ((-int-) ch val)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      snd_seq_ev_set_chanpress( ev, $ch, $val);
      snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
  }#}
  ())

#? (==> <midi-output> sysex <ch> <data>)
;; Send MIDI system exclusive data to channel <ch>.
;; <data> must be an IDX1 of ubytes (of any size) 
;; containing the data to be transmitted.
(defmethod midi-output sysex (ch data)
  ((-int-) ch)
  ((-idx1- (-ubyte-)) data)
  (let ((n (idx-dim data 0)))
    ((-int-) n)
    #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
        snd_seq_ev_set_sysex( ev, (unsigned int)$n, IDX_PTR($data, void));
        snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
    }#}
    ()))

#? (==> <midi-output> write-event <ch> <type> <param> <value>)
;; Send a generic MIDI event to channel <ch>.
(defmethod midi-output write-event (ch type param value)
  ((-int-) ch type param value)
  #{{ snd_seq_event_t *ev = (snd_seq_event_t *)$event;
      ev->data.control.channel = $ch;
      ev->type = $type;
      switch ($type) {
        case SND_SEQ_EVENT_NOTEON:
           ev->data.note.note = $param;
           ev->data.note.velocity = $value;
           break;
         case SND_SEQ_EVENT_NOTEOFF:
           ev->data.note.note = $param;
           break;
         case SND_SEQ_EVENT_KEYPRESS:
           ev->data.note.note = $param;
           ev->data.note.velocity = $value;
           break;
         default: 
           ev->data.control.param = $param;
           ev->data.control.value = $value;
       }
       snd_seq_event_output_direct( (snd_seq_t *)$seqhandle, ev);
     }#} 
  ())


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make-with-libs
  ()
  asound-libs
  #{ 
    #include <alsa/asoundlib.h> 
    #define STRING_DATA(s) (char *)(s->data)
  #}
  (midi-input midi-input -destructor poll read-event pending-events)
  (midi-output midi-output -destructor note noteon noteoff keypress 
	       controller pgmchange pitchbend chanpress sysex write-event)
  )

