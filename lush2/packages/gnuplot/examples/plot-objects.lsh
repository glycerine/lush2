;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gnuplot/examples/common")
(libload "gnuplot/plot")

(defparameter *arrowstyle.dat* (concat-fname lushdir "demos/gnuplot/arrowstyle.dat"))

(defun plot-objects ()
  (let* ((world (read-xyz-data *world.dat*))
         (coord (read-xyz-data *world.cor*))
         (vdat ())
         (adat ())
         (plotter (new Gnuplot 'interactive ())) )
    (let ((offs (clone-array coord)))
      (idx-bloop ((off offs))
        (let ((phi (rand 0 +2pi+)))
          (off 0 (* 6 (cos phi)))
          (off 1 (* 6 (sin phi))) ))
      (setq adat (mat-catrows (- coord offs) coord))
      (setq vdat (mat-catrows (- coord offs) offs)) )

    ;; first way: use plotting style 'vectors'
    ;; (plot (title "Locations marked with vectors")
    ;;       "set style fill solid 1.0 border -1"
    ;;       "set obj 20 rect from graph 0,0 to graph 1,1 behind fc rgb \"cyan\" fs solid 0.2"
    ;;       "set border"
    ;;       notics
    ;;       (yrange -70 *)
    ;;       (filledcurves world (lc 'light-green))
    ;;       (vectors vdat (lc 'brown) (lw 2)) )
    ;; (pause)
    ;; (plotter "reset")
    
    ;; second way: add arrows
    (plot (title "Locations marked with arrows")
          "set style fill solid 1.0 border -1"
          "set obj 20 rect from graph 0,0 to graph 1,1 behind fc rgb \"cyan\" fs solid 0.2"
          "set border"
          notics
          (yrange -70 *)
          (filledcurves world (lc 'light-green))
          (do ((d vdat))
            (add-arrow (d 0) (d 1) (d 2) (d 3) (lc 'brown) (lw 2)) ))
    (pause)
    (plotter "reset")

    (plot (title "Locations marked with arrows*")
          "set style fill solid 1.0 border -1"
          "set obj 20 rect from graph 0,0 to graph 1,1 behind fc rgb \"cyan\" fs solid 0.2"
          "set border"
          notics
          (yrange -70 *)
          (filledcurves world (lc 'light-green))
          (do ((d adat))
            (add-arrow* (d 0) (d 1) (d 2) (d 3) (lc 'brown) (lw 2)) ))
    (pause)
    (plotter "reset")

    ;; good old sine-curve, add vline, hline and label
    (let ((x (arange (- +pi+) +2pi+ 0.01)))
      (plot (title "Sine")
            "set termoption enhanced"
            (add-vline 0 (zp 'back))
            (add-hline 0 (lt 0) (zp 'back))
            (add-vline +pi+ (lt 0))
            (add-label (+ +pi+ 0.2) 0.1 "Zero-crossing at x={/Symbol p}")
            (xrange -1 6.2)
            (yrange -1.2 1.2)
            (lines (++> x (sin x)) (lw 1.5)) ))
    ))
