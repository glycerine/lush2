#? *** Plotting with gnuplot
Gnuplot is a program for creating plots of functions or data that
is preinstalled on many Unix systems. Plots are created by writing
gnuplot programs that consist of commands for loading and selecting
data from a file, controlling the appearance of points, curves, 
axes, legends and so forth.

Lush offers a high-level and a low-level interface to gnuplot. The
high-level interface is easy to use and does not require much
knowledge of the gnuplot command language. The low-level interface
gives direct access to gnuplot. Using it requires good knowledge
of the gnuplot program. To learn more about gnuplot go to
{<hlink> http://www.gnuplot.info/documentation}.

#? ** The High-Level gnuplot Interface

In gnuplot terminology, a visualization of a data set is a "line".
Gnuplot may visualize one or more data sets in a single plot command,
and we say that a plot is composed of one ore more "lines".

Gnuplot may visualize two-dimensional data with command "plot", and
three-dimensional data with command "splot". For either command, 
data may be visualized in a variety of ways which are called 
"plotting styles". The high-level interface offers the two special
forms <plot> and <splot> for composing plots of two- and three-
dimensional data, respectively.

#? << gnuplot/plot.lsh

#? << gnuplot/objects.lsh

#? * Other Graph Elements and Properties
The following functions add elements to or modify aspects of a plot.
They may be used in <plot> or <splot>.

#? << gnuplot/other.lsh
#? << gnuplot/styles.lsh


#? ** The Low-Level gnuplot Interface
An object of class <Gnuplot> provides a simple interface to an 
external gnuplot process. A <Gnuplot> object behaves like a function.
It takes one or more gnuplot commands (strings), sends them to the
external process, receives the console output issued by gnuplot, prints
this output to <stdout>, and yields <()>. In this "interactive mode"
communicating to a gnuplot instance via a <Gnuplot> object is very
similar to communicating with the gnuplot program directly in a system
shell.
{<code>
  ? (setq gp (new Gnuplot))
  = ::gnuplot:a48e920
  ? (gp "show terminal")

     terminal type is x11

  = ()
</code>}

A <Gnuplot> object in "non-interactive mode" does not print to 
<stdout> but returns the output of gnuplot as a string.
{<code>
  ? (setq gp (new Gnuplot 'interactive ()))
  = ::gnuplot:a70d5b0
  ? (gp "show terminal")
  = "\n   terminal type is x11 \n\n"
</code>}

Arguments to <Gnuplot> objects can be either strings or arrays. String 
arguments are passed to gnuplot verbatim, arrays are passed as inline 
data.
{<code>
  ? (setq xs (arange -3 3 0.01))
  = ::INDEX:<601>
  ? (setq ys (sin xs))
  = ::INDEX:<601>
  ? (setq xys (array-combine* xs ys))        ; make a two-column table 
  = ::INDEX:<601x2>
  ? (gp "set xrange [-4:4]; plot '-'" xys)   ; send xy-data to gnuplot
  = ()
</code>}

#? << gnuplot/gnuplot.lsh