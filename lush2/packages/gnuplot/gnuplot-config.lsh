;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar *gnuplot-cmd* (reading "| which gnuplot" (read-string)))

(when (not (filep *gnuplot-cmd*))
  (error "Cannot find gnuplot") )

(let ((gp-version (reading "| gnuplot --version" (read-string))))
  (defparameter *gnuplot-version-string* gp-version)
  (when (< (val (cadr (str-split gp-version " "))) 4)
    (printf "*** Warning: Gnuplot interface has not been tested with gnuplot prior to version 4.0.\n")
    (printf "*** Warning: Version found is '%s'\n" gp-version)) )

(defun test-gnuplot-install ()  
  (let (((to from pid) (filteropenpty (sprintf "%s - 2>&1" *gnuplot-cmd*)))
        (txt ())
        (cur ()) )
    (printf "reading   ")
    (reading from (setq txt (read-string "~>")))
    (reading from (setq cur (read-string 2)))
    (print (concat txt cur))

    (printf "sending...\n")  
    (writing to
      (printf "print GPVAL_VERSION\n") )

    (printf "reading   ")
    (reading from (setq txt (read-string "~>")))
    (reading from (setq cur (read-string 2)))
    (print (concat txt cur))
    
    (writing to
      (printf "exit\n") )
    ()))
