#? *** OpenGL: 3D Graphics
.AUTHOR Leon Bottou, Yann LeCun
This is a full interface to the industry-standard
3D graphic libraries GLUT, OpenGL and OpenGLU.
.P
All GLUT and OpenGL/OpenGLU functions can be called from Lush, 
and all the predefined constants can be used (with the @ macro).
.P
Opening and manipulating windows in which OpenGL graphics can be 
rendered is done through GLUT. GLUT provides function to open,
close and manipulate graphic windows, as well as functions
to handle events from keyboards, mice, trackballs and other 
devices.
.P
no explicit documentation other than calling synopsis are provided.
Developers are referred to the OpenGL manuals (available for
example at
.HLINK http://www.opengl.org/developers/documentation/specs.html

#? ** Requirements/Installation

Lush's OpenGL interface requires three libraries:
libGL, libGLU, and libglut, together with the associated
header files (generally found in </usr/include/GL>).
Some Linux distributions do not install all those packages
by default, particularly the development packages, which
contain the header files. In that case you must install
them yourself (e.g. on Mandrake 8.x, you must install 
libMesaGL1-4.0.1-4mdk.i586.rpm, libMesaGLU1-4.0.1-4mdk.i586.rpm,
libMesaGLU1-devel-4.0.1-4mdk.i586.rpm, libMesaglut3-4.0.1-4mdk.i586.rpm, 
and libMesaglut3-devel-4.0.1-4mdk.i586.rpm).

Upon loading opengl/glut.lsh, opengl/opengl.lsh, or opengl/openglu.lsh 
Lush looks for the dynamic libraries libGL.so, libGLU.so, and libglut.so
and attempts to load them dynamically. Lush looks in standard locations
for those libraries. (/usr/X11R6/lib, /usr/lib, and /usr/local/lib).
If your system happens to have those libraries in other places, set 
the global variables opengl-libgl, opengl-libglu, opengl-libglut 
to the appropriate path(s) before loading opengl.lsh
openglu.lsh, or glut.lsh, or modify <packages/opengl/opengl-config.lsh>
to contain the appropriate configurations by default.
.P

#? ** OpenGL demos

#? << opengl/demos/glut-demo.lsh

#? ** GLUT Interface
.AUTHOR Leon Bottou

Lush provides an interface to OpenGL using the glut library. See 
.HLINK http://www.opengl.org/developers/documentation/glut/spec3/spec3.html
for a documentation of Glut.

Glut provides mechanisms to open and manipulate OpenGL graphic windows,
cursors, menus, and events in a portable way.  Though normal Glut programming
requires a call to a <glutMainLoop> function that takes control of the
application and dispatches events, there is no need to call <glutMainLoop>
with Lush.  The Glut interface uses Lush's event polling facilities in order
to organize the glut event processing.
.IP
Glut windows can be created using the Glut3 API functions directly.
Glut does not implement an event model and therefore does not 
insert events into the Lush event queue.  You must instead
register callback functions using the Glut3 API.
These function are directly called by Glut when Lush 
executes the polling function.
.IP
Class <GlutWindow> provides a more friendly interface.
Simply define a subclass of <GlutWindow>, make sure
the constructor calls method <create>, and override some 
of the event methods such as <glut-display> and <glut-reshape>.
A demonstration is available in <opengl/demos/glut-demo.lsh>.

#? * GlutWindow
The following class provides an easy way
to create glut windows and handle glut callbacks.

#? (new GlutWindow)
Constructs an empty <GlutWindow>.
You must call method <create> to actually create the window.

#? (==> <glutwindow> create <x> <y> <w> <h> <name>)
Creates the actual glut window associated with the object <glutwindow>.  
Arguments <x>, <y>, <w>, <h> specify the window location and size.  
Argument <name> specify the window name.
Passing zero leaves the argument unspecified

#? (==> <glutwindow> set-callbacks <pasvmotion>)
Establishes the various callbacks for the Glut window <glutwindow>.
The mouse passive motion callback is only set when boolean
<pasvmotion> is true.

#? (==> <glutwindow> destroy)
Destroys the actual glut window 
associated with <glutwindow>.

#? (==> <glutwindow> glhandle <...glcallback...>)
This function gets called whenever a 
callback for window <glutwindow> is called.
The default implementation immediatly calls
methods <glut-reshape>, <glut-display> or <glut-overlay-display>
in order to benefit from Glut optimizations.
All other callbacks are added to the Lush event queue.

Note: This method is not and cannot be compiled.

#? (==> <glutwindow> set-event-handler <handler>)
Sets the event handler used for adding glut events 
to the Lush event queue.  The default event handler
is the <glutwindow> object itself.

#? (==> <glutwindow> handle <event>)
This function is called to handle glut events posted by <glhandle>.
Unless a different event handler is set using method <set-event-handler>,
glut messages are processed by this function 
when <process-pending-events> is called.

#? (==> <glutwindow> glut-display)
Event method.
#? (==> <glutwindow> glut-reshape <w> <h>)
Event method.
#? (==> <glutwindow> glut-keyboard <key> <x> <y>)
Event method.
#? (==> <glutwindow> glut-mouse <n> <state> <x> <y>)
Event method.
#? (==> <glutwindow> glut-motion <x> <y>)
Event method.
#? (==> <glutwindow> glut-passive-motion <x> <y>)
Event method.
#? (==> <glutwindow> glut-entry <state>)
Event method.
#? (==> <glutwindow> glut-visibility <state>)
Event method.
#? (==> <glutwindow> glut-menu-state <state>)
Event method.
#? (==> <glutwindow> glut-special <key> <x> <y>)
Event method.
#? (==> <glutwindow> glut-spaceball-button <btn> <state>)
Event method.
#? (==> <glutwindow> glut-spaceball-motion <x> <y> <z>)
Event method.
#? (==> <glutwindow> glut-spaceball-rotate <x> <y> <z>)
Event method.
#? (==> <glutwindow> glut-button-box <btn> <state>)
Event method.
#? (==> <glutwindow> glut-dials <dial> <val>)
Event method.
#? (==> <glutwindow> glut-tablet-button <btn> <state> <x> <y>)
Event method.
#? (==> <glutwindow> glut-tablet-motion <x> <y>)
Event method.
#? (==> <glutwindow> glut-menu-status status <x> <y>)
Event method.
#? (==> <glutwindow> glut-overlay-display)
Event method.


#? * Glut3 API Functions

See <http://www.opengl.org/developers/documentation/glut/spec3/spec3.html>
for the documentation of the following functions.

#? (glut-init-display-mode <mode>)
#? (glut-init-window-size <w> <h>)
#? (glut-init-window-position <x> <y>)
#? (glut-create-window <name>)
#? (glut-create-sub-window <win> <x> <y> <w> <h>)
#? (glut-set-window <win>)
#? (glut-get-window)
#? (glut-destroy-window <win>)
#? (glut-post-redisplay)
#? (glut-swap-buffers)
#? (glut-set-window-title <title>)
#? (glut-set-icon-title <title>)
#? (glut-position-window <x> <y>)
#? (glut-reshape-window <w> <h>)
#? (glut-pop-window)
#? (glut-push-window)
#? (glut-iconify-window)
#? (glut-show-window)
#? (glut-hide-window)
#? (glut-full-screen)
#? (glut-set-cursor cursor)
#? (glut-establish-overlay)
#? (glut-remove-overlay)
#? (glut-use-layer layer)
#? (glut-post-overlay-redisplay)
#? (glut-show-overlay)
#? (glut-hide-overlay)
#? (glut-create-menu <func>)
#? (glut-destroy-menu <menu>)
#? (glut-get-menu)
#? (glut-set-menu <menu>)
#? (glut-add-menu-entry <label> <value>)
#? (glut-add-sub-menu <label> <submenu>)
#? (glut-change-to-menu-entry <entry> <label> <value>)
#? (glut-change-to-sub-menu <entry> <label> <submenu>)
#? (glut-remove-menu-item <item>)
#? (glut-attach-menu <button>)
#? (glut-detach-menu <button>)
#? (glut-display-func <func>)
#? (glut-reshape-func <func>)
#? (glut-keyboard-func <func>)
#? (glut-mouse-func <func>)
#? (glut-motion-func <func>)
#? (glut-passive-motion-func <func>)
#? (glut-entry-func <func>)
#? (glut-visibility-func <func>)
#? (glut-timer-func <millis> <func> <value>)
#? (glut-menu-state-func <func>)
#? (glut-special-func <func>)
#? (glut-spaceball-motion-func <func>)
#? (glut-spaceball-rotate-func <func>)
#? (glut-spaceball-button-func <func>)
#? (glut-button-box-func <func>)
#? (glut-dials-func <func>)
#? (glut-tablet-motion-func <func>)
#? (glut-tablet-button-func <func>)
#? (glut-menu-status-func <func>)
#? (glut-overlay-display-func <func>)
#? (glut-set-color <cell> <r> <g> <b>)
#? (glut-get-color <cell> <comp>)
#? (glut-copy-colormap <win>)
#? (glut-get <type>)
#? (glut-device-get <type>)
#? (glut-layer-get <type>)
#? (glut-extension-supported <name>)
#? (glut-get-modifiers)
#? (glut-bitmap-character <font> <char>)
#? (glut-bitmap-width <font> <char>)
#? (glut-stroke-character <font> <char>)
#? (glut-stroke-width <font> <char>)
#? (glut-wire-sphere <radius> <slices> <stacks>)
#? (glut-solid-sphere <radius> <slices> <stacks>)
#? (glut-wire-cone <base> <height> <slices> <stacks>)
#? (glut-solid-cone <base> <height> <slices> <stacks>)
#? (glut-wire-cube <size>)
#? (glut-solid-cube <size>)
#? (glut-wire-torus <innerRadius> <outerRadius> <sides> <ringssize>)
#? (glut-solid-torus <innerRadius> <outerRadius> <sides> <ringssize>)
#? (glut-wire-teapot <size>)
#? (glut-solid-teapot <size>)
#? (glut-wire-dodecahedron)
#? (glut-solid-dodecahedron)
#? (glut-wire-octahedron)
#? (glut-solid-octahedron)
#? (glut-wire-tetrahedron)
#? (glut-solid-tetrahedron)
#? (glut-wire-icosahedron)
#? (glut-solid-icosahedron)


#? ** OpenGL low-level interface
.AUTHOR Yann LeCun
All OpenGL functions can be called from Lush, and all 
the predefined constants can be used (with the @ macro).

The Lush equivalents to OpenGL functions have the same name as their C 
counterparts. The arguments are also identical to the C version, except
that structure pointers are generic pointers, and pointers to arrays
of numbers are transformed into Lush matrices with the corresponding type.
So for example, the Lush version of the function glPixelMapfv whose C 
prototype is glPixelMapfv(int,int,float*) takes two ints and an idx1
of floats as arguments. 
.P
The only exception to this rule is when the type of the numbers in the
array is unspecified at compile time. In this case, the Lush function
takes a gptr (the C function takes a void*).
The functions to which this exception applies are:
glPolygonStipple, glGetPolygonStipple, glEdgeFlagv, glReadPixels,
glDrawPixels, glTexImage1D, glTexImage2D, and glGetTexImage.
.P
The functions implemented here are the ones that are present in
the gl.h file distributed with the open source implementation
of OpenGL called Mesa.
.P

#? (glClearIndex <c> )
#? (glClearColor (<red> <green> <blue> <alpha>)
#? (glClearColor <red> <green> <blue> <alpha>)
#? (glClear <mask>)
#? (glIndexMask <mask>)
#? (glColorMask <red> <green> <blue> <alpha>)
#? (glAlphaFunc <func> <ref>)
#? (glBlendFunc <sfactor> <dfactor>)
#? (glLogicOp <opcode>)
#? (glCullFace <mode>)
#? (glFrontFace <mode>)
#? (glPointSize <size>)
#? (glLineWidth <width>)
#? (glLineStipple <factor> <pattern>)
#? (glPolygonMode <face> <mode>)
#? (glPolygonStipple <mask>)
#? (glGetPolygonStipple <mask>)
#? (glEdgeFlag <flag>)
#? (glEdgeFlagv <flag>)
#? (glScissor <x> <y> <width> <height>)
#? (glClipPlane <plane> <equation>)
#? (glGetClipPlane <plane> <equation>)
#? (glDrawBuffer <mode>)
#? (glReadBuffer <mode>)
#? (glEnable <cap>)
#? (glDisable <cap>)
#? (glIsEnabled <cap>)
#? (glGetBooleanv <pname> <params>)
#? (glGetDoublev <pname> <params>)
#? (glGetFloatv <pname> <params>)
#? (glGetIntegerv <pname> <params>)
#? (glPushAttrib <mask>)
#? (glPopAttrib)
#? (glRenderMode <mode>)
#? (glGetError)
#? (glGetString <name>)
#? (glFinish)
#? (glFlush)
#? (glHint <target> <mode>)
#? (glClearDepth <depth>)
#? (glDepthFunc <func>)
#? (glDepthMask <flag>)
#? (glDepthRange <near_val> <far_val>)
#? (glClearAccum <red> <green> <blue> <alpha>)
#? (glAccum <op> <value>)
#? (glMatrixMode <mode>)
#? (glOrtho <left> <right> <bottom> <top> <near_val> <far_val>)
#? (glFrustum <left> <right> <bottom> <top> <near_val> <far_val>)
#? (glViewport <x> <y> <width> <height>)
#? (glPushMatrix)
#? (glPopMatrix)
#? (glLoadIdentity)
#? (glLoadMatrixd <m>)
#? (glLoadMatrixf <m>)
#? (glMultMatrixd <m>)
#? (glMultMatrixf <m>)
#? (glRotated <angle> <x> <y> <z>)
#? (glRotatef <angle> <x> <y> <z>)
#? (glScaled <x> <y> <z>)
#? (glScalef <x> <y> <z>)
#? (glTranslated <x> <y> <z>)
#? (glTranslatef <x> <y> <z>)
#? (glIsList <list>)
#? (glDeleteLists <list> <range>)
#? (glGenLists <range>)
#? (glNewList <list> <mode>)
#? (glEndList)
#? (glCallList <list>)
#? (glCallLists <n> <type> <lists>)
#? (glListBase <base>)
#? (glBegin <mode>)
#? (glEnd)
#? (glVertex2d <x> <y>)
#? (glVertex2f <x> <y>)
#? (glVertex2i <x> <y>)
#? (glVertex2s <x> <y>)
#? (glVertex3d <x> <y> <z>)
#? (glVertex3f <x> <y> <z>)
#? (glVertex3i <x> <y> <z>)
#? (glVertex3s <x> <y> <z>)
#? (glVertex4d <x> <y> <z> <w>)
#? (glVertex4f <x> <y> <z> <w>)
#? (glVertex4i <x> <y> <z> <w>)
#? (glVertex4s <x> <y> <z> <w>)
#? (glVertex2dv <v>);
#? (glVertex2fv <v>);
#? (glVertex2iv <v>);
#? (glVertex2sv <v>);
#? (glVertex3dv <v>);
#? (glVertex3fv <v>);
#? (glVertex3iv <v>);
#? (glVertex3sv <v>);
#? (glVertex4dv <v>);
#? (glVertex4fv <v>);
#? (glVertex4iv <v>);
#? (glVertex4sv <v>);
#? (glNormal3b <nx> <ny> <nz>)
#? (glNormal3d <nx> <ny> <nz>)
#? (glNormal3f <nx> <ny> <nz>)
#? (glNormal3i <nx> <ny> <nz>)
#? (glNormal3s <nx> <ny> <nz>)
#? (glNormal3bv <v>)
#? (glNormal3dv <v>)
#? (glNormal3fv <v>)
#? (glNormal3iv <v>)
#? (glNormal3sv <v>)
#? (glIndexd <c>)
#? (glIndexf <c>)
#? (glIndexi <c>)
#? (glIndexs <c>)
#? (glIndexdv <c>)
#? (glIndexfv <c>)
#? (glIndexiv <c>)
#? (glIndexsv <c>)
#? (glColor3b <red> <green> <blue>)
#? (glColor3d <red> <green> <blue>)
#? (glColor3f <red> <green> <blue>)
#? (glColor3i <red> <green> <blue>)
#? (glColor3s <red> <green> <blue>)
#? (glColor3ub <red> <green> <blue>)
#? (glColor3ui <red> <green> <blue>)
#? (glColor3us <red> <green> <blue>)
#? (glColor4b <red> <green> <blue> <alpha>)
#? (glColor4d <red> <green> <blue> <alpha>)
#? (glColor4f <red> <green> <blue> <alpha>)
#? (glColor4i <red> <green> <blue> <alpha>)
#? (glColor4s <red> <green> <blue> <alpha>)
#? (glColor4ub <red> <green> <blue> <alpha>)
#? (glColor4ui <red> <green> <blue> <alpha>)
#? (glColor4us <red> <green> <blue> <alpha>)
#? (glColor3bv <v>)
#? (glColor3dv <v>)
#? (glColor3fv <v>)
#? (glColor3iv <v>)
#? (glColor3sv <v>)
#? (glColor3ubv <v>)
#? (glColor3uiv <v>)
#? (glColor3usv <v>)
#? (glColor4bv <v>)
#? (glColor4dv <v>)
#? (glColor4fv <v>)
#? (glColor4iv <v>)
#? (glColor4sv <v>)
#? (glColor4ubv <v>)
#? (glColor4uiv <v>)
#? (glColor4usv <v>)
#? (glTexCoord1d <s>)
#? (glTexCoord1f <s>)
#? (glTexCoord1i <s>)
#? (glTexCoord1s <s>)
#? (glTexCoord2d <s> <u>)
#? (glTexCoord2f <s> <u>)
#? (glTexCoord2i <s> <u>)
#? (glTexCoord2s <s> <u>)
#? (glTexCoord3d <s> <u> <r>)
#? (glTexCoord3f <s> <u> <r>)
#? (glTexCoord3i <s> <u> <r>)
#? (glTexCoord3s <s> <u> <r>)
#? (glTexCoord4d <s> <u> <r> <q>)
#? (glTexCoord4f <s> <u> <r> <q>)
#? (glTexCoord4i <s> <u> <r> <q>)
#? (glTexCoord4s <s> <u> <r> <q>)
#? (glTexCoord1dv <v>)
#? (glTexCoord1fv <v>)
#? (glTexCoord1iv <v>)
#? (glTexCoord1sv <v>)
#? (glTexCoord2dv <v>)
#? (glTexCoord2fv <v>)
#? (glTexCoord2iv <v>)
#? (glTexCoord2sv <v>)
#? (glTexCoord3dv <v>)
#? (glTexCoord3fv <v>)
#? (glTexCoord3iv <v>)
#? (glTexCoord3sv <v>)
#? (glTexCoord4dv <v>)
#? (glTexCoord4fv <v>)
#? (glTexCoord4iv <v>)
#? (glTexCoord4sv <v>)
#? (glRasterPos2d <x> <y>)
#? (glRasterPos2f <x> <y>)
#? (glRasterPos2i <x> <y>)
#? (glRasterPos2s <x> <y>)
#? (glRasterPos3d <x> <y> <z>)
#? (glRasterPos3f <x> <y> <z>)
#? (glRasterPos3i <x> <y> <z>)
#? (glRasterPos3s <x> <y> <z>)
#? (glRasterPos4d <x> <y> <z> <w>)
#? (glRasterPos4f <x> <y> <z> <w>)
#? (glRasterPos4i <x> <y> <z> <w>)
#? (glRasterPos4s <x> <y> <z> <w>)
#? (glRasterPos2dv <v>)
#? (glRasterPos2fv <v>)
#? (glRasterPos2iv <v>)
#? (glRasterPos2sv <v>)
#? (glRasterPos3dv <v>)
#? (glRasterPos3fv <v>)
#? (glRasterPos3iv <v>)
#? (glRasterPos3sv <v>)
#? (glRasterPos4dv <v>)
#? (glRasterPos4fv <v>)
#? (glRasterPos4iv <v>)
#? (glRasterPos4sv <v>)
#? (glRectd <x1> <y1> <x2> <y2>)
#? (glRectf <x1> <y1> <x2> <y2>)
#? (glRecti <x1> <y1> <x2> <y2>)
#? (glRects <x1> <y1> <x2> <y2>)
#? (glRectdv <v1> <v2>)
#? (glRectfv <v1> <v2>)
#? (glRectiv <v1> <v2>)
#? (glRectsv <v1> <v2>)
#? (glShadeModel <mode>)
#? (glLightf <light> <pname> <param>)
#? (glLighti <light> <pname> <param>)
#? (glLightfv <light> <pname> <param>)
#? (glLightiv <light> <pname> <param>)
#? (glGetLightfv <light> <pname> <param>)
#? (glGetLightiv <light> <pname> <param>)
#? (glLightModelf <pname> <param>)
#? (glLightModeli <pname> <param>)
#? (glLightModelfv <pname> <param>)
#? (glLightModeliv <pname> <param>)
#? (glMaterialf <face> <pname> <param>)
#? (glMateriali <face> <pname> <param>)
#? (glMaterialfv <face> <pname> <param>)
#? (glMaterialiv <face> <pname> <param>)
#? (glGetMaterialfv <face> <pname> <param>)
#? (glGetMaterialiv <face> <pname> <param>)
#? (glColorMaterial <face> <mode>)
#? (glPixelZoom <xfactor> <yfactor>)
#? (glPixelStoref <pname> <param>)
#? (glPixelStorei <pname> <param>)
#? (glPixelTransferf <pname> <param>)
#? (glPixelTransferi <pname> <param>)
#? (glPixelMapfv <map> <mapsize> <values>)
#? (glPixelMapuiv <map> <mapsize> <values>)
#? (glPixelMapusv <map> <mapsize> <values>)
#? (glGetPixelMapfv <map> <values>)
#? (glGetPixelMapuiv <map> <values>)
#? (glGetPixelMapusv <map> <values>)
#? (glBitmap <width> <height> <xorig> <yorig> <xmove> <ymove> <bitmap>)
#? (glReadPixels <x> <y> <width> <height> <format> <type> <pixels>)
#? (glDrawPixels <width> <height> <format> <type> <pixels>)
#? (glCopyPixels <x> <y> <width> <height> <type>)
#? (glStencilFunc <func> <ref> <mask>)
#? (glStencilMask <mask>)
#? (glStencilOp  <fail> <zfail> <zpass>)
#? (glClearStencil <s>)
#? (glTexGend <coord> <pname> <param>)
#? (glTexGenf <coord> <pname> <param>)
#? (glTexGeni <coord> <pname> <param>)
#? (glTexGendv <coord> <pname> <param>)
#? (glTexGenfv <coord> <pname> <param>)
#? (glTexGeniv <coord> <pname> <param>)
#? (glGetTexGendv <coord> <pname> <param>)
#? (glGetTexGenfv <coord> <pname> <param>)
#? (glGetTexGeniv <coord> <pname> <param>)
#? (glTexEnvf <target> <pname> <param>)
#? (glTexEnvi <target> <pname> <param>)
#? (glTexEnvfv <target> <pname> <param>)
#? (glTexEnviv <target> <pname> <param>)
#? (glGetTexEnvfv <target> <pname> <param>)
#? (glGetTexEnviv <target> <pname> <param>)
#? (glTexParameterf <target> <pname> <param>)
#? (glTexParameteri <target> <pname> <param>)
#? (glTexParameterfv <target> <pname> <param>)
#? (glTexParameteriv <target> <pname> <param>)
#? (glGetTexParameterfv <target> <pname> <param>)
#? (glGetTexParameteriv <target> <pname> <param>)
#? (glGetTexLevelParameterfv <target> <level> <pname> <params>)
#? (glGetTexLevelParameteriv <target> <level> <pname> <params>)
#? (glTexImage1D <target> <level> <components> <width> <border> <format> <type> <pixels>)
#? (glTexImage2D <target> <level> <components> <width> <height> <border> <format> <type> <pixels>)
#? (glGetTexImage <target> <level> <format> <type> <pixels>)
#? (glMap1d <target> <u1> <u2> <stride> <order> <points>)
#? (glMap1f <target> <u1> <u2> <stride> <order> <points>)
#? (glMap2d <target> <u1> <u2> <ustride> <uorder> <v1> <v2> <vstride> <vorder> <points>)
#? (glMap2f <target> <u1> <u2> <ustride> <uorder> <v1> <v2> <vstride> <vorder> <points>)
#? (glGetMapdv <target> <query> <v>)
#? (glGetMapfv <target> <query> <v>)
#? (glGetMapiv <target> <query> <v>)
#? (glEvalCoord1d <u>)
#? (glEvalCoord1f <u>)
#? (glEvalCoord1dv <u>)
#? (glEvalCoord1fv <u>)
#? (glEvalCoord2d <u> <v>)
#? (glEvalCoord2f <u> <v>)
#? (glEvalCoord2dv <u>)
#? (glEvalCoord2fv <u>)
#? (glMapGrid1d <un> <u1> <u2>)
#? (glMapGrid1f <un> <u1> <u2>)
#? (glMapGrid2d <un> <u1> <u2> <vn> <v1> <v2>)
#? (glMapGrid2f <un> <u1> <u2> <vn> <v1> <v2>)
#? (glEvalPoint1 <i>)
#? (glEvalPoint2 <i> <j>)
#? (glEvalMesh1 <mode> <i1> <i2>)
#? (glEvalMesh2  <mode> <i1> <i2> <j1> <j2>)
#? (glFogf <pname> <param>)
#? (glFogi <pname> <param>)
#? (glFogfv <pname> <param>)
#? (glFogiv <pname> <param>)
#? (glFeedbackBuffer  <size> <type> <buffer>)
#? (glPassThrough <token>)
#? (glSelectBuffer <size> <buffer>)
#? (glInitNames)
#? (glLoadName <name>)
#? (glPushName <name>)
#? (glPopName)
#? (glBlendEquationEXT <mode>)
#? (glBlendColorEXT <red> <green> <blue> <alpha>)
#? (glPolygonOffsetEXT <factor> <bias>)


#? ** OpenGLU low-level interface
.AUTHOR Yann LeCun
This is a complete interface between Lush and the OpenGLU library
(OpenGL Utilities). openglu uses the Lush opengl
interface <opengl/opengl.lsh>.  The Lush equivalents to OpenGLU
functions have the same name as their C counterparts. The arguments are
also identical to the C version, except that structure pointers are generic
pointers, and pointers to arrays of numbers are transformed into Lush
matrices with the corresponding type.  So for example, the Lush version of
the function gluGetNurbsProperty whose C prototype is
gluGetNurbsProperty(GLUnurbs*,int,float*) takes a gptr, an int, and an idx1
of floats.  The only exception to this rule is when the type of the numbers
in the array is unspecified at compile time. In this case, the Lush
function takes a gptr (the C function takes a void*).  The functions to
which this exception applies are: gluBuild1DMipmaps, gluBuild2DMipmaps,
gluScaleImage, gluTessBeginPolygon, and gluTessVertex.

The functions implemented here are the ones that are present in
the glu.h file distributed with the public domain implementation
of OpenGL called Mesa.

#? (gluBeginCurve <nurb>)
#? (gluBeginPolygon <tess>)
#? (gluBeginSurface <nurb>)
#? (gluBeginTrim <nurb>)
#? (gluBuild1DMipmaps <target> <component> <width> <format> <type> <data>)
#? (gluBuild2DMipmaps <target> <component> <width> <height> <format> <type> <data>)
#? (gluCylinder <quad> <base> <top> <height> <slices> <stacks>)
#? (gluDeleteNurbsRenderer <nurb>)
#? (gluDeleteQuadric <quad>)
#? (gluDeleteTess <tess>)
#? (gluDisk <quad> <inner> <outer> <slices> <loops>)
#? (gluEndCurve <nurb>)
#? (gluEndPolygon <tess>)
#? (gluEndSurface <nurb>)
#? (gluEndTrim <nurb>)
#? (gluErrorString <error>)
#? (gluGetNurbsProperty <nurb> <property> <data>)
#? (gluGetString <name>)
#? (gluGetTessProperty <tess> <which> <data>)
#? (gluLoadSamplingMatrices <nurb> <model> <perspective> <view>)
#? (gluLookAt <eyex> <eyey> <eyez> <centerx> <centery> <centerz> <upx> <upy> <upz>)
#? (gluNewNurbsRenderer)
#? (gluNewQuadric)
#? (gluNewTess)
#? (gluNextContour <tess> <type>)
#? (gluNurbsCallback <nurb> <which> <callbackfunc>)
#? (gluNurbsCurve <nurb> <knotcount> <knots> <stride> <control> <order> <type>)
#? (gluNurbsProperty <nurb> <property> <value>)
#? (gluNurbsSurface <nurb> <sknotcount> <sknots> <tknotcount> <tknots> <sstride> <tstride> <control> <sorder> <torder> <type>)
#? (gluOrtho2D <left> <right> <bottom> <top>)
#? (gluPartialDisk <quad> <inner> <outer> <slices> <loops> <start> <sweep>)
#? (gluPerspective <fovy> <aspect> <znear> <zfar>)
#? (gluPickMatrix <x> <y> <delx> <dely> <viewport>)
#? (gluProject <objx> <objy> <objz> <model> <proj> <view> <winx> <winy> <winz>)
#? (gluPwlCurve <nurb> <count> <data> <stride> <type>)
#? (gluQuadricCallback <quad> <which> <callbackfunc>)
#? (gluQuadricDrawStyle <quad> <draw>)
#? (gluQuadricNormals <quad> <normal>)
#? (gluQuadricOrientation <quad> <orientation>)
#? (gluQuadricTexture <quad> <texture>)
#? (gluScaleImage <format> <win> <hin> <typein> <datain> <wout> <hout> <typeout> <dataout>)
#? (gluSphere <quad> <radius> <slices> <stacks>)
#? (gluTessBeginContour <tess>)
#? (gluTessBeginPolygon <tess> <data>)
#? (gluTessCallback <tess> <which> <callbackfunc>)
#? (gluTessEndContour <tess>)
#? (gluTessEndPolygon <tess>)
#? (gluTessNormal <tess> <valuex> <valuey> <valuez>)
#? (gluTessProperty <tess> <which> <data>)
#? (gluTessVertex <tess> <location> <data>)
#? (gluUnProject <winx> <winy> <winz> <model> <proj> <view> <objx> <objy> <objz>)


