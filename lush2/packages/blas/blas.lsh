;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "blas/double.lsh")
(libload "blas/float.lsh")
(libload "overload")

#? *** Basic Linear Algebra Subroutines (Namespace blas-)
;; Lush interface to BLAS routines.

#? ** BLAS Level 1

(in-namespace blas-

;; define with overload all functions defined in multiple precisions
(do (((name . _) -blas-d))
  (eval `(defoverload ,name ,(-blas-d name) ,(-blas-s name)) ))


#? (blas-asum <x>)
;; Sum of magnitudes of elements of vector <x>.

#? (blas-asum* <x>)
;; Sum of magnitudes of elements of <x>.
(defmacro asum* (x)
  `(asum ($- ,x))
  )

#? (blas-amax <x>)
;; Maximum norm of vector <x>.
(defmacro amax (x)
  (if (symbolp x)
      `(abs (,x (iamax ,x)))
    (let ((u (gensym)))
      `(let ((,u ,x)) (amax ,u))
      )))

#? (blas-amax* <x>)
;; Maximum norm of <x>.
(defmacro amax* (x)
  `(amax ($- ,x))
  )

#? (blas-axpy! <alpha> <u> <v>)
;; Write <alpha>*<u>+<v> to vector <v> and return nothing.

#? (blas-axpy!* <alpha> <u> <v>)
;; Write <alpha>*<u>+<v> to <v> and return nothing.
(defmacro axpy!* (alpha u v)
  `(axpy! ,alpha ($- ,u) ($- ,v))
  )

#? (blas-axpy <alpha> <u> <v>)
;; Return sum of <alpha>*<u> and <v>.
(defmacro axpy (alpha u v)
  `(let ((__v__ (copy-array ,v)))
     (axpy! ,alpha ,u __v__)
     __v__)
  )


#? (blas-clr! <alpha> <u>)
;; Clear vector <u> with <alpha> and return cleared <u>.

#? (blas-clr!* <alpha> <u>
;; Clear <u> with <alpha> and return nothing.
(defmacro clr!* (alpha u)
  `(clr! ,alpha ($- ,u))
  )

#? (blas-copy <u> <v>)
;; Copy data from <u> to <v> and return nothing.

#? (blas-copy* <u> <v>)
;; Copy data from <u> to <v> and return nothing.
(defmacro copy* (u v)
  `(copy ($- ,u) ($- ,v))
  )


#? (blas-dot <u> <v>)
;; Dot product of vectors <u> and <v>.

#? (blas-dot* <u> <v>)
;; Dot protuct of <u> and <v>.
(defmacro dot* (u v)
  `(dot ($- ,u) ($- ,v))
  )

#? (blas-iamax <x>)
;; Index of maximum magnitude element of <x>.


#? (blas-nrm2 <v>)
;; Euclidean norm of vector <v>.

#? (blas-nrm2* <v>)
;; Euclidean norm of <v>.
(defmacro nrm2* (v)
  `(nrm2 ($- ,v))
  )

#? (blas-rotg! <abcs>)
;; Generate plane rotation coefficients <c> and <s>
;; (out) from <a> and <b> (in).


#? (blas-rotg <a> <b>)
;; Generate plane rotation coefficients <c> and <s>
;; from <a> and <b> and return in a two-element vector.


#? (blas-rot! <x> <y> <cs>)
;; Apply plane rotation <cs> to vectors <x> and <y>.


#? (blas-scal! <alpha> <v>)
;; Scale vector <v> by <alpha> in place and return nothing.

#? (blas-scal!* <alpha> <v>)
;; Scale <v> by <alpha> in place and return nothing.
(defmacro scal!* (alpha v)
  `(scal! ,alpha ($- ,v))
  )

#? (blas-scal <alpha> <v>)
;; Return scaled <alpha>*<v>.
(defmacro scal (alpha u)
  `(let ((__u__ (copy-array ,u)))
     (scal! ,alpha __u__)
     __u__)
  )


#? (blas-scal1! <v>)
;; Normalize vector <v> in place.

#? (blas-scal1 <v>)
;; Return normalized vector <v>.
(defmacro scal1 (u)
  `(let ((__u__ (copy-array ,u)))
     (scal1! __u__)
     __u__)
  )

#? (blas-swap <u> <v>)
;; Swap data in vectors <u> and <v>.

#? (blas-swap* <u> <v>)
;; Swap data in <u> and <v>.
(defmacro swap* (u v)
  `(swap ($- ,u) ($- ,v))
  )

#? (blas-sum <v>)
;; Sum of entries in vector <v>.

#? (blas-sum* <v>)
;; Sum of entries in <v>.
(defmacro sum* (v)
  `(sum ($- ,v))
  )


#? ** BLAS Level 2

#? (blas-gemv! <alpha> <A> <u> <beta> <v>)
;; Update <v> with <alpha>*<A>.<u> + <beta>*<v> and return nothing.


#? (blas-gemv <alpha> <A> <u>)
;; Return <alpha>*<A>.<u>.


#? (blas-gevm! <alpha> <u> <A> <beta> <v>)
;; Update <v> with <alpha>*<u>.<A> + <beta>*<v> and return nothing.


#? (blas-gevm <alpha> <u> <A>)
;; Return <alpha>*<u>.<A>.


#? (blas-ger1! <alpha> <u> <v> <A>)
;; Update <A> with <alpha>*<u>o<v> + <A> and return nothing.


#? (blas-ger1 <alpha> <u> <v> <A>)
;; Return <alpha>*<u>o<v> + <A>.
(defmacro ger1 (alpha u v A)
  `(let ((__A__ (copy-array ,A)))
     (ger1! ,alpha ,u ,v __A__)
     __A__)
  )

#? (blas-symv! <alpha> <A> <u> <beta> <v>)
;; Update <v> with <alpha>*<A>.<u> + <beta>*<v> and return nothing.
;;
;; Matrix <A> is assumed symmetric (upper triangle is referenced).


#? (blas-symv <alpha> <A> <u>)
;; Return <alpha>*<A>.<u>.
;;
;; Matrix <A> is assumed symmetric (upper triangle is referenced).


#? (blas-utsv! <U> <v>)
;; Update <v> with <U>^-1<v> and return nothing.
;;
;; Matrix <U> is upper triangular.


#? (blas-utsv <U> <v>)
;; Return <U>^-1<v>.
;;
;; Matrix <U> is upper triangular.
(defmacro utsv (U v)
  `(let ((__v__ (copy-array ,v)))
     (utsv! ,U __v__)
     __v__)
  )

#? ** BLAS Level 3

#? (blas-gemm! <alpha> <A> <B> <beta> <C>)
;; Update <C> with <alpha>*<A>.<B> + <beta>*<C> and return nothing.


#? (blas-gemm <alpha> <A> <B>)
;; Return <alpha>*<A>.<B>.


#? (blas-symm! <alpha> <S> <B> <beta> <C>)
;; Update <C> with <alpha>*<S>.<B> + <beta>*<C> and return nothing.
;;
;; Matrix <S> is symmetric, only the upper triangle is referenced.

    
#? (blas-symm <alpha> <S> <B>)
;; Return <alpha>*<S>.<B>.
(defmacro symm (alpha S B)
  (if (symbolp B)
      `(let ((__C__ (clone-array ,B)))
         (symm! ,alpha ,S ,B 0 __C__)
         __C__)
    (let ((BB (gensym)))
      `(let ((,BB ,B))
	 (symm ,alpha ,S ,BB) )
      )))

#? (blas-msym! <alpha> <B> <S> <beta> <C>)
;; Update <C> with <alpha>*<B>.<S> + <beta>*<C> and return nothing.
;;
;; Matrix <S> is symmetric, only the upper triangle is referenced.


#? (blas-msym <alpha> <B> <S>)
;; Return <alpha>*<B>.<S>.
(defmacro msym (alpha S B)
  (if (symbolp B)
      `(let ((__C__ (clone-array ,B)))
         (msym! ,alpha ,B ,S 0 __C__)
         __C__)
    (let ((BB (gensym)))
      `(let ((,BB ,B))
	 (msym ,alpha ,BB ,S) )
      )))


#? (blas-utmm! <alpha> <U> <B>)
;; Update <B> with <alpha>*<U>.<B> and return nothing.
;;
;; Matrix <U> is upper triangular.


#? (blas-utmm <alpha> <T> <B>)
;; Return <alpha>*<U>.<B>.
;;
;; Matrix <U> is upper triangular.
(defmacro utmm (alpha U B)
  `(let ((__B__ (copy-array ,B)))
     (utmm! ,alpha ,U __B__)
     __B__)
  )


#? (blas-mutm! <alpha> <B> <U>)
;; Update <B> with <alpha>*<B>.<U> and return nothing.
;;
;; Matrix <U> is upper triangular.


#? (blas-mutm <alpha> <B> <U>)
;; Return <alpha>*<B>.<U>.
;;
;; Matrix <U> is upper triangular.
(defmacro mutm (alpha B U)
  `(let ((__B__ (copy-array ,B)))
     (mutm! ,alpha __B__ ,U)
     __B__)
  )


#? (blas-utsm! <alpha> <U> <B>)
;; Update <B> with <alpha>*<T>^-1.<B> and return nothing.
;;
;; Matrix <U> is upper triangular.


#? (blas-utsm <alpha> <U> <B>)
;; Return <alpha>*<U>^-1.<B>.
;;
;; Matrix <U> is upper triangular.
(defmacro utsm (alpha U B)
  `(let ((__B__ (copy-array ,B)))
     (utsm! ,alpha ,U __B__)
     __B__)
  )


#? (blas-muts! <alpha> <B> <U>)
;; Update <B> with <alpha>*<B>.<U>^-1 and return nothing.
;;
;; Matrix <U> is upper triangular.


#? (blas-muts <alpha> <B> <U>)
;; Return <alpha>*<B>.<U>^-1.
;;
;; Matrix <U> is upper triangular.
(defmacro muts (alpha B U)
  `(let ((__B__ (copy-array ,B)))
     (muts! ,alpha __B__ ,U)
     __B__)
  )

)
