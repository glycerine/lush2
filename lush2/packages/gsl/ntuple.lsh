;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl/gsl-config")



#? *** ntuple

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_ntuple () ,gsl-cpheader-cmd ()))

#? * (dummy_ntuple)
#? * (gsl_ntuple_open <filename> <ntuple_data> <size>)
#? * (gsl_ntuple_create <filename> <ntuple_data> <size>)
#? * (gsl_ntuple_write <ntuple>)
#? * (gsl_ntuple_read <ntuple>)
#? * (gsl_ntuple_bookdata <ntuple>)
#? * (gsl_ntuple_project <h> <ntuple> <value_func> <select_func>)
#? * (gsl_ntuple_close <ntuple>)

;; ********************************************************


(de gsl_ntuple_open (    filename  ntuple_data  size )
    ((-gptr- "char *") filename) 
    ((-gptr- "void *") ntuple_data) 
    ((-int-) size)                     ;; size_t -> int
    (gptr #{ gsl_ntuple_open (  $filename ,$ntuple_data ,$size) #} )          ;; gsl_ntuple * -> gptr
)


(de gsl_ntuple_create (    filename  ntuple_data  size )
    ((-gptr- "char *") filename) 
    ((-gptr- "void *") ntuple_data) 
    ((-int-) size)                     ;; size_t -> int
    (gptr #{ gsl_ntuple_create (  $filename ,$ntuple_data ,$size) #} )          ;; gsl_ntuple * -> gptr
)


(de gsl_ntuple_write (    ntuple )
    ((-gptr- "gsl_ntuple *") ntuple) 
    (int #{ gsl_ntuple_write (  $ntuple) #} )
)

(de gsl_ntuple_read (    ntuple )
    ((-gptr- "gsl_ntuple *") ntuple) 
    (int #{ gsl_ntuple_read (  $ntuple) #} )
)


(de gsl_ntuple_bookdata (    ntuple )
    ((-gptr- "gsl_ntuple *") ntuple) 
    (int #{ gsl_ntuple_bookdata (  $ntuple) #} )
)
  

(de gsl_ntuple_project (    h  ntuple   value_func   select_func )
    ((-gptr- "gsl_histogram *") h) 
    ((-gptr- "gsl_ntuple *") ntuple) 
    ((-gptr- "gsl_ntuple_value_fn *") value_func) 
    ((-gptr- "gsl_ntuple_select_fn *") select_func) 
    (int #{ gsl_ntuple_project (  $h ,$ntuple ,$value_func ,$select_func) #} )
)


(de gsl_ntuple_close (    ntuple )
    ((-gptr- "gsl_ntuple *") ntuple) 
    (int #{ gsl_ntuple_close (  $ntuple) #} )
)



;; ********************************************************

(dhc-make-sf ()
  dummy_ntuple
  gsl_ntuple_open
  gsl_ntuple_create
  gsl_ntuple_write
  gsl_ntuple_read
  gsl_ntuple_bookdata
  gsl_ntuple_project
  gsl_ntuple_close
)
