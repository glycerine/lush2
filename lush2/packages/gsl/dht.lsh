;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl/gsl-config")



#? *** dht

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_dht () ,gsl-cpheader-cmd ()))

#? * (dummy_dht)
#? * (gsl_dht_alloc <size>)
#? * (gsl_dht_new <size> <nu> <xmax>)
#? * (gsl_dht_init <p> <nu> <xmax>)
#? * (gsl_dht_x_sample <p> <n>)
#? * (gsl_dht_k_sample <p> <n>)
#? * (gsl_dht_free <p>)
#? * (gsl_dht_apply <p> <f_in> <f_out>)

;; ********************************************************


(de gsl_dht_alloc (    size )
    ((-int-) size)                     ;; size_t -> int
    (gptr #{ gsl_dht_alloc(  $size) #} )          ;; gsl_dht * -> gptr
)

(de gsl_dht_new (    size  nu  xmax )
    ((-int-) size)                     ;; size_t -> int
    ((-double-) nu) 
    ((-double-) xmax) 
    (gptr #{ gsl_dht_new(  $size ,$nu ,$xmax) #} )          ;; gsl_dht * -> gptr
)



(de gsl_dht_init (    p  nu  xmax )
    ((-gptr- "gsl_dht *") p) 
    ((-double-) nu) 
    ((-double-) xmax) 
    (int #{ gsl_dht_init(  $p ,$nu ,$xmax) #} )
)



(de gsl_dht_x_sample (    p  n )
    ((-gptr- "const gsl_dht *") p) 
    ((-int-) n) 
    (double #{ gsl_dht_x_sample(  $p ,$n) #} )
)




(de gsl_dht_k_sample (    p  n )
    ((-gptr- "const gsl_dht *") p) 
    ((-int-) n) 
    (double #{ gsl_dht_k_sample(  $p ,$n) #} )
)




(de gsl_dht_free (    p )
    ((-gptr- "gsl_dht *") p) 
    #{ gsl_dht_free(  $p) #} 
    ()
)




(de gsl_dht_apply (    p  f_in  f_out )
    ((-gptr- "const gsl_dht *") p) 
    ((-gptr- "double *") f_in) 
    ((-gptr- "double *") f_out) 
    (int #{ gsl_dht_apply(  $p ,$f_in ,$f_out) #} )
)


;; ********************************************************

(dhc-make-sf ()
  dummy_dht
  gsl_dht_alloc
  gsl_dht_new
  gsl_dht_init
  gsl_dht_x_sample
  gsl_dht_k_sample
  gsl_dht_free
  gsl_dht_apply
)
