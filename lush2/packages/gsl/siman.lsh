;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "gsl/gsl-config")



#? *** siman

;; dummy function that adds GSL C header files in C file
(eval `(de dummy_siman () ,gsl-cpheader-cmd ()))

#? * (dummy_siman)
#? * (gsl_siman_solve <r> <x0_p> <ef> <take_step> <distance> <print_position> <copyfunc> <copy_constructor> <destructor> <element_size> <params>)
#? * (gsl_siman_solve_many <r> <x0_p> <ef> <take_step> <distance> <print_position> <element_size> <params>)

;; ********************************************************


(de gsl_siman_solve (    r   x0_p  ef  take_step  distance  print_position  copyfunc  copy_constructor  destructor  element_size  params )
    ((-gptr- "const gsl_rng *") r) 
    ((-gptr- "void *") x0_p) 
    ((-gptr-) ef)                                 ;; gsl_siman_Efunc_t -> gptr
    ((-gptr-) take_step)                          ;; gsl_siman_step_t -> gptr
    ((-gptr-) distance)                           ;; gsl_siman_metric_t -> gptr
    ((-gptr-) print_position)                     ;; gsl_siman_print_t -> gptr
    ((-gptr-) copyfunc)                           ;; gsl_siman_copy_t  -> gptr
    ((-gptr-) copy_constructor)                   ;; gsl_siman_copy_construct_t -> gptr
    ((-gptr-) destructor)                         ;; gsl_siman_destroy_t -> gptr
    ((-int-) element_size)                     ;; size_t -> int
    ((-gptr- "gsl_siman_params_t *") params) 
    #{ gsl_siman_solve(  $r ,$x0_p ,$ef ,$take_step ,$distance ,$print_position ,$copyfunc ,$copy_constructor ,$destructor ,$element_size ,*$params) #} 
    ()
)


(de gsl_siman_solve_many (    r   x0_p  ef  take_step  distance  print_position  element_size  params )
    ((-gptr- "const gsl_rng *") r) 
    ((-gptr- "void *") x0_p) 
    ((-gptr-) ef)                              ;; gsl_siman_Efunc_t  -> gptr
    ((-gptr-) take_step)                       ;; gsl_siman_step_t   -> gptr
    ((-gptr-) distance)                        ;; gsl_siman_metric_t -> gptr
    ((-gptr-) print_position)                  ;; gsl_siman_print_t  -> gptr
    ((-int-) element_size)                     ;; size_t -> int
    ((-gptr- "gsl_siman_params_t *") params) 
    #{ gsl_siman_solve_many (  $r ,$x0_p ,$ef ,$take_step ,$distance ,$print_position ,$element_size ,*$params) #} 
    ()
)



;; ********************************************************

(dhc-make-sf ()
  dummy_siman
  gsl_siman_solve
  gsl_siman_solve_many
)
