;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2009 Leon Bottou, Yann LeCun, Ralf Juengling.
;;;   Copyright (C) 2002 Leon Bottou, Yann LeCun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License as 
;;; published by the Free Software Foundation; either version 2.1 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program; if not, write to the Free Software
;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
;;; MA 02110-1301  USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "opencv/cv-config")
(libload "opencv/cv-arrays")

;; http://opencvlibrary.sourceforge.net/CvReference#cv_imgproc_features

#? ** Edge Detection

(in-namespace cv-

(defun -canny (img edges upper lower size)
  (declare (-obj- (CvMat)) img edges)
  (declare (-double-) upper lower)
  (declare (-int-) size)
  (cv-cpheader)
  (with-check-error
   (let ((ip :img:p) (ep :edges:p))
     #{ cvCanny($ip, $ep, $upper, $lower, $size); #}
     ())))

#? (cv-canny-edges <ubyte-image> [<upper> [lower>]])
;; Compute edge image using the OpenCV implementation of Canny's 
;; algorithm. Two thresholds, <upper> and <lower>, are used to 
;; control the sensitivity of the edge detector and the extent of
;; edge linking in the hysteresis step, respectively (when both 
;; values are the same, no edge linking takes place). The default
;; values are 500 and 1000, respectively.
(defmacro canny-edges (in &optional (lower 500) (upper 1000) (size 5))
  (let ((img (gensym)) (edges (gensym)))
    `(let* ((,img ,in) 
            (,edges (ubyte-array* (idx-shape ,img 0) (idx-shape ,img 1))) )
       (-canny (make-cvmat ,img) (make-cvmat ,edges) ,lower ,upper ,size)
       ,edges)
    ))

) ; in-namespace

(dhc-make-cv "opencv_edges"
             cv--canny
             )
