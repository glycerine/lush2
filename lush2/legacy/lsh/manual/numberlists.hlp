#? ** Operations on Lists of Numbers
These are functions that operate on list of numbers interpreted
as vectors of real numbers. They are provided mostly for convenience 
(and for historical reasons), but are largely obsolete.
Serious vector computation should be performed using
the much more powerful matrix/tensor engine, rather than 
with these list functions.

#? (add-lists <l1> <l2>)
Return the list of the sums term by term of the elements of lists
<l1> and <l2>. This function is equivalent to:
.CODE
(mapcar '+ l1 l2)
.PP

#? (diff-lists <l1> <l2>)
Return the list of the differences term by term of the elements of
lists <l1> and <l2>. This function is equivalent to:
.CODE
(mapcar '- l1 l2)
.PP

#? (abs-dist <l1> [<l2>])

Returns the absolute (L1) distance between the lists of numbers <l1>
and <l2>.  The absolute distance is the sum of the absolutes
differences between the elements of <l1> and <l2>.

If argument <l2> is omitted, a lists of zeros is assummed.

Example:
.EX (abs-dist (range 1 10))


#? (sqr-dist <l1> [<l2>])

Returns the squared (L2) distance between the lists of numbers <l1>
and <l2>. The squared distance is the sum of the squares of the
differences between the elements of <l1> and <l2>.

If argument <l2> is omitted, a lists of zeros is assummed.

#? (sup-dist <l1> [<l2>])

Returns the supremum (L_infinity) distance between the lists of
numbers <l1> and <l2>. The supremum distance is the largest absolute
difference between elements of <l1> and <l2>.

If argument <l2> is omitted, a lists of zeros is assummed.

#? (mean-abs-dist <l1> [<l2>])
.TYPE DE
.FILE sysenv.lsh
.SEE (abs-dist <l1> [<l2>])

Returns the average absolute distance between elements of <l1> and
<l2>.  This is defined as the absolute distance divided by the number
of elements in lists <l1> and <l2>.



#? (mean-sqr-dist <l1> [<l2>])
.TYPE DE
.FILE sysenv.lsh
.SEE (sqr-dist <l1> [<l2>])
Returns the average squared distance between elements of <l1> and <l2>.
This is defined as the squared distance divided by the number
of elements in lists <l1> and <l2>.

#? (mean-sup-dist <l1> [<l2>])
.TYPE DE
.FILE sysenv.lsh
.SEE (sup-dist <l1> [<l2>])
Returns the average supremum distance between elements of <l1> and <l2>.
This is defined as the supremum distance divided by the number
of elements in lists <l1> and <l2>.


#? (hamming-dist [<margin>] <l1> [<l2>])
Returns the number of elements of <l1> and <l2> whose absolute
difference is greater than <margin>. 

If argument <l2> is omitted, a list of zeroes is assumed.

The default value for <margin> is <0>.  In this case <hamming-dist>
returns the number of elements strictly different in <l1> and <l2>.

#? (quadrant-dist <l1> <l2>)
Returns the number of elements of <l1> and <l2> whose sign is
different.

#? (mean-hamming-dist [<margin>] <l1> [<l2>])
.TYPE DE
.FILE	sysenv.lsh
.SEE (hamming-dist [<margin>] <l1> [<l2>])
Returns the averaged hamming distance between lists <l1> and <l2>.
The maximal result thus is 1.

#? (mean-quadrant-dist <l1> <l2>)
.TYPE DE
.FILE	sysenv.lsh
.SEE (quadrant-dist <l1> <l2>)
Returns the averaged quadrant distance between lists <l1> and <l2>.
The maximal result thus is 1.


#? ** Statistical Functions on Lists of Numbers
These are functions that operate on list of numbers.
They are provided mostly for convenience (and for historical
reasons) and are largely obsolete. Serious statistical computation 
should be performed using the much more powerful matrix/tensor engine, 
rather than with these list functions.

#? (find-interval <list> <target> [<width>])
Returns the list of the indices of the elements of <list> whose
distance to target is smaller or equal than <width>. If argument
<width> is omitted, 0 is assumed.

Example:
.CODE
? (de find-max(l)
      (car (find-interval l (sup l))) )
= find-max
? (find-max '(2 1 4 5 -4 -3 -2) )
= 3
.PP

#? (mean <l>)
Returns the average of the elements of list <l>.

Example:
.EX (mean (range 1 10))

#? (median <l>)
Returns the median of the elements of list <l>.

Example:
.EX (median (append (range 5 30 2) (range 1 10)))

#? (ksmallest <l> <k>)
Returns the <k>-th smallest elements of list <l>.
Argument <k> must be an integer between 1 and the
size of the list <l>.

Example:
.EX (ksmallest (append (range 5 30 2) (range 1 10)) 10)


#? (quantile <l> <f>)
Returns the <f>-th quantile of the elements of list <l>.
Argument <f> must be a number between 0 and 1.

Example:
.EX (quantile (append (range 5 30 2) (range 1 10)) 0.9)

#? (sdev <l>)
Returns the standard deviation of the elements of list <l>.

Example:
.EX (sdev (range 1 100))

#? (cov <ly> <lx>)
Returns the covariance of the elements of list <lx> versus the
elements of list <ly>.

Example:
.EX (cov (range 1 10) (range 11 30 2))

#? (regression <lx> <ly>)
Simple monovariate linear regression.

Arguments <lx> and <ly> are two lists of numbers. Function
<regression> returns a list of the form <(A B R)>.
.IP
The function <y=Ax+B> is then the best linear
approximation of dependencies between lists <lx> and <ly>.
.IP
The correlation coefficient <R> measures the fit of the approximation.
The closer <R> is to 1, the better the approximation is.
.PP
Example:
.EX (regression (range 1 10) (range 11 30 2))

#? (x-estimate <lr> <y>)
.TYPE DE
.FILE sysenv.lsh
.SEE (regression <lx> <ly>)
Given the result list <lr> of the <regression>, 
returns a linear estimation of <x> given <y>.

#? (y-estimate <lr> <x>)
.TYPE DE
.FILE sysenv.lsh
.SEE (regression <lx> <ly>)
Given the result list <lr> of the <regression>, 
returns a linear estimation of <y> given <x>.

#? (sum <l>)
Returns the sum of the elements of the list <l>.

Example:
.EX (sum (range 1 10))


