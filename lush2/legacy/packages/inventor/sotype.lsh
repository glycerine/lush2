;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "inventor/inventor-config")



#? *** sotype

;; dummy function that adds inventor header files in C file
(eval `(de |dummy_sotype| () ,inventor-cpheader-cmd ()))

#? * sotype
;;.TYPE CLASS
#? (new sotype <flag>>
#? (==> <sotype> -destructor)
#? (==> <sotype> getname)
#? (==> <sotype> isbad)
#? (==> <sotype> isderivedfrom <s>)
#? (==> <sotype> cancreateinstance)
#? (==> <sotype> createinstance)

#? * (|dummy_sotype|)

;; ********************************************************


(libload "inventor/sb")

;; class SoType : public InventorObject
(defclass SoType InventorObject)

(defmethod SoType  SoType (flag )
  ((-bool-) flag)
  #{  if($flag == false ) {
            $p = malloc(sizeof(SoType));
            $shell_flag = false;
      }
      else 
            $shell_flag = true;
  #}
  ())

(defmethod SoType -destructor ()
  #{  if($shell_flag == false ) {
             free($p);
             $p = NULL;
             $shell_flag = true;
       }
  #} 
  ())

(defmethod SoType  getName (  )
  
  (let*  ((retobj (new SbName ()))
	  (retobjp :retobj:p))
    #{ *((SbName *)$retobjp) = ((SoType *)$p)->getName();  #} 
    retobj))

(defmethod SoType  isBad (  )
  
  (int #{ ((SoType *)$p)->isBad()  #} ))

(defmethod SoType  isDerivedFrom ( s)
  
  ((-gptr- "SoType *") s)    ;; object -> gptr
  (int #{ ((SoType *)$p)->isDerivedFrom(*$s)  #} ))

(defmethod SoType  canCreateInstance (  )
  
  (int #{ ((SoType *)$p)->canCreateInstance()  #} ))

(defmethod SoType  createInstance (  )
  
  (gptr #{ ((SoType *)$p)->createInstance()  #} ))    ;; void *  -> gptr

()

;; ********************************************************

(dhc-make-with-c++ () () 
  |dummy_sotype|
  (sotype  createinstance  cancreateinstance  isderivedfrom  isbad  getname  -destructor  sotype)
)
