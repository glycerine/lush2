;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "inventor/inventor-config")



#? *** nodes_1

;; dummy function that adds inventor header files in C file
(eval `(de |dummy_nodes_1| () ,inventor-cpheader-cmd ()))

#? * sonode
;;.TYPE CLASS
#? (==> <sonode> setoverride <state>)
#? (==> <sonode> isoverride)
#? (==> <sonode> copy <copyconnections>)
#? (==> <sonode> affectsstate)

#? * sogroup
;;.TYPE CLASS
#? (new sogroup <flag>>
#? (==> <sogroup> addchild <child>)
#? (==> <sogroup> insertchild <child> <newchildindex>)
#? (==> <sogroup> getchild <index>)
#? (==> <sogroup> findchild <child>)
#? (==> <sogroup> getnumchildren)
#? (==> <sogroup> removechild <child>)
#? (==> <sogroup> removeallchildren)
#? (==> <sogroup> replacechild <oldchild> <newchild>)

#? * sobasecolor
;;.TYPE CLASS
#? (==> <sobasecolor> getmf-rgb)
#? (new sobasecolor <flag>>

#? * socallback
;;.TYPE CLASS
#? (new socallback <flag>>
#? (==> <socallback> setcallback <func> <userdata>)

#? * socamera
;;.TYPE CLASS
#? (==> <socamera> getsf-viewportmapping)
#? (==> <socamera> getsf-position)
#? (==> <socamera> getsf-orientation)
#? (==> <socamera> getsf-aspectratio)
#? (==> <socamera> getsf-neardistance)
#? (==> <socamera> getsf-fardistance)
#? (==> <socamera> getsf-focaldistance)
#? (==> <socamera> pointat <targetpoint>)
#? (==> <socamera> viewall-node <sceneroot> <vpregion> <slack>)
#? (==> <socamera> viewall-path <path> <vpregion> <slack>)
#? (==> <socamera> getviewportbounds <region>)

#? * soclipplane
;;.TYPE CLASS
#? (==> <soclipplane> getsf-plane)
#? (==> <soclipplane> getsf-on)
#? (new soclipplane <flag>>

#? * socolorindex
;;.TYPE CLASS
#? (==> <socolorindex> getmf-index)
#? (new socolorindex <flag>>

#? * socomplexity
;;.TYPE CLASS
#? (==> <socomplexity> getsf-type)
#? (==> <socomplexity> getsf-value)
#? (==> <socomplexity> getsf-texturequality)
#? (new socomplexity <flag>>

#? * socoordinate3
;;.TYPE CLASS
#? (==> <socoordinate3> getmf-point)
#? (new socoordinate3 <flag>>

#? * socoordinate4
;;.TYPE CLASS
#? (==> <socoordinate4> getmf-point)
#? (new socoordinate4 <flag>>

#? * sodrawstyle
;;.TYPE CLASS
#? (==> <sodrawstyle> getsf-style)
#? (==> <sodrawstyle> getsf-pointsize)
#? (==> <sodrawstyle> getsf-linewidth)
#? (==> <sodrawstyle> getsf-linepattern)
#? (new sodrawstyle <flag>>

#? * soenvironment
;;.TYPE CLASS
#? (==> <soenvironment> getsf-ambientintensity)
#? (==> <soenvironment> getsf-ambientcolor)
#? (==> <soenvironment> getsf-attenuation)
#? (==> <soenvironment> getsf-fogtype)
#? (==> <soenvironment> getsf-fogcolor)
#? (==> <soenvironment> getsf-fogvisibility)
#? (new soenvironment <flag>>

#? * soeventcallback
;;.TYPE CLASS
#? (new soeventcallback <flag>>
#? (==> <soeventcallback> setpath <path>)
#? (==> <soeventcallback> getpath)
#? (==> <soeventcallback> addeventcallback <eventtype> <f> <userdata>)
#? (==> <soeventcallback> removeeventcallback <eventtype> <f> <userdata>)
#? (==> <soeventcallback> getaction)
#? (==> <soeventcallback> getevent)
#? (==> <soeventcallback> getpickedpoint)
#? (==> <soeventcallback> sethandled)
#? (==> <soeventcallback> ishandled)
#? (==> <soeventcallback> grabevents)
#? (==> <soeventcallback> releaseevents)

#? * sofile
;;.TYPE CLASS
#? (==> <sofile> getsf-name)
#? (new sofile <flag>>
#? (==> <sofile> copychildren)

#? * sofont
;;.TYPE CLASS
#? (==> <sofont> getsf-name)
#? (==> <sofont> getsf-size)
#? (new sofont <flag>>

#? * soinfo
;;.TYPE CLASS
#? (==> <soinfo> getsf-string)
#? (new soinfo <flag>>

#? * solabel
;;.TYPE CLASS
#? (==> <solabel> getsf-label)
#? (new solabel <flag>>

#? * solight
;;.TYPE CLASS
#? (==> <solight> getsf-on)
#? (==> <solight> getsf-intensity)
#? (==> <solight> getsf-color)

#? * solightmodel
;;.TYPE CLASS
#? (==> <solightmodel> getsf-model)
#? (new solightmodel <flag>>

#? * somaterialbinding
;;.TYPE CLASS
#? (==> <somaterialbinding> getsf-value)
#? (new somaterialbinding <flag>>

#? * somaterial
;;.TYPE CLASS
#? (==> <somaterial> getmf-ambientcolor)
#? (==> <somaterial> getmf-diffusecolor)
#? (==> <somaterial> getmf-specularcolor)
#? (==> <somaterial> getmf-emissivecolor)
#? (==> <somaterial> getmf-shininess)
#? (==> <somaterial> getmf-transparency)
#? (new somaterial <flag>>

#? * sonormalbinding
;;.TYPE CLASS
#? (==> <sonormalbinding> getsf-value)
#? (new sonormalbinding <flag>>

#? * sonormal
;;.TYPE CLASS
#? (==> <sonormal> getmf-vector)
#? (new sonormal <flag>>

#? * sopackedcolor
;;.TYPE CLASS
#? (==> <sopackedcolor> getmf-orderedrgba)
#? (new sopackedcolor <flag>>

#? * sopickstyle
;;.TYPE CLASS
#? (==> <sopickstyle> getsf-style)
#? (new sopickstyle <flag>>

#? * soprofilecoordinate2
;;.TYPE CLASS
#? (==> <soprofilecoordinate2> getmf-point)
#? (new soprofilecoordinate2 <flag>>

#? * soprofilecoordinate3
;;.TYPE CLASS
#? (==> <soprofilecoordinate3> getmf-point)
#? (new soprofilecoordinate3 <flag>>

#? * soprofile
;;.TYPE CLASS
#? (==> <soprofile> getmf-index)
#? (==> <soprofile> getsf-linkage)

#? * soshape
;;.TYPE CLASS
#? (==> <soshape> affectsstate)

#? * soshapehints
;;.TYPE CLASS
#? (==> <soshapehints> getsf-vertexordering)
#? (==> <soshapehints> getsf-shapetype)
#? (==> <soshapehints> getsf-facetype)
#? (==> <soshapehints> getsf-creaseangle)
#? (new soshapehints <flag>>

#? * sotexture2
;;.TYPE CLASS
#? (==> <sotexture2> getsf-filename)
#? (==> <sotexture2> getsf-image)
#? (==> <sotexture2> getsf-wraps)
#? (==> <sotexture2> getsf-wrapt)
#? (==> <sotexture2> getsf-model)
#? (==> <sotexture2> getsf-blendcolor)
#? (new sotexture2 <flag>>

#? * sotexture2transform
;;.TYPE CLASS
#? (==> <sotexture2transform> getsf-translation)
#? (==> <sotexture2transform> getsf-rotation)
#? (==> <sotexture2transform> getsf-scalefactor)
#? (==> <sotexture2transform> getsf-center)
#? (new sotexture2transform <flag>>

#? * sotexturecoordinate2
;;.TYPE CLASS
#? (==> <sotexturecoordinate2> getmf-point)
#? (new sotexturecoordinate2 <flag>>

#? * sotexturecoordinatebinding
;;.TYPE CLASS
#? (==> <sotexturecoordinatebinding> getsf-value)
#? (new sotexturecoordinatebinding <flag>>

#? * sotexturecoordinatefunction
;;.TYPE CLASS
#? (new sotexturecoordinatefunction <flag>>

#? * sovertexproperty
;;.TYPE CLASS
#? (==> <sovertexproperty> getmf-vertex)
#? (==> <sovertexproperty> getmf-texcoord)
#? (==> <sovertexproperty> getmf-normal)
#? (==> <sovertexproperty> getsf-normalbinding)
#? (==> <sovertexproperty> getmf-orderedrgba)
#? (==> <sovertexproperty> getsf-materialbinding)
#? (new sovertexproperty <flag>>

#? * sowwwinline
;;.TYPE CLASS
#? (new sowwwinline <flag>>
#? (==> <sowwwinline> getsf-bboxcenter)
#? (==> <sowwwinline> getsf-bboxsize)
#? (==> <sowwwinline> getsf-name)
#? (==> <sowwwinline> getsf-alternaterep)
#? (==> <sowwwinline> setfullurlname <url>)
#? (==> <sowwwinline> getfullurlname)
#? (==> <sowwwinline> copychildren)
#? (==> <sowwwinline> requesturldata)
#? (==> <sowwwinline> isurldatarequested)
#? (==> <sowwwinline> isurldatahere)
#? (==> <sowwwinline> cancelurldatarequest)
#? (==> <sowwwinline> setchilddata <urldata>)
#? (==> <sowwwinline> getchilddata)

#? * sotransformation
;;.TYPE CLASS

#? * (|dummy_nodes_1|)

;; ********************************************************


;;************************************************************
;;********** nodes_1
;;************************************************************
(libload "inventor/fields")


;; class SoNode : public SoFieldContainer
(defclass SoNode SoFieldContainer)

(defmethod SoNode  setOverride ( state)
  
  ((-int-) state)                    ;; SbBool -> int
  #{ ((SoNode *)$p)->setOverride($state);  #} 
  ())

(defmethod SoNode  isOverride (  )
  
  (int #{ ((SoNode *)$p)->isOverride()  #} ))

(defmethod SoNode  copy ( copyConnections)
  
  ((-int-) copyConnections)                    ;; SbBool -> int
  (gptr #{ ((SoNode *)$p)->copy($copyConnections)  #} ))    ;; SoNode *  -> gptr

(defmethod SoNode  affectsState (  )
  
  (int #{ ((SoNode *)$p)->affectsState()  #} ))





;; class SoGroup : public SoNode
(defclass SoGroup SoNode)

(defmethod SoGroup  SoGroup ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoGroup;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())

;; (defmethod SoGroup  SoGroup ( flag nChildren)
;;   ((-bool-) flag)
;;   
;;   ((-int-) nChildren)
;;   #{  if($flag == false ) {
;;             $p = new  SoGroup;
;;             $shell_flag = false;
;;       }
;;       else
;;             $shell_flag = true;
;;   #} 
;;   ())

(defmethod SoGroup  addChild ( child)
  
  ((-gptr- "SoNode *") child)
  #{ ((SoGroup *)$p)->addChild($child);  #} 
  ())

(defmethod SoGroup  insertChild ( child newChildIndex)
  
  ((-gptr- "SoNode *") child)
  ((-int-) newChildIndex)
  #{ ((SoGroup *)$p)->insertChild($child,$newChildIndex);  #} 
  ())

(defmethod SoGroup  getChild ( index)
  
  ((-int-) index)
  (gptr #{ ((SoGroup *)$p)->getChild($index)  #} ))    ;; SoNode *  -> gptr

(defmethod SoGroup  findChild ( child)
  
  ((-gptr- "const SoNode *") child)
  (int #{ ((SoGroup *)$p)->findChild($child)  #} ))

(defmethod SoGroup  getNumChildren (  )
  
  (int #{ ((SoGroup *)$p)->getNumChildren()  #} ))

;; (defmethod SoGroup  removeChild ( index)
;;   
;;   ((-int-) index)
;;   #{ ((SoGroup *)$p)->removeChild($index);  #} 
;;   ())

(defmethod SoGroup  removeChild ( child)
  
  ((-gptr- "SoNode *") child)
  #{ ((SoGroup *)$p)->removeChild($child);  #} 
  ())

(defmethod SoGroup  removeAllChildren (  )
  
  #{ ((SoGroup *)$p)->removeAllChildren();  #} 
  ())

;; (defmethod SoGroup  replaceChild ( index newChild)
;;   
;;   ((-int-) index)
;;   ((-gptr- "SoNode *") newChild)
;;   #{ ((SoGroup *)$p)->replaceChild($index,$newChild);  #} 
;;   ())

(defmethod SoGroup  replaceChild ( oldChild newChild)
  
  ((-gptr- "SoNode *") oldChild)
  ((-gptr- "SoNode *") newChild)
  #{ ((SoGroup *)$p)->replaceChild($oldChild,$newChild);  #} 
  ())




;; class SoBaseColor : public SoNode    
(defclass SoBaseColor SoNode)

(defmethod SoBaseColor  getmf_rgb (  )
  
  (let* ((retobj (new SoMFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoBaseColor *)$p)->rgb);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoBaseColor  SoBaseColor ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoBaseColor;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())




;; class SoCallback : public SoNode
(defclass SoCallback SoNode)

(defmethod SoCallback  SoCallback ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoCallback;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())

(defmethod SoCallback  setCallback ( func userData)
  
  ((-gptr- "SoCallbackCB *") func)
  ((-gptr-) userData)
  #{ ((SoCallback *)$p)->setCallback($func,$userData);  #} 
  ())





;; class SoCamera : public SoNode   **abstract**
(defclass SoCamera SoNode)

(defmethod SoCamera  getsf_viewportMapping (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->viewportMapping);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  getsf_position (  )
  
  (let* ((retobj (new SoSFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->position);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  getsf_orientation (  )
  
  (let* ((retobj (new SoSFRotation t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->orientation);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  getsf_aspectRatio (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->aspectRatio);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  getsf_nearDistance (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->nearDistance);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  getsf_farDistance (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->farDistance);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  getsf_focalDistance (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCamera *)$p)->focalDistance);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCamera  pointAt ( targetPoint)
  
  ((-gptr- "const SbVec3f *") targetPoint)   ;; reference -> gptr
  #{ ((SoCamera *)$p)->pointAt(*$targetPoint);  #} 
  ())

(defmethod SoCamera  viewAll_node ( sceneRoot vpRegion slack)
  
  ((-gptr- "SoNode *") sceneRoot)
  ((-gptr- "const SbViewportRegion *") vpRegion)   ;; reference -> gptr
  ((-float-) slack)
  #{ ((SoCamera *)$p)->viewAll($sceneRoot,*$vpRegion,$slack);  #} 
  ())

(defmethod SoCamera  viewAll_path ( path vpRegion slack)
  
  ((-gptr- "SoPath *") path)
  ((-gptr- "const SbViewportRegion *") vpRegion)   ;; reference -> gptr
  ((-float-) slack)
  #{ ((SoCamera *)$p)->viewAll($path,*$vpRegion,$slack);  #} 
  ())

(defmethod SoCamera  getViewportBounds ( region)
  
  ((-gptr- "const SbViewportRegion *") region)   ;; reference -> gptr
  (let*  ((retobj (new SbViewportRegion ()))
	  (retobjp  :retobj:p))
    #{ *((SbViewportRegion *)$retobjp) = ((SoCamera *)$p)->getViewportBounds(*$region);  #} 
    (setq :retobj:p retobjp)
    retobj))












;; class SoClipPlane : public SoNode
(defclass SoClipPlane SoNode)

(defmethod SoClipPlane  getsf_plane (  )
  
  (let* ((retobj (new SoSFPlane t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoClipPlane *)$p)->plane);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoClipPlane  getsf_on (  )
  
  (let* ((retobj (new SoSFBool t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoClipPlane *)$p)->on);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoClipPlane  SoClipPlane ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoClipPlane;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoColorIndex : public SoNode
(defclass SoColorIndex SoNode)

(defmethod SoColorIndex  getmf_index (  )
  
  (let* ((retobj (new SoMFInt32 t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoColorIndex *)$p)->index);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoColorIndex  SoColorIndex ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoColorIndex;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())




;; class SoComplexity : public SoNode
(defclass SoComplexity SoNode)

(defmethod SoComplexity  getsf_type (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoComplexity *)$p)->type);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoComplexity  getsf_value (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoComplexity *)$p)->value);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoComplexity  getsf_textureQuality (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoComplexity *)$p)->textureQuality);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoComplexity  SoComplexity ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoComplexity;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())



;; class SoCoordinate3 : public SoNode
(defclass SoCoordinate3 SoNode)

(defmethod SoCoordinate3  getmf_point (  )
  
  (let* ((retobj (new SoMFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCoordinate3 *)$p)->point);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCoordinate3  SoCoordinate3 ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoCoordinate3;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())




;; class SoCoordinate4 : public SoNode
(defclass SoCoordinate4 SoNode)

(defmethod SoCoordinate4  getmf_point (  )
  
  (let* ((retobj (new SoMFVec4f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoCoordinate4 *)$p)->point);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoCoordinate4  SoCoordinate4 ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoCoordinate4;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoDrawStyle : public SoNode
(defclass SoDrawStyle SoNode)

(defmethod SoDrawStyle  getsf_style (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoDrawStyle *)$p)->style);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoDrawStyle  getsf_pointSize (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoDrawStyle *)$p)->pointSize);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoDrawStyle  getsf_lineWidth (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoDrawStyle *)$p)->lineWidth);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoDrawStyle  getsf_linePattern (  )
  
  (let* ((retobj (new SoSFUShort t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoDrawStyle *)$p)->linePattern);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoDrawStyle  SoDrawStyle ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoDrawStyle;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())




;; class SoEnvironment : public SoNode
(defclass SoEnvironment SoNode)

(defmethod SoEnvironment  getsf_ambientIntensity (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoEnvironment *)$p)->ambientIntensity);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoEnvironment  getsf_ambientColor (  )
  
  (let* ((retobj (new SoSFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoEnvironment *)$p)->ambientColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoEnvironment  getsf_attenuation (  )
  
  (let* ((retobj (new SoSFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoEnvironment *)$p)->attenuation);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoEnvironment  getsf_fogType (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoEnvironment *)$p)->fogType);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoEnvironment  getsf_fogColor (  )
  
  (let* ((retobj (new SoSFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoEnvironment *)$p)->fogColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoEnvironment  getsf_fogVisibility (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoEnvironment *)$p)->fogVisibility);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoEnvironment  SoEnvironment ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoEnvironment;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())









;; class SoEventCallback : public SoNode
(defclass SoEventCallback SoNode)

(defmethod SoEventCallback  SoEventCallback ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoEventCallback;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())

(defmethod SoEventCallback  setPath ( path)
  
  ((-gptr- "SoPath *") path)
  #{ ((SoEventCallback *)$p)->setPath($path);  #} 
  ())

(defmethod SoEventCallback  getPath (  )
  
  (gptr #{ ((SoEventCallback *)$p)->getPath()  #} ))    ;; const SoPath *  -> gptr

(defmethod SoEventCallback  addEventCallback ( eventType f userData)
  
  ((-gptr- "SoType *") eventType)    ;; object -> gptr
  ((-gptr- "SoEventCallbackCB *") f)
  ((-gptr-) userData)
  #{ ((SoEventCallback *)$p)->addEventCallback(*$eventType,$f,$userData);  #} 
  ())

(defmethod SoEventCallback  removeEventCallback ( eventType f userData)
  
  ((-gptr- "SoType *") eventType)    ;; object -> gptr
  ((-gptr- "SoEventCallbackCB *") f)
  ((-gptr-) userData)
  #{ ((SoEventCallback *)$p)->removeEventCallback(*$eventType,$f,$userData);  #} 
  ())

(defmethod SoEventCallback  getAction (  )
  
  (gptr #{ ((SoEventCallback *)$p)->getAction()  #} ))    ;; SoHandleEventAction *  -> gptr

(defmethod SoEventCallback  getEvent (  )
  
  (gptr #{ ((SoEventCallback *)$p)->getEvent()  #} ))    ;; const SoEvent *  -> gptr

(defmethod SoEventCallback  getPickedPoint (  )
  
  (gptr #{ ((SoEventCallback *)$p)->getPickedPoint()  #} ))    ;; const SoPickedPoint *  -> gptr

(defmethod SoEventCallback  setHandled (  )
  
  #{ ((SoEventCallback *)$p)->setHandled();  #} 
  ())

(defmethod SoEventCallback  isHandled (  )
  
  (int #{ ((SoEventCallback *)$p)->isHandled()  #} ))

(defmethod SoEventCallback  grabEvents (  )
  
  #{ ((SoEventCallback *)$p)->grabEvents();  #} 
  ())

(defmethod SoEventCallback  releaseEvents (  )
  
  #{ ((SoEventCallback *)$p)->releaseEvents();  #} 
  ())



;; class SoFile : public SoNode
(defclass SoFile SoNode)

(defmethod SoFile  getsf_name (  )
  
  (let* ((retobj (new SoSFString t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoFile *)$p)->name);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoFile  SoFile ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoFile;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())

(defmethod SoFile  copyChildren (  )
  
  (gptr #{ ((SoFile *)$p)->copyChildren()  #} ))    ;; SoGroup   *  -> gptr





;; class SoFont : public SoNode
(defclass SoFont SoNode)

(defmethod SoFont  getsf_name (  )
  
  (let* ((retobj (new SoSFName t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoFont *)$p)->name);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoFont  getsf_size (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoFont *)$p)->size);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoFont  SoFont ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoFont;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())




;; class SoInfo : public SoNode
(defclass SoInfo SoNode)

(defmethod SoInfo  getsf_string (  )
  
  (let* ((retobj (new SoSFString t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoInfo *)$p)->string);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoInfo  SoInfo ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoInfo;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())



;; class SoLabel : public SoNode
(defclass SoLabel SoNode)

(defmethod SoLabel  getsf_label (  )
  
  (let* ((retobj (new SoSFName t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoLabel *)$p)->label);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoLabel  SoLabel ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoLabel;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())



;; class SoLight : public SoNode
(defclass SoLight SoNode)

(defmethod SoLight  getsf_on (  )
  
  (let* ((retobj (new SoSFBool t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoLight *)$p)->on);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoLight  getsf_intensity (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoLight *)$p)->intensity);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoLight  getsf_color (  )
  
  (let* ((retobj (new SoSFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoLight *)$p)->color);  #} 
    (setq :retobj:p retobjp)
    retobj))






;; class SoLightModel : public SoNode
(defclass SoLightModel SoNode)

(defmethod SoLightModel  getsf_model (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoLightModel *)$p)->model);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoLightModel  SoLightModel ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoLightModel;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())



;; class SoMaterialBinding : public SoNode
(defclass SoMaterialBinding SoNode)

(defmethod SoMaterialBinding  getsf_value (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterialBinding *)$p)->value);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterialBinding  SoMaterialBinding ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoMaterialBinding;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoMaterial : public SoNode
(defclass SoMaterial SoNode)

(defmethod SoMaterial  getmf_ambientColor (  )
  
  (let* ((retobj (new SoMFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterial *)$p)->ambientColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterial  getmf_diffuseColor (  )
  
  (let* ((retobj (new SoMFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterial *)$p)->diffuseColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterial  getmf_specularColor (  )
  
  (let* ((retobj (new SoMFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterial *)$p)->specularColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterial  getmf_emissiveColor (  )
  
  (let* ((retobj (new SoMFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterial *)$p)->emissiveColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterial  getmf_shininess (  )
  
  (let* ((retobj (new SoMFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterial *)$p)->shininess);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterial  getmf_transparency (  )
  
  (let* ((retobj (new SoMFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoMaterial *)$p)->transparency);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoMaterial  SoMaterial ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoMaterial;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())



;; class SoNormalBinding : public SoNode
(defclass SoNormalBinding SoNode)

(defmethod SoNormalBinding  getsf_value (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoNormalBinding *)$p)->value);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoNormalBinding  SoNormalBinding ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoNormalBinding;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoNormal : public SoNode
(defclass SoNormal SoNode)

(defmethod SoNormal  getmf_vector (  )
  
  (let* ((retobj (new SoMFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoNormal *)$p)->vector);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoNormal  SoNormal ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoNormal;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoPackedColor : public SoNode
(defclass SoPackedColor SoNode)

(defmethod SoPackedColor  getmf_orderedRGBA (  )
  
  (let* ((retobj (new SoMFUInt32 t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoPackedColor *)$p)->orderedRGBA);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoPackedColor  SoPackedColor ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoPackedColor;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoPickStyle : public SoNode
(defclass SoPickStyle SoNode)

(defmethod SoPickStyle  getsf_style (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoPickStyle *)$p)->style);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoPickStyle  SoPickStyle ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoPickStyle;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())








;; class SoProfileCoordinate2 : public SoNode
(defclass SoProfileCoordinate2 SoNode)

(defmethod SoProfileCoordinate2  getmf_point (  )
  
  (let* ((retobj (new SoMFVec2f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoProfileCoordinate2 *)$p)->point);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoProfileCoordinate2  SoProfileCoordinate2 ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoProfileCoordinate2;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoProfileCoordinate3 : public SoNode
(defclass SoProfileCoordinate3 SoNode)

(defmethod SoProfileCoordinate3  getmf_point (  )
  
  (let* ((retobj (new SoMFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoProfileCoordinate3 *)$p)->point);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoProfileCoordinate3  SoProfileCoordinate3 ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoProfileCoordinate3;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoProfile : public SoNode
(defclass SoProfile SoNode)

(defmethod SoProfile  getmf_index (  )
  
  (let* ((retobj (new SoMFInt32 t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoProfile *)$p)->index);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoProfile  getsf_linkage (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoProfile *)$p)->linkage);  #} 
    (setq :retobj:p retobjp)
    retobj))





;; class SoShape : public SoNode
(defclass SoShape SoNode)

(defmethod SoShape  affectsState (  )
  
  (int #{ ((SoShape *)$p)->affectsState()  #} ))







;; class SoShapeHints : public SoNode
(defclass SoShapeHints SoNode)

(defmethod SoShapeHints  getsf_vertexOrdering (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoShapeHints *)$p)->vertexOrdering);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoShapeHints  getsf_shapeType (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoShapeHints *)$p)->shapeType);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoShapeHints  getsf_faceType (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoShapeHints *)$p)->faceType);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoShapeHints  getsf_creaseAngle (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoShapeHints *)$p)->creaseAngle);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoShapeHints  SoShapeHints ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoShapeHints;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())




;; class SoTexture2 : public SoNode
(defclass SoTexture2 SoNode)

(defmethod SoTexture2  getsf_filename (  )
  
  (let* ((retobj (new SoSFString t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2 *)$p)->filename);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2  getsf_image (  )
  
  (let* ((retobj (new SoSFImage t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2 *)$p)->image);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2  getsf_wrapS (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2 *)$p)->wrapS);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2  getsf_wrapT (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2 *)$p)->wrapT);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2  getsf_model (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2 *)$p)->model);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2  getsf_blendColor (  )
  
  (let* ((retobj (new SoSFColor t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2 *)$p)->blendColor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2  SoTexture2 ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoTexture2;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())







;; class SoTexture2Transform : public SoNode
(defclass SoTexture2Transform SoNode)

(defmethod SoTexture2Transform  getsf_translation (  )
  
  (let* ((retobj (new SoSFVec2f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2Transform *)$p)->translation);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2Transform  getsf_rotation (  )
  
  (let* ((retobj (new SoSFFloat t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2Transform *)$p)->rotation);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2Transform  getsf_scaleFactor (  )
  
  (let* ((retobj (new SoSFVec2f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2Transform *)$p)->scaleFactor);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2Transform  getsf_center (  )
  
  (let* ((retobj (new SoSFVec2f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTexture2Transform *)$p)->center);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTexture2Transform  SoTexture2Transform ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoTexture2Transform;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoTextureCoordinate2 : public SoNode
(defclass SoTextureCoordinate2 SoNode)

(defmethod SoTextureCoordinate2  getmf_point (  )
  
  (let* ((retobj (new SoMFVec2f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTextureCoordinate2 *)$p)->point);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTextureCoordinate2  SoTextureCoordinate2 ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoTextureCoordinate2;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())







;; class SoTextureCoordinateBinding : public SoNode
(defclass SoTextureCoordinateBinding SoNode)

(defmethod SoTextureCoordinateBinding  getsf_value (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoTextureCoordinateBinding *)$p)->value);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoTextureCoordinateBinding  SoTextureCoordinateBinding ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoTextureCoordinateBinding;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())






;; class SoTextureCoordinateFunction : public SoNode
(defclass SoTextureCoordinateFunction SoNode)

(defmethod SoTextureCoordinateFunction  SoTextureCoordinateFunction ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoTextureCoordinateFunction;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())







;; class SoVertexProperty : public SoNode
(defclass SoVertexProperty SoNode)

(defmethod SoVertexProperty  getmf_vertex (  )
  
  (let* ((retobj (new SoMFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoVertexProperty *)$p)->vertex);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoVertexProperty  getmf_texCoord (  )
  
  (let* ((retobj (new SoMFVec2f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoVertexProperty *)$p)->texCoord);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoVertexProperty  getmf_normal (  )
  
  (let* ((retobj (new SoMFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoVertexProperty *)$p)->normal);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoVertexProperty  getsf_normalBinding (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoVertexProperty *)$p)->normalBinding);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoVertexProperty  getmf_orderedRGBA (  )
  
  (let* ((retobj (new SoMFUInt32 t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoVertexProperty *)$p)->orderedRGBA);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoVertexProperty  getsf_materialBinding (  )
  
  (let* ((retobj (new SoSFEnum t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoVertexProperty *)$p)->materialBinding);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoVertexProperty  SoVertexProperty ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoVertexProperty;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())





;; class SoWWWInline : public SoNode
(defclass SoWWWInline SoNode)

(defmethod SoWWWInline  SoWWWInline ( flag  )
  ((-bool-) flag)
  
  #{  if($flag == false ) {
            $p = new  SoWWWInline;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())

(defmethod SoWWWInline  getsf_bboxCenter (  )
  
  (let* ((retobj (new SoSFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoWWWInline *)$p)->bboxCenter);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoWWWInline  getsf_bboxSize (  )
  
  (let* ((retobj (new SoSFVec3f t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoWWWInline *)$p)->bboxSize);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoWWWInline  getsf_name (  )
  
  (let* ((retobj (new SoSFString t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoWWWInline *)$p)->name);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoWWWInline  getsf_alternateRep (  )
  
  (let* ((retobj (new SoSFNode t))
	 (retobjp :retobj:p))
    #{ $retobjp = &(((SoWWWInline *)$p)->alternateRep);  #} 
    (setq :retobj:p retobjp)
    retobj))

(defmethod SoWWWInline  setFullURLName ( url)
  
  ((-gptr- "const SbString *") url)   ;; reference -> gptr
  #{ ((SoWWWInline *)$p)->setFullURLName(*$url);  #} 
  ())

(defmethod SoWWWInline  getFullURLName (  )
  
  (gptr #{ &(((SoWWWInline *)$p)->getFullURLName())  #} ))  ;; const SbString & -> gptr

(defmethod SoWWWInline  copyChildren (  )
  
  (gptr #{ ((SoWWWInline *)$p)->copyChildren()  #} ))    ;; SoGroup       *  -> gptr

(defmethod SoWWWInline  requestURLData (  )
  
  #{ ((SoWWWInline *)$p)->requestURLData();  #} 
  ())

(defmethod SoWWWInline  isURLDataRequested (  )
  
  (int #{ ((SoWWWInline *)$p)->isURLDataRequested()  #} ))

(defmethod SoWWWInline  isURLDataHere (  )
  
  (int #{ ((SoWWWInline *)$p)->isURLDataHere()  #} ))

(defmethod SoWWWInline  cancelURLDataRequest (  )
  
  #{ ((SoWWWInline *)$p)->cancelURLDataRequest();  #} 
  ())

(defmethod SoWWWInline  setChildData ( urlData)
  
  ((-gptr- "SoNode *") urlData)
  #{ ((SoWWWInline *)$p)->setChildData($urlData);  #} 
  ())

(defmethod SoWWWInline  getChildData (  )
  
  (gptr #{ ((SoWWWInline *)$p)->getChildData()  #} ))    ;; SoNode *  -> gptr





(defclass SoTransformation SoNode)



;; ********************************************************

(dhc-make-with-c++ () () 
  |dummy_nodes_1|
  (sonode  affectsstate  copy  isoverride  setoverride)
  (sogroup  replacechild  removeallchildren  removechild  getnumchildren  findchild  getchild  insertchild  addchild  sogroup)
  (sobasecolor  sobasecolor  getmf-rgb)
  (socallback  setcallback  socallback)
  (socamera  getviewportbounds  viewall-path  viewall-node  pointat  getsf-focaldistance  getsf-fardistance  getsf-neardistance  getsf-aspectratio  getsf-orientation  getsf-position  getsf-viewportmapping)
  (soclipplane  soclipplane  getsf-on  getsf-plane)
  (socolorindex  socolorindex  getmf-index)
  (socomplexity  socomplexity  getsf-texturequality  getsf-value  getsf-type)
  (socoordinate3  socoordinate3  getmf-point)
  (socoordinate4  socoordinate4  getmf-point)
  (sodrawstyle  sodrawstyle  getsf-linepattern  getsf-linewidth  getsf-pointsize  getsf-style)
  (soenvironment  soenvironment  getsf-fogvisibility  getsf-fogcolor  getsf-fogtype  getsf-attenuation  getsf-ambientcolor  getsf-ambientintensity)
  (soeventcallback  releaseevents  grabevents  ishandled  sethandled  getpickedpoint  getevent  getaction  removeeventcallback  addeventcallback  getpath  setpath  soeventcallback)
  (sofile  copychildren  sofile  getsf-name)
  (sofont  sofont  getsf-size  getsf-name)
  (soinfo  soinfo  getsf-string)
  (solabel  solabel  getsf-label)
  (solight  getsf-color  getsf-intensity  getsf-on)
  (solightmodel  solightmodel  getsf-model)
  (somaterialbinding  somaterialbinding  getsf-value)
  (somaterial  somaterial  getmf-transparency  getmf-shininess  getmf-emissivecolor  getmf-specularcolor  getmf-diffusecolor  getmf-ambientcolor)
  (sonormalbinding  sonormalbinding  getsf-value)
  (sonormal  sonormal  getmf-vector)
  (sopackedcolor  sopackedcolor  getmf-orderedrgba)
  (sopickstyle  sopickstyle  getsf-style)
  (soprofilecoordinate2  soprofilecoordinate2  getmf-point)
  (soprofilecoordinate3  soprofilecoordinate3  getmf-point)
  (soprofile  getsf-linkage  getmf-index)
  (soshape  affectsstate)
  (soshapehints  soshapehints  getsf-creaseangle  getsf-facetype  getsf-shapetype  getsf-vertexordering)
  (sotexture2  sotexture2  getsf-blendcolor  getsf-model  getsf-wrapt  getsf-wraps  getsf-image  getsf-filename)
  (sotexture2transform  sotexture2transform  getsf-center  getsf-scalefactor  getsf-rotation  getsf-translation)
  (sotexturecoordinate2  sotexturecoordinate2  getmf-point)
  (sotexturecoordinatebinding  sotexturecoordinatebinding  getsf-value)
  (sotexturecoordinatefunction  sotexturecoordinatefunction)
  (sovertexproperty  sovertexproperty  getsf-materialbinding  getmf-orderedrgba  getsf-normalbinding  getmf-normal  getmf-texcoord  getmf-vertex)
  (sowwwinline  getchilddata  setchilddata  cancelurldatarequest  isurldatahere  isurldatarequested  requesturldata  copychildren  getfullurlname  setfullurlname  getsf-alternaterep  getsf-name  getsf-bboxsize  getsf-bboxcenter  sowwwinline)
  (sotransformation)
)
