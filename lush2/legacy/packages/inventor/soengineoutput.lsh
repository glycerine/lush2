;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "inventor/inventor-config")



#? *** soengineoutput

;; dummy function that adds inventor header files in C file
(eval `(de |dummy_soengineoutput| () ,inventor-cpheader-cmd ()))

#? * soengineoutput
;;.TYPE CLASS
#? (==> <soengineoutput> getconnectiontype)
#? (==> <soengineoutput> getforwardconnections <list>)
#? (==> <soengineoutput> enable <flag>)
#? (==> <soengineoutput> isenabled)
#? (==> <soengineoutput> getcontainer)
#? (new soengineoutput <flag>>
#? (==> <soengineoutput> -destructor)

#? * (|dummy_soengineoutput|)

;; ********************************************************

(libload "inventor/sotype")
(libload "inventor/fields")

;; class SoEngineOutput {
(defclass SoEngineOutput InventorObject)

(defmethod SoEngineOutput  getConnectionType ()
  (let* ((retobj (new SoType ()))
	 (retobjp :retobj:p))
    #{ *((SoType *)$retobjp) = ((SoEngineOutput *)$p)->getConnectionType(); #}
    (setq :retobj:p retobjp)
    retobj))

 (defmethod SoEngineOutput getForwardConnections ( list )
  ((-gptr- "SoFieldList *") list)
  (int #{ ((SoEngineOutput *)$p)->getForwardConnections(*$list) #} ))


(defmethod SoEngineOutput enable ( flag )
  ((-bool-) flag)
  #{ ((SoEngineOutput *)$p)->enable($flag); #}
  ())


(defmethod SoEngineOutput isEnabled ()
  (int #{ ((SoEngineOutput *)$p)->isEnabled() #} ))


(defmethod SoEngineOutput getContainer ()
  (gptr #{ ((SoEngineOutput *)$p)->getContainer() #} ))

(defmethod SoEngineOutput SoEngineOutput (flag)
  ((-bool-) flag)
  #{  if($flag == false ) {
            $p = new  SoEngineOutput;
            $shell_flag = false;
      }
      else
            $shell_flag = true;
  #} 
  ())

(defmethod SoEngineOutput  -destructor (   )
  
  #{  if($shell_flag == false ) {
           delete ((SoEngineOutput *)$p);
           $p = NULL;
           $shell_flag = true;
      }
  #} 
  ())


;; ********************************************************

(dhc-make-with-c++ () () 
  |dummy_soengineoutput|
  (soengineoutput  -destructor  soengineoutput  getcontainer  isenabled  enable  getforwardconnections  getconnectiontype)
)
