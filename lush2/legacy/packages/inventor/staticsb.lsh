;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "inventor/inventor-config")



#? *** staticsb

;; dummy function that adds inventor header files in C file
(eval `(de |dummy_staticsb| () ,inventor-cpheader-cmd ()))

#? * (|dummy_staticsb|)
#? * (sbrotation-slerp <rot0> <rot1> <t>)
#? * (sbrotation-identity)
#? * (sbmatrix-identity)
#? * (sbname-isidentstartchar <c>)
#? * (sbname-isidentchar <c>)
#? * (sbname-isbasenamestartchar <c>)
#? * (sbname-isbasenamechar <c>)
#? * (sbtime-gettimeofday)
#? * (sbtime-zero)
#? * (sbtime-max)

;; ********************************************************


(libload "inventor/sotype")

(de  SbRotation_slerp (rot0  rot1  t)
  
  ((-gptr- "const SbRotation *") rot0)     ;; reference -> gptr
  ((-gptr- "const SbRotation *") rot1)     ;; reference -> gptr
  ((-float-) t)
  (let* ((retobj (new SbRotation ()))
	 (retobjp :retobj:p))
    #{ *((SbRotation *)$retobjp) = SbRotation::slerp(*$rot0 ,*$rot1 ,$t);  #} 
    (setq :retobj:p retobjp)
    retobj))

(de  SbRotation_identity ()
  
  (let* ((retobj (new SbRotation ()))
	 (retobjp :retobj:p))
    #{ *((SbRotation *)$retobjp) = SbRotation::identity();  #} 
    (setq :retobj:p retobjp)
    retobj))

(de  SbMatrix_identity ()
  
  (let* ((retobj (new SbMatrix ()))
	 (retobjp :retobj:p))
    #{ *((SbMatrix *)$retobjp) = SbMatrix::identity();  #} 
    (setq :retobj:p retobjp)
    retobj))

(de  SbName_isIdentStartChar (c)
  
  ((-int-) c)   ;; char -> int
  (int  #{ SbName::isIdentStartChar($c)  #} ))  

(de  SbName_isIdentChar (c)
  
  ((-int-) c)   ;; char -> int
  (int  #{ SbName::isIdentChar($c)  #} ))  

(de  SbName_isBaseNameStartChar (c)
  
  ((-int-) c)    ;; char -> int
  (int  #{ SbName::isBaseNameStartChar($c)  #} ))  

(de  SbName_isBaseNameChar (c)
  
  ((-int-) c)     ;; char -> int
  (int  #{ SbName::isBaseNameChar($c)  #} ))  

(de  SbTime_getTimeOfDay ()
  
  (let* ((retobj (new SbTime ()))
	 (retobjp :retobj:p))
    #{ *((SbTime *)$retobjp) = SbTime::getTimeOfDay();  #} 
    (setq :retobj:p retobjp)
    retobj))  

(de  SbTime_zero ()
  
  (let* ((retobj (new SbTime ()))
	 (retobjp :retobj:p))
    #{ *((SbTime *)$retobjp) = SbTime::zero();  #} 
    (setq :retobj:p retobjp)
    retobj))  

(de  SbTime_max ()
  
  (let* ((retobj (new SbTime ()))
	 (retobjp :retobj:p))
    #{ *((SbTime *)$retobjp) = SbTime::max();  #} 
    (setq :retobj:p retobjp)
    retobj))  

;; ********************************************************

(dhc-make-with-c++ () () 
  |dummy_staticsb|
  sbrotation-slerp
  sbrotation-identity
  sbmatrix-identity
  sbname-isidentstartchar
  sbname-isidentchar
  sbname-isbasenamestartchar
  sbname-isbasenamechar
  sbtime-gettimeofday
  sbtime-zero
  sbtime-max
)
