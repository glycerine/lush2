;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "opencv/cv-config")



#? *** pyramids

;; dummy function that adds OpenCV C header files in C file
(eval `(de dummy_pyramids () ,cv-cpheader-cmd ()))

;; #? * (dummy_pyramids)
;; #? * (cvpyrup <src> <dst> <filter>)
;; #? * (cvpyrdown <src> <dst> <filter>)
;; #? * (cvpyrsegmentation <src> <dst> <storage> <comp> <level> <threshold> <threshold2>)
;; 
;; ********************************************************

;;  /****************************************************************************************\
;;  *                                     Pyramids                                           *
;;  \****************************************************************************************/

#? (cvPyrUp  <src> <dst> <filter>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvPyrUp
;;  //    Purpose: performs factor-2 upsampling of the image with subsequent
;;  //             Gaussian smoothing.
;;  //    Context:
;;  //    Parameters:
;;  //      src - source image
;;  //      dst - destination image(must have twice larger width and height than source image)
;;  //      filter - filter applied. Only IPL_GAUSSIAN_5x5 is allowed.
;;  //    Returns:
;;  //F*/
;;  OPENCVAPI  void  cvPyrUp( const CvArr* src, CvArr* dst,
;;                            int filter CV_DEFAULT(IPL_GAUSSIAN_5x5) );

(de cvPyrUp (src dst filter)
    ((-gptr- "const CvArr *") src)
    ((-gptr- "CvArr *") dst)
    ((-int-) filter)
    #{ cvPyrUp($src, $dst, $filter);  #}
    ())

#? (cvPyrDown  <src> <dst> <filter>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvPyrDown
;;  //    Purpose: performs factor-2 downsampling of the image
;;  //             with prior Gaussian smoothing
;;  //    Context:
;;  //    Parameters:
;;  //        src - source image
;;  //        dst - destination image(must have twice smaller width and height than
;;  //                                 source image)
;;  //        filter - filter applied. Only IPL_GAUSSIAN_5x5 is allowed.
;;  //    Returns:
;;  //F*/
;;  OPENCVAPI  void  cvPyrDown( const CvArr* src, CvArr* dst,
;;                              int filter CV_DEFAULT(IPL_GAUSSIAN_5x5) );

(de cvPyrDown (src dst filter)
    ((-gptr- "const CvArr *") src)
    ((-gptr- "CvArr *") dst)
    ((-int-) filter)
    #{  cvPyrDown($src, $dst, $filter);  #}
    ())

#? (cvPyrSegmentation <src> <dst> <storage> <comp> <level> <threshold> <threshold2>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvPyrSegmentation
;;  //    Purpose: segments image using iterative multi-scale algorithm 
;;  //    Context:
;;  //    Parameters:
;;  //      src - source image
;;  //      dst - destination image
;;  //      storage - pointer to the memory storage
;;  //      comp - pointer to the output sequence of the connected components
;;  //      level - number of level to the pyramid costruction
;;  //      threshold1 - the first segmentation threshold
;;  //      threshold2 - the second segmentation threshold
;;  //    Notes:
;;  //      Source and destination image must be equal types and planes
;;  //F*/
;;  OPENCVAPI void cvPyrSegmentation( IplImage* src,
;;                                 IplImage* dst,
;;                                 CvMemStorage *storage,
;;                                 CvSeq **comp,
;;                                 int level, double threshold1,
;;                                 double threshold2 );
(de cvPyrSegmentation(src dst storage comp level threshold threshold2)
    ((-gptr- "IplImage *") src)
    ((-gptr- "IplImage *") dst)
    ((-gptr- "CvMemStorage *") storage)
    ((-gptr- "CvSeq **") comp)
    ((-int-) level)
    ((-double-) threshold)
    ((-double-) threshold2)
    #{  cvPyrSegmentation($src, $dst, $storage, $comp, $level, $threshold, $threshold2); #}
    ())
;; ********************************************************

(dhc-make-sf ()
  dummy_pyramids
  cvpyrup
  cvpyrdown
  cvpyrsegmentation
)
