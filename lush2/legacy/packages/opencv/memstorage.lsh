;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "opencv/cv-config")



#? *** memstorage

;; dummy function that adds OpenCV C header files in C file
(eval `(de dummy_memstorage () ,cv-cpheader-cmd ()))

;; #? * (dummy_memstorage)
;; #? * (cvcreatememstorage <bsize>)
;; #? * (cvcreatechildmemstorage <parent>)
;; #? * (cvreleasememstorage <stor>)
;; #? * (cvclearmemstorage <stor>)
;; #? * (cvsavememstoragepos <stor> <pos>)
;; #? * (cvrestorememstoragepos <stor> <pos>)

;; ********************************************************


;; /******************************** Memory storage ****************************************/

#? (cvCreateMemStorage  <bsize>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvCreateMemStorage
;;  //    Purpose: creates memory storage
;;  //    Context:
;;  //    Parameters:
;;  //         block_size - size of memory storage blocks.
;;  //                      If 0, default size( Currently 64K) is set
;;  //    Returns:
;;  //      memory storage
;;  //F*/
;;  OPENCVAPI  CvMemStorage*  cvCreateMemStorage( int block_size CV_DEFAULT(0));

(de cvCreateMemStorage (bsize)
    ((-int-) bsize)
    (let ((s (gptr ())))
      #{ $s = (CvMemStorage *) cvCreateMemStorage($bsize); #}
      s))

#? (cvCreateChildMemStorage  <parent>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvCreateChildMemStorage
;;  //    Purpose: creates child memory storage
;;  //            (storage that borrows memory blocks from parent)
;;  //    Context:
;;  //    Parameters:
;;  //         parent - parent memory storage
;;  //    Returns:
;;  //      memory storage
;;  //F*/
;;  OPENCVAPI  CvMemStorage*  cvCreateChildMemStorage( CvMemStorage* parent );

(de cvCreateChildMemStorage (parent)
    ((-gptr- "CvMemStorage *") parent)
    (let (( s (gptr ())))
      #{ $s = (CvMemStorage *) cvCreateChildMemStorage($parent); #}
      s))
 
#? (cvReleaseMemStorage  <stor>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvReleaseMemStorage
;;  //    Purpose: releases memory storage.
;;  //    Context:
;;  //    Parameters:
;;  //         storage - double pointer to memory storage
;;  //    Returns:
;;  //    Notes:
;;  //      if memory storage is simple, all its blocks are released,
;;  //      else(memory storage is child) all its blocks are returned to parent
;;  //F*/
;;  OPENCVAPI  void  cvReleaseMemStorage( CvMemStorage** storage );

(de cvReleaseMemStorage (stor)
    ((-gptr- "CvMemStorage **") stor)
    #{  cvReleaseMemStorage($stor); #}
    ())

#? (cvClearMemStorage  <stor>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvClearMemStorage
;;  //    Purpose: clears memory storage.
;;  //    Context:
;;  //    Parameters:
;;  //         storage - memory storage
;;  //    Returns:
;;  //    Notes:
;;  //      if memory storage is is child, all its blocks are returned to parent,
;;  //      else the top of the storage is reset
;;  //F*/
;;  OPENCVAPI  void  cvClearMemStorage( CvMemStorage* storage );

(de cvClearMemStorage (stor)
    ((-gptr- "CvMemStorage *") stor)
    #{ cvClearMemStorage($stor); #}
    ())

#? (cvSaveMemStoragePos <stor> <pos>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvSaveMemStoragePos
;;  //    Purpose: saves current top of the storage.
;;  //    Context:
;;  //    Parameters:
;;  //         storage - memory storage
;;  //         pos - position structure
;;  //    Returns:
;;  //    Notes:
;;  //F*/
;;  OPENCVAPI  void  cvSaveMemStoragePos( CvMemStorage* storage, CvMemStoragePos* pos );

(de cvSaveMemStoragePos(stor pos)
    ((-gptr- "CvMemStorage *") stor)
    ((-gptr- "CvMemStoragePos *") pos)
    #{ cvSaveMemStoragePos($stor, $pos); #}
    ())
    
#? (cvRestoreMemStoragePos  <stor> <pos>)
;;.VP
;;  /*F///////////////////////////////////////////////////////////////////////////////////////
;;  //    Name:    cvRestoreMemStoragePos
;;  //    Purpose: restores top of the storage.
;;  //    Context:
;;  //    Parameters:
;;  //         storage - memory storage
;;  //         pos - position structure that was filled with cvSaveMemStoragePos
;;  //    Returns:
;;  //    Notes:
;;  //F*/
;;  OPENCVAPI  void  cvRestoreMemStoragePos( CvMemStorage* storage, CvMemStoragePos* pos );

(de cvRestoreMemStoragePos( stor pos)
    ((-gptr- "CvMemStorage *") stor)
    ((-gptr- "CvMemStoragePos *") pos)
    #{ cvRestoreMemStoragePos($stor, $pos); #}
    ())


;; ********************************************************

(dhc-make-sf ()
  dummy_memstorage
  cvcreatememstorage
  cvcreatechildmemstorage
  cvreleasememstorage
  cvclearmemstorage
  cvsavememstoragepos
  cvrestorememstoragepos
)
