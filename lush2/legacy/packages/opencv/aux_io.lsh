
(libload "opencv/aux_const")
(libload "libimage/image-io")
(libload "libimage/show")
(libload "opencv/aux_object")
(libload "opencv/aux_convert")
(libload "opencv/cv-config")

(eval `(de |dummy_cvimage| () ,cv-cpheader-cmd ()))

#? (cvimage-read-rgb <imagefile>)
;; read an image and return a 
;; cvimage object with it.
(de cvimage-read-rgb (filename)
  ((-str-) filename)
  (let* ((buf_idx (image-read-rgb filename))
	 (ret_img (new cvimage (idx-dim buf_idx 1) (idx-dim buf_idx 0) @IPL_DEPTH_8U 3)))
    (idx8u_ipl buf_idx  :ret_img:p)
    ret_img))

(de cvimage-show ( img )
  ((-obj- (cvimage)) img)
  (let ((buf_idx (ubyte-matrix 1 1 1)))
    (ipl8u_idx  :img:p  buf_idx)
    (image-show (squeeze buf_idx)) ))

(dhc-make-sf () |dummy_cvimage| cvimage-read-rgb)
