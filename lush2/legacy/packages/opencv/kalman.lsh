;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "opencv/cv-config")



#? *** kalman

;; dummy function that adds OpenCV C header files in C file
(eval `(de dummy_kalman () ,cv-cpheader-cmd ()))

;; #? * (dummy_kalman)

;; ********************************************************

;;  /****************************************************************************************\
;;  *                                      Kalman Filtering                                  *
;;  \****************************************************************************************/

#? * (cvcreatekalman <dynam> <measure>)
;;.PRE
;;  OPENCVAPI CvKalman* cvCreateKalman(int dynam_params, int measure_params, int control_params);
(de cvCreateKalman(dynam measure control)
    ((-int-) dynam measure control)
    (let ((s (gptr ())))
      #{ $s = cvCreateKalman($dynam, $measure, $control);  #}
      s))


#? * (cvreleasekalman <kalman>)
;;.PRE
;;  OPENCVAPI void  cvReleaseKalman( CvKalman** Kalman);
(de cvReleaseKalman(kalman)
  ((-gptr- "CvKalman **") kalman)
  #{ cvReleaseKalman($kalman); #}
  ())


#? * (cvkalmanpredict <kalman>)
;;.PRE
;;  OPENCVAPI cvMat *cvKalmanPredict( CvKalman* Kalman, const CvMat *control);
(de cvKalmanPredict(kalman control)
    ((-gptr- "CvKalman *") kalman)
    ((-gptr- "CvMat *") control)
    (let ((m (gptr ())))
      ((-gptr- "const CvMat *") m)
      #{ $m = cvKalmanPredict($kalman, $control);  #}
      m))


#? * (cvkalmanCorrect <kalman> <measure>)
;;.PRE
;;  OPENCVAPI cvMat *cvKalmanCorrect( CvKalman* Kalman, CvMat* Measurement);
(de cvKalmanCorrect(kalman measure)
    ((-gptr- "CvKalman *") kalman)
    ((-gptr- "CvMat *") measure)
    (let ((m (gptr ())))
      ((-gptr- "const CvMat *") m)
      #{ $m = cvKalmanCorrect($kalman, $measure); #} 
      m))


;; ********************************************************

(dhc-make-sf ()
  dummy_kalman
  cvcreatekalman
  cvreleasekalman
  cvkalmanpredict
  cvkalmancorrect
)
