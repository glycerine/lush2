;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "htk/htk-config")



#? *** htk_vq

;; dummy function that adds HTK C header files in C file
(eval `(de dummy_htk_vq () ,htk-cpheader-cmd ()))

#? * (dummy_htk_vq)
#? * (initvq)
#? * (createvqtab <tabfn> <magic> <type> <ck> <swidth>)
#? * (createvqnode <vqidx> <nid> <lid> <rid> <mean> <ck> <cov>)
#? * (loadvqtab <tabfn> <magic>)
#? * (storevqtab <vqtab> <tabfn>)
#? * (printvqtab <vqtab>)
#? * (vqnodescore <n> <v> <size> <ck>)
#? * (getvq <vqtab> <nums> <fv> <vq>)

;; ********************************************************


(de InitVQ (  )
    #{ InitVQ(  );  #} 
    ()
)


(de CreateVQTab (  tabfn  magic  type  ck  swidth )
    ((-gptr- "char *") tabfn) 
    ((-int-) magic)                   ;; short -> int
    ((-int-) type)                     ;; TreeType (enum) -> int
    ((-int-) ck)                       ;; CovKind (enum ) -> int
    ((-gptr- "short *") swidth)  
    (gptr   #{ CreateVQTab(  $tabfn   ,$magic   ,$type   ,$ck   ,$swidth  )  #} )       ;; VQTable -> gptr
)


(de CreateVQNode (  vqidx  nid  lid  rid  mean  ck  cov )
    ((-int-) vqidx)                   ;; short -> int
    ((-int-) nid)                   ;; short -> int
    ((-int-) lid)                   ;; short -> int
    ((-int-) rid)                   ;; short -> int
    ((-gptr- "float *") mean) 
    ((-int-) ck)                       ;; CovKind (enum ) -> int
    ((-gptr- "float *") cov)                     ;; Covariance (union of pointers ) -> gptr
    (gptr   #{ CreateVQNode(  $vqidx ,$nid ,$lid ,$rid ,$mean ,$ck , (Covariance)$cov)  #} )  ;; VQNode -> gptr
)


(de LoadVQTab (  tabfn  magic )
    ((-gptr- "char *") tabfn) 
    ((-int-) magic)                    ;; short -> int
    (gptr   #{ LoadVQTab(  $tabfn   ,$magic  )  #} )         ;; VQTable -> gptr
)


(de StoreVQTab (  vqtab  tabfn )
    ((-gptr- "VQTabRec *") vqtab) 
    ((-gptr- "char *") tabfn)  
    #{ StoreVQTab(  $vqtab   ,$tabfn  );  #} 
    ()
)


(de PrintVQTab (  vqtab )
    ((-gptr- "VQTabRec *") vqtab)  
    #{ PrintVQTab(  $vqtab  );  #} 
    ()
)


(de VQNodeScore (  n  v  size  ck )
    ((-gptr- "VQNodeRec *") n) 
    ((-gptr- "float *") v) 
    ((-int-) size) 
    ((-int-) ck)                          ;; CovKind (enum) -> int
    (double   #{ VQNodeScore(  $n   ,$v   ,$size   ,$ck  )  #} )         ;; float -> double 
)


(de GetVQ (  vqtab  nums  fv  vq )
    ((-gptr- "VQTabRec *") vqtab) 
    ((-int-) nums) 
    ((-gptr- "Vector *") fv) 
    ((-gptr- "short *") vq)  
    #{ GetVQ(  $vqtab   ,$nums   ,$fv   ,$vq  );  #} 
    ()
)


;; ********************************************************

(dhc-make-with-libs () (list htk-libhtk)
  dummy_htk_vq
  initvq
  createvqtab
  createvqnode
  loadvqtab
  storevqtab
  printvqtab
  vqnodescore
  getvq
)
